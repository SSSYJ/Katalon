,Feature,ID.No,Title,Test Scenario,Full manual test cases,TC Priority,Automated,test_scripts
0,Login,TC001,TC001_Verify Successful Login With Valid Credentials_P2,Verify login successfully with valid credentials,"Steps 
1. Navigate to OnTest site url ""https://ontest.katalon.com/""
2. Enter email address to Email textbox ""admin1@mail.com""
3. Enter password to Password textbox ""Admin@123""
4. Click button [Login]

Expected result
Dashboard page is loaded successfully",P2,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys

WebUI.comment('Story: [ON] As a Recruiter, I want to log in to the system with credentials')

WebUI.comment('Given I am on the Login page with login URL')

WebUI.comment('When I enter valid email and password')

WebUI.setText(findTestObject('Page_Login/tbx_Email'), GlobalVariable.G_Email)

WebUI.setText(findTestObject('Page_Login/tbx_Password'), GlobalVariable.G_Password)

WebUI.comment('Then I am logged in and navigated to Dashboard page')

WebUI.click(findTestObject('Page_Login/btn_Login'))

WebUI.waitForElementPresent(findTestObject('Module_Navigation/txt_title'), 30)

WebUI.takeScreenshotAsCheckpoint(""Successful Login"")
"
1,Login,TC002,TC002_Verify Failed Login With Invalid Credentials_P3,Verify login successfully with valid credentials,"Steps:
1. Go to OnTest site (https://ontest.katalon.com/)
2. Input an Invalid Credentials to login
Ex: wrong Email, wrong Password, wrong Email and Password, …
3. Click on Login button

Expected result: Error message displays as “Email or password is incorrect”
",P3,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys

WebUI.comment('Story: [ON] As a Recruiter, I want to log in to the system with INVALID credentials')

WebUI.comment('Given I am on the Login page with login URL')

WebUI.comment('When I enter INVALID email and password')

WebUI.setText(findTestObject('Page_Login/tbx_Email'), Email)

WebUI.setText(findTestObject('Page_Login/tbx_Password'), Password)

WebUI.click(findTestObject('Page_Login/btn_Login'))

WebUI.comment('Then system shows an error message')

WebUI.takeScreenshotAsCheckpoint(""Failed Login"")

WebUI.waitForElementPresent(findTestObject('Page_Login/txt_EmailErrorMessage'), 3, FailureHandling.STOP_ON_FAILURE)

def actualEmailErrorMessage = WebUI.getText(findTestObject('Page_Login/txt_EmailErrorMessage'))

WebUI.verifyMatch(actualEmailErrorMessage, expectedEmailErrorMessage, false)

WebUI.waitForElementPresent(findTestObject('Page_Login/txt_PasswordErrorMessage'), 3, FailureHandling.STOP_ON_FAILURE)

def actualPasswordErrorMessage = WebUI.getText(findTestObject('Page_Login/txt_PasswordErrorMessage'))

WebUI.verifyMatch(actualPasswordErrorMessage, expectedPasswordErrorMessage, false)"
2,Logout,TC003,TC003_Verify Logout System Successfully_P3,Verify login successfully with valid credentials,"Pre-condition
User has logged in to OnTest successfully (refer TC-001)

Steps 
1. On the Dashboard page, click on the avatar on the top right corner to open menu
2. Click button [Sign out] 

Expected result
User log out successfully and is navigated to log in page ",P3,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

WebUI.comment('Story: [ON] As a Recruiter, I want to log out of the system')

@SetUp()
def setUp() {
	WebUI.comment('Log in system')
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), [('Email') : GlobalVariable.G_Email, ('Password') : GlobalVariable.G_Password],
		FailureHandling.STOP_ON_FAILURE)
}

WebUI.comment('When I click Sign out')

WebUI.click(findTestObject('Module_Navigation/lbl_Avatar'))

WebUI.click(findTestObject('Page_Login/btn_Logout'))

WebUI.comment('Then I am logged out of the system and redirected to Login page')

WebUI.waitForElementPresent(findTestObject('Page_Login/btn_Login'), 10)



"
3,Change Password,TC004,TC004_Verify Change Password Successfully_P2,Verify login successfully with valid credentials,"Steps:
1. Login to OnTest site (https://ontest.katalon.com/)
2. Click on User's avatar on the top right
3. Click on Change Password link
4. Input all require fields on the Change Password page
5. Click on Submit button

Expected result: 
- Password is changed successfully
- Successful message displays as “Change password successfully.”
",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

def newPassword = 'Admin@123' + System.currentTimeMillis()

@SetUp()
def setUp( ) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), [('Email') : GlobalVariable.G_Email, ('Password') : GlobalVariable.G_Password],
		FailureHandling.STOP_ON_FAILURE)
}

WebUI.comment('Click Change Password')

WebUI.click(findTestObject('Module_Navigation/lbl_Avatar'))

WebUI.click(findTestObject('Module_Navigation/btn_ChangePassword'))

WebUI.comment('Verify page name (ex: Change Password)')

WebUI.waitForElementPresent(findTestObject('Page_ChangePassword/txt_Title'), 10)

WebUI.comment('Enter valid values:')

WebUI.setText(findTestObject('Page_ChangePassword/tbx_CurrentPassword'), GlobalVariable.G_Password)

WebUI.setText(findTestObject('Page_ChangePassword/tbx_NewPassword'), newPassword)

WebUI.setText(findTestObject('Page_ChangePassword/tbx_ConfirmPassword'), newPassword)

WebUI.comment('Click Submit')

WebUI.click(findTestObject('Page_ChangePassword/btn_Submit'))

WebUI.comment('Verify save changes, show a successful message, and stay on the page')

WebUI.verifyElementPresent(findTestObject('Page_ChangePassword/txt_SuccessMessage'), 10)

WebUI.takeScreenshotAsCheckpoint(""Successful Change Password"")

WebUI.comment('Logout system')

WebUI.click(findTestObject('Page_ChangePassword/tbx_CurrentPassword'))

WebUI.waitForElementNotPresent(findTestObject('Page_ChangePassword/txt_SuccessMessage'), 20)

WebUI.callTestCase(findTestCase('Common Test Cases/Login/Logout'), null)

WebUI.comment('Login system with the new password')

WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login With Password And Username'), [('username') : GlobalVariable.G_Email, ('password') : newPassword])

WebUI.comment('Verify login with new password successfully')

WebUI.verifyElementPresent(findTestObject('Module_Navigation/txt_title'), 10)

WebUI.takeScreenshotAsCheckpoint(""Successful Login"")

'Tear down'
if (true) {
	WebUI.setText(findTestObject('Page_ChangePassword/tbx_CurrentPassword'), newPassword)
	
	WebUI.setText(findTestObject('Page_ChangePassword/tbx_NewPassword'), GlobalVariable.G_Password)
	
	WebUI.setText(findTestObject('Page_ChangePassword/tbx_ConfirmPassword'), GlobalVariable.G_Password)
	
	WebUI.click(findTestObject('Page_ChangePassword/btn_Submit'))
	
	WebUI.verifyElementPresent(findTestObject('Page_ChangePassword/txt_SuccessMessage'), 10)
}

"
4,Change Password,TC005,TC005_Verify Change Invalid Password_P4,Verify login successfully with valid credentials,"Pre-condition
User has logged in to OnTest successfully (refer TC-001)

Steps 
1. On the Dashboard page, click on the avatar on the top right corner to open menu
2. Click button [Change password] to go to page ""Change Password""
3. Do not enter value into textbox Current Password, New Password and Confirm Password
4. Click button [Submit]

Expected result
- Error message displays for Current Password as ""This field is required""
- Error message displays for New Password as ""This field is required""
- Error message displays for Confirm Password as ""This field is required""",P4,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

'Setup'
if (true) {
	WebUI.comment('Log in system')
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), [('Email') : GlobalVariable.G_Email, ('Password') : GlobalVariable.G_Password],
		FailureHandling.STOP_ON_FAILURE)
}


WebUI.comment('Click Change Password')

WebUI.click(findTestObject('Module_Navigation/lbl_Avatar'))

WebUI.click(findTestObject('Module_Navigation/btn_ChangePassword'))

WebUI.comment('Verify page name (ex: Change Password)')

WebUI.waitForElementPresent(findTestObject('Page_ChangePassword/txt_Title'), 10)

WebUI.comment('Enter valid values:')

WebUI.setText(findTestObject('Page_ChangePassword/tbx_CurrentPassword'), """")

WebUI.setText(findTestObject('Page_ChangePassword/tbx_NewPassword'), """")

WebUI.setText(findTestObject('Page_ChangePassword/tbx_ConfirmPassword'), """")

WebUI.comment('Click Submit')

WebUI.click(findTestObject('Page_ChangePassword/btn_Submit'))

WebUI.comment('Then system shows an error message')

WebUI.takeScreenshotAsCheckpoint(""Change Invalid Password"")

WebUI.waitForElementPresent(findTestObject('Page_ChangePassword/txt_CurrentPWErrorMessage'), 3, FailureHandling.STOP_ON_FAILURE)

def actualCurrentPWErrorMessage = WebUI.getText(findTestObject('Page_ChangePassword/txt_CurrentPWErrorMessage'))

WebUI.verifyMatch(actualCurrentPWErrorMessage, expectedCurrentPWErrorMessage, false)

WebUI.waitForElementPresent(findTestObject('Page_ChangePassword/txt_NewPWErrorMessage'), 3, FailureHandling.STOP_ON_FAILURE)

def actualNewPWErrorMessage = WebUI.getText(findTestObject('Page_ChangePassword/txt_NewPWErrorMessage'))

WebUI.verifyMatch(actualNewPWErrorMessage, expectedNewPWErrorMessage, false)

WebUI.waitForElementPresent(findTestObject('Page_ChangePassword/txt_ConfirmPWErrorMessage'), 3, FailureHandling.STOP_ON_FAILURE)

def actualConfirmPWErrorMessage = WebUI.getText(findTestObject('Page_ChangePassword/txt_ConfirmPWErrorMessage'))

WebUI.verifyMatch(actualConfirmPWErrorMessage, expectedConfirmPWErrorMessage, false)
"
5,Update my personal info,TC006,TC006_Verify Personal Info_P4,Check personal info,,P4,Yes,
6,Update my personal info,TC007,TC007_Verify Successful Update Profile_P1,Verify login successfully with valid credentials,"Steps:
1. Login to OnTest site (https://ontest.katalon.com/)
2. Click on User’s avatar on the top right
3. Click on My Profile link
4. Input Full Name on the Update My Profile page
5. Input Phone Number on the Update My Profile page
6. Click on Submit button

Expected result: 
- User’s profile is updated successfully
- Successful message displays as “Update profile successfully.”
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

WebUI.comment('Story: [ON] As a Recruiter, I want update profile')

@SetUp()
def setUp( ) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), [('Email') : GlobalVariable.G_Email, ('Password') : GlobalVariable.G_Password],
		FailureHandling.STOP_ON_FAILURE)
}

WebUI.comment('In navbar, I click on avatar')

WebUI.click(findTestObject('Object Repository/Page_UpdateProfile/img_Avatar'))

WebUI.comment('After that, I choose My profile, and profile page will appear')

WebUI.click(findTestObject('Object Repository/Page_UpdateProfile/txt_MyProfile'))

WebUI.waitForElementPresent(findTestObject('Object Repository/Page_UpdateProfile/txt_email'), 20)

WebUI.comment('Update Profile')

WebUI.setText(findTestObject('Object Repository/Page_UpdateProfile/txt_FullName'), newFullName)

WebUI.setText(findTestObject('Object Repository/Page_UpdateProfile/txt_Phone'), newPhone)

WebUI.click(findTestObject('Object Repository/Page_UpdateProfile/btn_Submit'))

WebUI.comment('Verify update profile successfully')

WebUI.waitForPageLoad(10)

WebUI.takeScreenshotAsCheckpoint(""Update Profile"")

WebUI.verifyTextPresent(""Update profile successfully."", false, FailureHandling.STOP_ON_FAILURE)
"
7,Update my personal info,TC008,TC008_Verify Invalid Update Profile_P3,Verify login successfully with valid credentials,"Pre-condition
User has logged in to OnTest successfully (refer TC-001)

Steps 
1. On the Dashboard page, click on the avatar on the top right corner to open menu
2. Click button [My Profile] to go to Update my Profile page
3. Leave textbox Full Name empty
4. Enter '12345678' to textbox Phone
5. Click button [Submit]

Expected result
- Error message displays 'This field is required.' for Full Name
- No error message displays for Phone",P3,Yes,"import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.By as By
import org.openqa.selenium.Keys as Keys
import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject

WebUI.comment('Story: [ON] As a Recruiter, I want update profile')

WebUI.comment('Log in system')

WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), [('Email') : GlobalVariable.G_Email, ('Password') : GlobalVariable.G_Password],
	FailureHandling.STOP_ON_FAILURE)

WebUI.comment('In navbar, I click on avatar')

WebUI.click(findTestObject('Object Repository/Page_UpdateProfile/img_Avatar'))

WebUI.comment('After that, i choose My profile, and profile page will appear')

WebUI.click(findTestObject('Object Repository/Page_UpdateProfile/txt_MyProfile'))

WebUI.waitForElementPresent(findTestObject('Object Repository/Page_UpdateProfile/txt_email'), 20)

WebUI.comment('Update Profile')

WebUI.setText(findTestObject('Object Repository/Page_UpdateProfile/txt_FullName'), newFullName)

WebUI.setText(findTestObject('Object Repository/Page_UpdateProfile/txt_Phone'), newPhone)

WebUI.click(findTestObject('Object Repository/Page_UpdateProfile/btn_Submit'))

WebUI.comment('Verify update profile unsuccessfully')

WebUI.waitForPageLoad(10)

WebUI.takeScreenshotAsCheckpoint(""Update Profile"")

def messageName = WebUI.getText(findTestObject('Page_UpdateProfile/txt_FullNameMessage'))

def messagePhone = WebUI.getText(findTestObject('Page_UpdateProfile/txt_PhoneMessage'))

WebUI.verifyMatch(messageName, NameMessage, false)

WebUI.verifyMatch(messagePhone, PhoneMessage, false)
"
8,Create Libraries,TC009,TC009_Verify Successful Create Library In Empty Page_P3,Verify login successfully with valid credentials,"Pre-conditions:
There are no any libraries in the system.
Steps:
1. Login to OnTest site (https://ontest.katalon.com/)
2. Click on Libraries link on Left Menu.
3. Verify “You have no libraries yet.” message on the page.
4. Click on Create Library button
5. Input a valid Library Name to Create Library dialog
6. Click on Submit button

Expected result: New Library is created successfully
",P3,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

WebUI.comment('Story: [ON] As a Recruiter, I want to create question library.')

@Field String validNameUnique = validName + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp()
def deteleAllLibraries() {
	def libraryNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_libraries')
	def linkHomeLib = findTestObject('Object Repository/Page_Libraries/link_homeLib')
	
	WebUI.comment('Given I am logged in and there are no libraries yet,')
		
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
		
	WebUI.comment('When I click Libraries on the menu,')
	WebUI.click(libraryNavItem)
		
	WebUI.waitForElementVisible(linkHomeLib,5)
		
	'Find the number of libraries'
	WebDriver driver = DriverFactory.getWebDriver()
	def numOfLibraries = driver.findElements(By.xpath(libraryElementsXpath)).size()
		
	'Make sure page is empty'
	if (numOfLibraries != 0) {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Delete All Libraries'), null)
	}
}

def emptyLibraryMessage = findTestObject('Page_Libraries/Empty_Page/txt_empyLibraryMessage')
def createLibraryButton = findTestObject('Page_Libraries/Empty_Page/btn_createLibrary')
def addLibraryDialog = findTestObject('Page_Libraries/dialog_addLibrary')
def fieldName = findTestObject('Page_Libraries/Library_Dialog/txt_nameField')
def submitButton = findTestObject('Page_Libraries/Library_Dialog/btn_Submit')
def txtSuccessfulMessage = findTestObject('Page_Libraries/txt_SuccessfullMessage')
def addQuestionsButton = findTestObject('Page_Libraries/btn_addQuestion')

WebUI.comment('Main Body')
WebUI.comment('Then I see a notice “You have no libraries yet.” and button “Create Library” on the screen.')
if (true) {
	WebUI.verifyElementText(emptyLibraryMessage, emptyMessage, FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyElementVisible(createLibraryButton)
}

WebUI.comment('When I click Create Library button on the screen,')
WebUI.click(createLibraryButton)

WebUI.comment('Then dialog Create Library is displayed')
WebUI.verifyElementVisible(addLibraryDialog)

WebUI.comment('When Enter valid Library Name and Click Submit')
WebUI.setText(fieldName, validNameUnique)
WebUI.click(submitButton)

WebUI.comment('Then Close dialog, show a successful message and create a library. Redirect to Listing of MCQ screen of the newly created library')
if (true) {
	WebUI.waitForElementPresent(txtSuccessfulMessage, 20, FailureHandling.CONTINUE_ON_FAILURE)
	def message = WebUI.getText(txtSuccessfulMessage, FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyMatch(message, successMessage, false)
	
	WebUI.verifyElementNotPresent(addLibraryDialog, 1, FailureHandling.CONTINUE_ON_FAILURE)
	
	WebUI.verifyElementVisible(addQuestionsButton, FailureHandling.CONTINUE_ON_FAILURE)
}

@TearDown()
def teardown() {
	'delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': validNameUnique])
}"
9,Create Libraries,TC010,TC010_Verify Unsuccessful Create Library In Empty Page_P4,Verify login successfully with valid credentials,"Pre-condition
- All the libraries in system have been deleted
- User has logged in to OnTest successfully (refer TC-001)

Steps 
1. From the navigation bar on the left site, click Libraries and should see notice ""You have no librabries yet""
2. Click button [Create Library]
3. On the dialog Create Librabry, leave Librabry Name empty
4. Click button [Submit]

Expected result
- Error message displays 'This field is required.' for Librabry Name",P4,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

WebUI.comment('Story: [ON] As a Recruiter, I want to create question library.')

@SetUp()
def deteleAllLibraries() {
	def libraryNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_libraries')
	def linkHomeLibrary = findTestObject('Object Repository/Page_Libraries/link_homeLib')
	
	WebUI.comment('Given I am logged in and there are no libraries yet,')
	
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Libraries on the menu,')
	WebUI.click(libraryNavItem)
	
	WebUI.waitForElementVisible(linkHomeLibrary, 5)
	
	'Find the number of libraries'
	WebDriver driver = DriverFactory.getWebDriver()
	def numOfLibraries = driver.findElements(By.xpath(libraryElementsXpath)).size()
	
	'Make sure page is empty'
	if (numOfLibraries != 0) {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Delete All Libraries'), null)
	}
}

def emptyLibraryMessage = findTestObject('Page_Libraries/Empty_Page/txt_empyLibraryMessage')
def createLibraryButton = findTestObject('Page_Libraries/Empty_Page/btn_createLibrary')
def addLibraryDialog = findTestObject('Page_Libraries/dialog_addLibrary')
def nameField = findTestObject('Page_Libraries/Library_Dialog/txt_nameField')
def submitButton = findTestObject('Page_Libraries/Library_Dialog/btn_submit')
def txtInvalidMessage = findTestObject('Page_Libraries/Library_Dialog/txt_invalidMessage')

WebUI.comment('Then I see a notice “You have no libraries yet.” and button “Create Library” on the screen.')
if (true) {
	WebUI.verifyElementText(emptyLibraryMessage, emptyMessage, FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyElementVisible(createLibraryButton)
}

WebUI.comment('When I click Create Library button on the screen,')
WebUI.click(createLibraryButton)

WebUI.comment('Then dialog Create Library is displayed')
WebUI.verifyElementVisible(addLibraryDialog)

WebUI.comment('When Enter valid Library Name and Click Submit')
WebUI.setText(nameField, invalidName)
WebUI.click(submitButton)

WebUI.comment('Check the corresponding validated message.')
WebUI.waitForElementPresent(txtInvalidMessage, 20, FailureHandling.CONTINUE_ON_FAILURE)
def message = WebUI.getText(txtInvalidMessage, FailureHandling.CONTINUE_ON_FAILURE)
WebUI.verifyMatch(message, invalidFeedback, false)"
10,Create Libraries,TC011,TC011_Verify Successful Create Library When There Is At Least One Library_P1,Verify login successfully with valid credentials,"Pre-conditions:
There is at least one Library on the system.

Steps:
1. Login to OnTest site (https://ontest.katalon.com/)
2. Click on Libraries link on Left Menu.
3. Click on Create Library button (+) next to the Libraries tittle.
4. Input a valid Library Name to Create Library dialog.
5. Click on Submit button.

Expected result: 
- New Library is created successfully.
- Successful message displays as “Create library successfully.”
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import groovy.transform.Field
import generator.DynamicGenerator

@Field String testLibraryNameUnique = testLibraryName + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validNameUnique = validName + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
WebUI.comment('Story: [ON] As a Recruiter, I want to create question library.')
@SetUp
def setUp( ) {
	def libraryNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_libraries')
	def linkHomeLibrary = findTestObject('Object Repository/Page_Libraries/link_homeLib')
	
	WebUI.comment('Given I am logged in and there is at least TWO libraries,')
	
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
		
	WebUI.comment('When I click Libraries on the menu,')
	WebUI.click(libraryNavItem)
		
	WebUI.waitForElementVisible(linkHomeLibrary,5)
		
	'create Testing MCQ Question.'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New MCQ'), ['libraryName': testLibraryNameUnique])
}

WebUI.waitForPageLoad(30)

def addLibraryButton = findTestObject('Page_Libraries/btn_addLibrary')
def addLibraryDialog = findTestObject('Page_Libraries/dialog_addLibrary')
def nameField = findTestObject('Page_Libraries/Library_Dialog/txt_nameField')
def submitButton = findTestObject('Page_Libraries/Library_Dialog/btn_submit')
def txtSuccessfullMessage = findTestObject('Page_Libraries/txt_SuccessfullMessage')
def addQuestionButton = findTestObject('Page_Libraries/btn_addQuestion')

WebUI.comment('MAIN BODY')
WebUI.waitForElementPresent(addLibraryButton, 20)
WebUI.comment('When I Click Add button next to Libraries on the sub-menu,')
WebUI.click(addLibraryButton)

WebUI.comment('Then dialog Create Library is displayed')
WebUI.verifyElementVisible(addLibraryDialog)

WebUI.takeScreenshotAsCheckpoint('Create Library Name')

WebUI.comment('When Enter valid Library Name and Click Submit')
WebUI.setText(nameField, validNameUnique)
WebUI.click(submitButton)

WebUI.waitForPageLoad(10)
WebUI.comment('Then Close dialog, show a successful message and create a library. Redirect to Listing of MCQ screen of the newly created library')
if (true) {
	WebUI.comment('Show a successful message')
	WebUI.waitForElementPresent(txtSuccessfullMessage, 20, FailureHandling.CONTINUE_ON_FAILURE)
	def message = WebUI.getText(txtSuccessfullMessage, FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyMatch(message, successMessage, false)
	
	WebUI.comment('Close dialog')
	WebUI.verifyElementNotPresent(addLibraryDialog, 1, FailureHandling.CONTINUE_ON_FAILURE)
	
	WebUI.comment('Redirect to Listing of MCQ screen of the newly created library')
	WebUI.verifyElementVisible(addQuestionButton, FailureHandling.CONTINUE_ON_FAILURE)
}

@TearDown()
def tearDown() {
	'delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': testLibraryNameUnique])
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': validNameUnique])
}

"
11,Create Libraries,TC012,TC012_Verify Unsuccessful Create Library When There Is At Least One Library_P2,Verify login successfully with valid credentials,"Pre-condition
- There is at least one librabry available on the system
- User has logged in to OnTest successfully (refer TC-001)

Steps 
1. From the navigation bar on the left site, click Libraries
2. Click button [+] next to title Library
3. On Create Librabry dialog, leave Libraby Name empty
3. Click button [Submit]
4. Click Cancel [Button]

Expected result
- Error message displays 'This field is required.' for Librabry Name at Step 3",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

WebUI.comment('Story: [ON] As a Recruiter, I want to create question library.')

@Field String validNameUnique = testLibraryName + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp()
def setUp( ) {
	def libraryNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_libraries')
	def linkHomeLibrary = findTestObject('Object Repository/Page_Libraries/link_homeLib')
	
	WebUI.comment('Given I am logged in and there is at least ONE libraries,')
	
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Libraries on the menu,')
	WebUI.click(libraryNavItem)
	
	WebUI.waitForElementVisible(linkHomeLibrary,5)
	
	'create Testing MCQ Question.'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New MCQ'), ['libraryName': validNameUnique])
}

@TearDown()
def tearDown() {
	'delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': validNameUnique])
} 

def addLibraryButton = findTestObject('Page_Libraries/btn_addLibrary')
def addLibraryDialog = findTestObject('Page_Libraries/dialog_addLibrary')
def nameField = findTestObject('Page_Libraries/Library_Dialog/txt_nameField')
def submitButton = findTestObject('Page_Libraries/Library_Dialog/btn_submit')
def txtInvalidMessage = findTestObject('Page_Libraries/Library_Dialog/txt_invalidMessage')
def cancelButton = findTestObject('Page_Libraries/More_Action/btn_Cancel')

WebUI.comment('When I Click Add button next to Libraries on the sub-menu,')
WebUI.click(addLibraryButton)

WebUI.comment('Then dialog Create Library is displayed')
WebUI.verifyElementVisible(addLibraryDialog)

WebUI.comment('When Enter INVALID Library Name and Click Submit')
WebUI.setText(nameField, invalidName)
WebUI.click(submitButton)

WebUI.comment('Check the corresponding validated message.')
WebUI.waitForElementPresent(txtInvalidMessage, 20, FailureHandling.CONTINUE_ON_FAILURE)
def message = WebUI.getText(txtInvalidMessage, FailureHandling.CONTINUE_ON_FAILURE)
WebUI.verifyMatch(message, invalidFeedback, false, FailureHandling.CONTINUE_ON_FAILURE)

WebUI.click(cancelButton)"
12,Create Libraries,TC013,TC013_Verify Order And Icon_P3,Verify login successfully with valid credentials,"Pre-conditions:
There is at least 2 Libraries on the system.
Steps:
1. Login to OnTest site (https://ontest.katalon.com/)
2. Click on Libraries link on Left Menu.
3. Click on Create Library button (+) next to the Libraries tittle.
4. Input a valid Library Name to Create Library dialog.
5. Click on Submit button to create a new library
6. Click on 3 dots button on a Library to verify the options in the menu
7. Verify the order of Libraries list
8. Verify the order of Question Types list

Expected result: 
- Update library and Delete library options display when clicking on 3 dots button.
- The order of Libraries is listed alphabetically by library name, ascending order.
- The Question Types list displays with order: Multiple choice, Subjective, Programming, File Upload.
",P3,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

WebUI.comment('Story: [ON] As a Recruiter, I want to create question library.')

def testLibraryName1Unique = testLibraryName1 + CustomKeywords.'generator.randomString.generateRandomString'(10)
def testLibraryName2Unique = testLibraryName2 + CustomKeywords.'generator.randomString.generateRandomString'(10)

// SET UP
def libraryNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_libraries')
def linkHomeLibrary = findTestObject('Object Repository/Page_Libraries/link_homeLib')

WebUI.comment('SET UP')
WebUI.comment('Given I am logged in and there is at least TWO libraries,')
	
'Login'
WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
'Click Libraries on the menu.'
WebUI.click(libraryNavItem)
	
WebUI.waitForElementVisible(linkHomeLibrary, 5)
	
'make sure there is at least TWO library'
WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New MCQ'), ['libraryName': testLibraryName1Unique])
WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New MCQ'), ['libraryName': testLibraryName2Unique])

// MAIN BODY
def addQuestionButton = findTestObject('Page_Libraries/btn_addQuestion')

WebUI.comment('MAIN BODY')
'Find the number of libraries'
WebDriver driver = DriverFactory.getWebDriver()
def numOfLibraries = driver.findElements(By.xpath(libraryElementsXpath)).size()

WebUI.comment('Verify system displays the listing of MCQ questions of the 1st library in the library list by default,')
WebUI.verifyElementVisible(addQuestionButton, FailureHandling.CONTINUE_ON_FAILURE)

WebUI.comment('Verify the order of Question Types on sub-menu,')
if (true) {
	WebUI.verifyElementText(findTestObject('Page_Libraries/btn_questionType', ['type': ""mcq""]), ""Multiple Choice"", FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyElementText(findTestObject('Page_Libraries/btn_questionType', ['type': ""subjective""]), ""Subjective"", FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyElementText(findTestObject('Page_Libraries/btn_questionType', ['type': ""programming""]), ""Programming"", FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyElementText(findTestObject('Page_Libraries/btn_questionType', ['type': ""file""]), ""File Upload"", FailureHandling.CONTINUE_ON_FAILURE)
}

WebUI.comment('Verify More Action icon next to each library name,')
if (true) {
	for(int i = 0; i < numOfLibraries; i++) {
		WebUI.verifyElementVisible(findTestObject('Page_Libraries/More_Action/span_moreToggle_relyOnOrder', ['order': i]), FailureHandling.CONTINUE_ON_FAILURE)
	}
}

WebUI.comment('Click More Action, system shows menu,')
if (true) {
	WebUI.click(findTestObject('Page_Libraries/More_Action/span_moreToggle_relyOnOrder', ['order': 0]))
	'Update library option'
	WebUI.verifyElementText(findTestObject('Page_Libraries/More_Action/updateOption_relyOnOrder', ['order': 1]), 'Update library', FailureHandling.CONTINUE_ON_FAILURE)
	'Delete library option'
	WebUI.verifyElementText(findTestObject('Page_Libraries/More_Action/deleteOption_relyOnOrder', ['order': 1]), 'Delete library', FailureHandling.CONTINUE_ON_FAILURE)
}

WebUI.comment('Verify Order of Libraries on sub-menu: sort alphabetically by library name, ascending order,')
if (true) {
	int i = 1;
	while (i < numOfLibraries) {
		def currentLibraryName = WebUI.getText(findTestObject('Page_Libraries/btn_libraryName_relyOnOrder', ['order': i]))
		WebUI.comment(currentLibraryName)
		def afterLibraryName = WebUI.getText(findTestObject('Page_Libraries/btn_libraryName_relyOnOrder', ['order': i + 1]))
		WebUI.comment(afterLibraryName)
		assert currentLibraryName <= afterLibraryName
		i = i + 1;
	}
}

WebUI.click(libraryNavItem)

// TEAR DOWN
WebUI.comment('TEAR DOWN')
'delete the test libary'
WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': testLibraryName1Unique])
WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': testLibraryName2Unique])"
13,Update Libraries,TC014,TC014_Update Library Successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps 
1. From the navigation bar on the left site, click Libraries
2. Click button [+] next to title Library
3. On Create Librabry dialog, enter Librabry Name as ""testing ontest92""
4. Click button [Submit] you will see new lib is created successfully
5. Select your new lib from the list on the left
6. Click 3 dots menu ... on your lib
7. Click Update Librabry
8. On Update Librabry dialog, enter new lib name ""testing ontest92 update""
9. Click button [Submit]

Expected result
- Toast message indidates ""Update librabry successfully"" displays on the bottom right corner",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import internal.GlobalVariable as GlobalVariable

WebUI.comment('Story: [ON] As a Recruiter, I want to update library.')

def testLibraryName = 'Test Lib ' + System.currentTimeMillis()
def updateLibraryName = 'Test lib update ' + System.currentTimeMillis()

'Set up'
if(true) {
	WebUI.comment('Given I am logged in and there is at least ONE libraries,')
	
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Libraries on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
	
	'create Testing MCQ Question.'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New MCQ'), ['libraryName': testLibraryName])
}

WebUI.comment('Click an existing Library')
WebUI.click(findTestObject('Page_Libraries/btn_libraryName_relyOnName', ['libraryName': testLibraryName]))

WebUI.comment('Click Update Library')
WebUI.click(findTestObject('Page_Libraries/More_Action/span_moreToggle_relyOnName', ['libraryName': testLibraryName]))
WebUI.click(findTestObject('Page_Libraries/More_Action/updateOption_relyOnName', ['libraryName': testLibraryName]))

WebUI.comment('Verify update library dialog appear')
WebUI.verifyElementPresent(findTestObject('Page_Libraries/dialog_UpdateLibrary'), 30)

WebUI.comment('Input valid data')
if (true) {
	WebUI.setText(findTestObject('Page_Libraries/Library_Dialog/tbx_LibraryName'), updateLibraryName)
}

WebUI.comment('Submit change')
WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_Submit'))

WebUI.comment('Verify update library success')
if (true) {
	WebUI.verifyElementNotPresent(findTestObject('Page_Libraries/dialog_UpdateLibrary'), 30)
	
	WebUI.waitForPageLoad(10)
	
	WebUI.takeScreenshotAsCheckpoint('Update Library Name')
	
	WebUI.verifyTextPresent('Update library successfully.', false, FailureHandling.STOP_ON_FAILURE)
}

'Tear down'
if (true) {
	'delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': updateLibraryName])
}
"
14,Update Libraries,TC015,TC015_Update Library Unsuccessfully_P2,Verify login successfully with valid credentials,"Pre-conditions:
- There is at least 1 Library on the system.
- User logged in to the OnTest site.

Steps:
1. Click on Libraries link on Left Menu.
2. Click on 3 dots button on a Library.
3. Click on Update library option
4. Input an invalid Library Name to the field on Update Library dialog.
 (ex: leave the Library Name blank).
5. Click on Submit button

Expected result:
- The Library is not updated.
- Error message displays as “This field is required”.
",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

WebUI.comment('Story: [ON] As a Recruiter, I want to update library.')

def testLibraryName = 'Test Lib ' + System.currentTimeMillis()

'Set up'
if (true) {
	WebUI.comment('Given I am logged in and there is at least ONE libraries,')
	
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Libraries on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
	
	'create Testing MCQ Question.'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New MCQ'), ['libraryName': testLibraryName])
}

WebUI.comment('Click an existing Library')
WebUI.click(findTestObject('Page_Libraries/btn_libraryName_relyOnName', ['libraryName': testLibraryName]))

WebUI.comment('Click Update Library')
WebUI.click(findTestObject('Page_Libraries/More_Action/span_moreToggle_relyOnName', ['libraryName': testLibraryName]))
WebUI.click(findTestObject('Page_Libraries/More_Action/updateOption_relyOnName', ['libraryName': testLibraryName]))

WebUI.comment('Verify update library dialog appear')
//WebUI.verifyElementInViewport(findTestObject('Page_Libraries/dialog_UpdateLibrary'), 30)
WebUI.verifyElementPresent(findTestObject('Page_Libraries/dialog_UpdateLibrary'), 30)

WebUI.comment('Input invalid data')
if (true) {
	WebUI.setText(findTestObject('Page_Libraries/Library_Dialog/tbx_LibraryName'), LibraryName)
}

WebUI.comment('Submit change')
WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_Submit'))

WebUI.comment('Verify update library unsuccess')
if (true) {
	WebUI.verifyElementText(findTestObject('Page_Libraries/Library_Dialog/txt_invalidMessage'), message)
	
	WebUI.click(findTestObject('Page_Libraries/More_Action/btn_Cancel'))
	
	WebUI.verifyElementNotPresent(findTestObject('Page_Libraries/dialog_UpdateLibrary'), 0)
	
	WebUI.verifyElementVisible(findTestObject('Page_Libraries/More_Action/span_moreToggle_relyOnName', ['libraryName': testLibraryName]))
}

'Tear down'
if (true) {
	'delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': testLibraryName])
}
"
15,Delete Libraries,TC016,TC016_Verify info message display when user delete all Libraries_P4,Verify login successfully with valid credentials,"Pre-condition
- There is at least one librabry available on the system
- User has logged in to OnTest successfully (refer TC-001)

Steps 
1. From the navigation bar on the left site, click Libraries
2. Select a lib from the list on the left
3. Click button [+] next to title Library
4. Click 3 dots menu ... on your lib
5. Click Delete Librabry
6. On Delete Librabry dialog, click [OK]
7. Wait for toast message displays ""Delete librabry successfully""
8. Repeat step 3 to 7 untill all the libs have been deleted

Expected result
- Message displays on Librabry page ""You have no librabries yet.""",P4,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import org.openqa.selenium.Keys as Keys

WebUI.comment('Story: [ON] As a Recruiter, I want to delete question libraries')

def name = 'Test Lib ' + System.currentTimeMillis()

'Set up'
if (true) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'When I click Libraries on the menu'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	'Find the number of libraries'
	def numOfLibraries = WebUI.findWebElements(findTestObject('Object Repository/Page_Libraries/cpn_Library'), 5).size()
	
	'Make sure there is at least one library'
	if (numOfLibraries == 0) {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library In Empty Page'), [""validName"": name])
	} else {		
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library'), [""validName"": name])
	}
}

WebUI.waitForPageLoad(10)
'Find the number of libraries'
def numOfLibraries = WebUI.findWebElements(findTestObject('Object Repository/Page_Libraries/cpn_Library'), 5).size()

'Delete all library'
if (numOfLibraries != 0) {
		int i = 1;
		while (i <= numOfLibraries) {
			'Click More action on the library'
			WebUI.click(findTestObject('Object Repository/Page_Libraries/More_Action/span_moreToggle_relyOnOrder', ['order': 0]))
			'Click on Delete option'
			WebUI.click(findTestObject('Object Repository/Page_Libraries/More_Action/deleteOption_relyOnOrder', ['order': 1]))
			'Click OK to confirm'
			WebUI.click(findTestObject('Object Repository/Page_Libraries/More_Action/btn_confirmDelete'))
			'Verify Library Name is deleted successfully'
			WebUI.verifyTextPresent(""Delete library successfully."", false, FailureHandling.STOP_ON_FAILURE)
			WebUI.waitForPageLoad(10)
			WebUI.takeScreenshotAsCheckpoint(""Delete All Library Name"")
			i = i + 1
		}
	}

'Verify there are no libraries yet'
WebUI.verifyTextPresent(""You have no libraries yet."", false, FailureHandling.STOP_ON_FAILURE)"
16,Delete Libraries,TC017,TC017_Verify delete one Library successfully_P1,Verify login successfully with valid credentials,"Pre-conditions:
- There is at least 1 Library on the system.
- User logged in to the OnTest site.

Steps:
1. Click on Libraries link on Left Menu.
2. Click on 3 dots button on a Library.
3. Click on Delete library option.
4. Click on OK button to confirm.

Expected result:
- The Library is deleted successfully.
- Successful message displays as “Delete library successfully.”.
- The Deleted Library does not display on the page any more.
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import org.openqa.selenium.Keys as Keys

WebUI.comment('Story: [ON] As a Recruiter, I want to delete question libraries')
def name = 'Test Lib ' + System.currentTimeMillis()

if(true) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'When I click Libraries on the menu'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
	
	'Find the number of libraries'
	def numOfLibraries = WebUI.findWebElements(findTestObject('Object Repository/Page_Libraries/cpn_Library'), 5).size()
	
	'Make sure there is at least one library'
	if (numOfLibraries == 0) {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library In Empty Page'), [""validName"": name])
	} else {		
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library'), [""validName"": name])
	}
}


WebUI.waitForPageLoad(10)
'Click on more action on the existing Library'
WebUI.click(findTestObject(""Page_Libraries/More_Action/span_moreToggle_relyOnName"", [""libraryName"":name]))

WebUI.takeScreenshotAsCheckpoint(""Delete Library Name"")

'Click Delete library'
WebUI.click(findTestObject(""Page_Libraries/More_Action/deleteOption_relyOnName"", [""libraryName"":name]))

'Click OK'
WebUI.click(findTestObject(""Page_Libraries/More_Action/btn_confirmDelete""))
WebUI.waitForPageLoad(10)

'show a successful message'
WebUI.verifyTextPresent(""Delete library successfully."", false, FailureHandling.STOP_ON_FAILURE)

'deleted Library Name is not present'
WebUI.verifyTextNotPresent(LibName, false, FailureHandling.STOP_ON_FAILURE)

//There is more at least 2 library
//'Redirect to Listing of MCQ screen of the first displayed library on the sub-menu.'
//WebUI.verifyTextPresent(""Add Multiple Choice Question"", false, FailureHandling.STOP_ON_FAILURE)"
17,Delete Libraries,TC018,TC018_Verify error message display when user delete one Library unsuccessfully_P2,Verify login successfully with valid credentials,"Pre-condition
- There is at least one librabry available on the system
- User has logged in to OnTest successfully (refer TC-001)

Steps 
1. From the navigation bar on the left site, click Libraries
2. Click button [+] next to title Library
3. Select a lib from the list on the left
4. Click 3 dots menu ... on your lib
5. Click Delete Librabry
6. On Delete Librabry dialog, click [Cancel]

Expected result
- The librabry is not deleted successfully and still displays on the left list",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import org.openqa.selenium.Keys as Keys

WebUI.comment('Story: [ON] As a Recruiter, I want to delete question libraries')
def name = 'Test Lib ' + System.currentTimeMillis()

if (true) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'When I click Libraries on the menu'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
	
	'Find the number of libraries'
	def numOfLibraries = WebUI.findWebElements(findTestObject('Object Repository/Page_Libraries/cpn_Library'), 5).size()
	
	'Make sure there is at least one library'
	if (numOfLibraries == 0) {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library In Empty Page'), [""validName"": name])
	} else {		
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library'), [""validName"": name])
	}
}

@TearDown()
def tearDown() {
	'Delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': name])
}
WebUI.waitForPageLoad(10)

'Click on more action on the existing Library'
WebUI.click(findTestObject(""Page_Libraries/More_Action/span_moreToggle_relyOnName"", [""libraryName"":name]))

'Click Delete library'
WebUI.click(findTestObject(""Page_Libraries/More_Action/deleteOption_relyOnName"", [""libraryName"":name]))

'Click Cancel'
WebUI.click(findTestObject('Page_Libraries/More_Action/btn_Cancel'))

'The library is still displayed in the library list'
WebUI.verifyTextPresent(name, false, FailureHandling.STOP_ON_FAILURE)
WebUI.takeScreenshotAsCheckpoint(""Delete one Library Name unsuccessfully"")

"
18,Search questions in a library,TC019,TC019_Search question in a library with crietira_P1,Verify login successfully with valid credentials,"Pre-conditions:
- There is at least 1 Library on the system.
- There are some questions in the Multiple Choice type.
- User logged in to the OnTest site.
Steps:
1. Click on Libraries link on Left Menu.
2. Click on a Library Name.
3. Click on the Multiple Choice option under the Question Types section.
4. Input some characters to Search field
5. Click on Search icon
Expected result: The result should match with search criteria. 
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.WebDriver

import com.database.Database as DB
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.util.KeywordUtil as KeyworUtil
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field
import internal.GlobalVariable

WebUI.comment('Click Multiple Choice on Question types')

WebUI.click(findTestObject('Object Repository/Module_Navigation/btn_Libraries'))

WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)

WebUI.comment('Clear all search keywords')

WebUI.setText(findTestObject('Page_Libraries/tbx_SearchQuestion'), criteria)

WebUI.comment('Click search')

WebUI.click(findTestObject('Page_Libraries/btn_Search'))

'Get query result from database'

@Field String testLibraryNameUnique = testLibraryName + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

def libraryId = WebUI.findWebElement(findTestObject('Page_Libraries/btn_libraryName_relyOnName', ['libraryName': testLibraryNameUnique]), 10).getAttribute('id')

def questionIds = getResultFromDatabase(libraryId)

'Verify'
try {
	def questionElements = WebUI.findWebElements(findTestObject('Page_Libraries/cpn_Questions'), 5)

	for (int i = 0; i < questionIds.size(); i++) {
		try {
			if (!(questionElements.get(i).getAttribute('id').equals(questionIds.get(i).get(0).toString()))) {
				KeyworUtil.markFailed('Question\'s id is not matched')
			}
		}
		catch (Exception ex) {
			KeyworUtil.markFailed('Questions are not matched')
		}
	}
}
catch (Exception ex) {
	if (ids.size() != 0) {
		KeyworUtil.markFailed('Questions are not matched')
	}
}

@com.kms.katalon.core.annotation.SetUp
def setUp() {
	WebDriver driver = DriverFactory.getWebDriver()

	'Login'
	WebUI.comment('Precondition: User already logged in')

	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'), [('Email') : GlobalVariable.G_Email, ('Password') : GlobalVariable.G_Password],
		FailureHandling.STOP_ON_FAILURE)

	'Create library'
	WebUI.comment('Click Libraries on the sidebar')

	WebUI.click(findTestObject('Object Repository/Module_Navigation/btn_Libraries'))
	
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
	
	def libraryElementsXpath = '//*[@id=""library-container""]/*[@id]'
	
	def numOfLibraries = driver.findElements(By.xpath(libraryElementsXpath)).size()
	
	if (numOfLibraries == 0) {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library In Empty Page'), [('validName') : testLibraryNameUnique])
	} else {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library'), [('validName') : testLibraryNameUnique])
	}

	WebUI.comment('Click an existing library')

	WebUI.click(findTestObject('Page_Libraries/btn_libraryName_relyOnName', ['libraryName': testLibraryNameUnique]))

	'Create MCQs'
	WebUI.comment('Create MCQs')
	
	for (question in questions.allData) {
		WebUI.callTestCase(findTestCase('Common Test Cases/Question/Create Multiple Choice Question'), [
			'libraryName': testLibraryNameUnique,
			'statement': question[0]
			]
		)
	}

	'Connect to database'
	WebUI.comment('Connect to database')
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}

@com.kms.katalon.core.annotation.TearDown
def tearDown() {
	'Delete library'
	WebUI.click(findTestObject('Page_Libraries/More_Action/span_moreToggle_relyOnName', ['libraryName': testLibraryNameUnique]))
	
	WebUI.click(findTestObject('Page_Libraries/More_Action/deleteOption_relyOnName', ['libraryName': testLibraryNameUnique]))
	
	WebUI.click(findTestObject('Page_Libraries/More_Action/btn_confirmDelete'))
	

	'Close database connection'
	DB.close()
}

def getResultFromDatabase(String libraryId) {
	def query = ""SELECT q.id FROM question q WHERE q.library_id='"" + libraryId + ""' AND q.question_type='Multiple Choice' AND to_tsvector(q.statement || ' ' || array_to_string(q.tags, ' ')) @@ to_tsquery('"" + criteria + ""') ORDER BY q.created_at DESC;""
	
	def result = DB.execute(query)

	return result
}"
19,Search questions in a library,TC020,TC020_Search all questions in a library_P2,Verify login successfully with valid credentials,"Pre-condition
- There is at least one librabry available on the system
- 5 Multiple Choice Questions are added to above librabry
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Libraries
2. Select testing lib from the list on the left 
3. Leave textbox Search Question as empty
4. Click icon Search

Expected result
- All the 5 multiple choice questions are disaplayed on the right with
+ All question Ids match the 5 questions in the pre-condition
+ All question titles are match the 5 questions in the pre-condition",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.WebDriver

import com.database.Database as DB
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.util.KeywordUtil as KeyworUtil
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field
import internal.GlobalVariable

WebUI.comment('Click Multiple Choice on Question types')

WebUI.click(findTestObject('Object Repository/Module_Navigation/btn_Libraries'))
WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)


WebUI.comment('Clear all search keywords')

WebUI.setText(findTestObject('Page_Libraries/tbx_SearchQuestion'), '')

WebUI.comment('Click search')

WebUI.click(findTestObject('Page_Libraries/btn_Search'))

'Get query result from database'
@Field String testLibraryNameUnique = testLibraryName + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

def libraryId = WebUI.findWebElement(findTestObject('Page_Libraries/btn_libraryName_relyOnName', ['libraryName': testLibraryNameUnique]), 10).getAttribute('id')

def questionIds = getResultFromDatabase(libraryId)
println(questionIds)
'Verify'
try {
    def questionElements = WebUI.findWebElements(findTestObject('Page_Libraries/cpn_Questions'), 5)

    for (int i = 0; i < questionIds.size(); i++) {
        try {
            if (!(questionElements.get(i).getAttribute('id').equals(questionIds.get(i).get(0).toString()))) {
                KeyworUtil.markFailed('Question\'s id is not matched')
            }
        }
        catch (Exception ex) {
            KeyworUtil.markFailed('Questions are not matched')
        } 
    }
}
catch (Exception ex) {
    if (ids.size() != 0) {
        KeyworUtil.markFailed('Questions are not matched')
    }
} 

@com.kms.katalon.core.annotation.SetUp
def setUp() {
    WebDriver driver = DriverFactory.getWebDriver()

    'Login'
    WebUI.comment('Precondition: User already logged in')

    WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'), [('Email') : GlobalVariable.G_Email, ('Password') : GlobalVariable.G_Password], 
        FailureHandling.STOP_ON_FAILURE)

    'Create library'
    WebUI.comment('Click Libraries on the sidebar')

    WebUI.click(findTestObject('Object Repository/Module_Navigation/btn_Libraries'))
	
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
	
	def libraryElementsXpath = '//*[@id=""library-container""]/*[@id]'
	
	def numOfLibraries = driver.findElements(By.xpath(libraryElementsXpath)).size()
	
	if (numOfLibraries == 0) {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library In Empty Page'), [('validName') : testLibraryNameUnique])
	} else {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library'), [('validName') : testLibraryNameUnique])
	}

    WebUI.comment('Click an existing library')

	WebUI.click(findTestObject('Page_Libraries/btn_libraryName_relyOnName', ['libraryName': testLibraryNameUnique]))

    'Create MCQs'
    WebUI.comment('Create MCQs')
	
	for (question in questions.allData) {
		println(question.properties)
		WebUI.callTestCase(findTestCase('Common Test Cases/Question/Create Multiple Choice Question'), [
			'libraryName': testLibraryNameUnique,
			'statement': question[0]
			]
		)
	}

    'Connect to database'
	WebUI.comment('Connect to database')
    DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME, 
        GlobalVariable.G_DB_PASSWORD)
}

@com.kms.katalon.core.annotation.TearDown
def tearDown() {
    'Delete library'	
	WebUI.click(findTestObject('Page_Libraries/More_Action/span_moreToggle_relyOnName', ['libraryName': testLibraryNameUnique]))
	
	WebUI.click(findTestObject('Page_Libraries/More_Action/deleteOption_relyOnName', ['libraryName': testLibraryNameUnique]))
	
	WebUI.click(findTestObject('Page_Libraries/More_Action/btn_confirmDelete'))
	

    'Close database connection'
    DB.close()
}

def getResultFromDatabase(String libraryId) {
    def query = ""SELECT q.id FROM question q WHERE q.library_id='"" + libraryId + ""' AND q.question_type='Multiple Choice' ORDER BY q.created_at DESC;""

    def result = DB.execute(query)

    return result
}"
20,Add questions to library,TC021,TC021_Success Add MCQ Question to library_P1,Verify login successfully with valid credentials,"Pre-conditions:
- There is at least 1 Library on the system.
- User logged in to the OnTest site.

Steps:
1. Click on Libraries link on Left Menu.
2. Click on a Library Name.
3. Click on the Multiple Choice option under the Question Types section.
4. Click on the Add Multiple Choice Question button.
5. Input a valid value to Problem Statement field.
6. Select Multiple choice option
7. Input valid values to the choice fields
8. Select the correct choice
9. Click on Add button

Expected result: 
- The MCQ question is added to the Library successfully
- Successful message displays as “Add question successfully”.
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import groovy.transform.Field
import generator.DynamicGenerator
@Field String randomString = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

WebUI.comment('Story: [ON] As a Recruiter, I want to add questions to a library.')

@SetUp()
def setUp( ) {
	WebUI.comment('Given I am logged in and there is at least ONE libraries,')
	
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Libraries on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
	
	'Create test library'
	WebDriver driver = DriverFactory.getWebDriver()
	def numOfLibraries = driver.findElements(By.xpath(libraryElementsXpath)).size()
	
	if (numOfLibraries == 0) {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library In Empty Page'), [""validName"": testLibraryName+randomString])
	} else {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library'), [""validName"": testLibraryName+randomString])
	}
}

@TearDown()
def tearDown() {
	'delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': testLibraryName+randomString])
}

WebUI.comment('Click an existing Library')
WebUI.click(findTestObject('Page_Libraries/btn_libraryName_relyOnName', ['libraryName': testLibraryName+randomString]))

WebUI.comment('Click Add Multiple Choice Question')
WebUI.click(findTestObject('Page_Libraries/btn_questionType', ['type': 'mcq']))
WebUI.click(findTestObject('Page_Libraries/btn_addQuestion'))

WebUI.comment('Verify dialog Add Multiple Choice Question is displayed')
WebUI.verifyElementVisible(findTestObject('Page_Libraries/dialog_addQuestion'))

WebUI.takeScreenshotAsCheckpoint('Add MCQ to Library')

WebUI.comment('Verify required fields are marked with a red asterisk after a label name')
'modify verify later, because spell to much time.'


WebUI.comment('Enter valid values')
if (true) {
	WebUI.click(findTestObject('Page_Libraries/Question_Dialog/txt_ProblemAdd'))
	
	WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/txt_ckeditor_problem'), Problem)
	
	WebUI.click(findTestObject('Page_Libraries/Question_Dialog/lbl_Multiple_Choose',[('CHOOSE_TYPE'):ChooseType]))
	def answers = Answers
	
	List pending = WebUI.findWebElements(findTestObject('Page_Libraries/Question_Dialog/tbx_ChoiceValue'),30)
	
	int closetabsSize = pending.size()
	
	if (closetabsSize > 0) {
		for (int i = 0; i < closetabsSize; i++) {
			pending.get(i).sendKeys(answers[i])
		}
	}
	
	WebUI.click(findTestObject('Page_Libraries/Question_Dialog/rdi_RightAnswer'))
	
	WebUI.setText(findTestObject('Page_Libraries/Question_Dialog/tbx_MaxTime'), '13')
	
	WebUI.selectOptionByValue(findTestObject('Page_Libraries/Question_Dialog/slt_DifficultyLevel'), DifficultLevel, false)
	
	for(tag in Tags) {
		
		WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), tag)
		
		WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), Keys.chord(Keys.ENTER))
		
	}
}

WebUI.comment('Click Add')
WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_Submit'))

WebUI.comment('Verify MCQ is added to Library successfully, show a successful message and redirect to Questions listing page of that question type.')
if (true) {
	WebUI.waitForElementPresent(findTestObject('Page_Libraries/Question_Dialog/toast_Sucess'), 20, FailureHandling.STOP_ON_FAILURE)
	
	def message = WebUI.getText(findTestObject('Page_Libraries/Question_Dialog/toast_Sucess'))
	
	WebUI.verifyMatch(message, ""Add question successfully."", false)
}
"
21,Add questions to library,TC022,TC022_Verify error message display when user add invalid MCQ Question_P2,Verify login successfully with valid credentials,"Pre-condition
- There is at least one librabry available on the system
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Libraries
2. Select testing lib from the list on the left 
3. Select Question Type is ""Multiple Choice""
4. Click button [Add Multiple Choice Question]
5. On Add MCQ dialog, leave textbox Problem Statement empty
6. Select choice is ""Multiple Choice""
7. Do not enter any answers
8. Do not select any anwer radios
9. Select Difficult Level is ""Medium""
10. Enter tag Tag2 into Tag section
11. Press Enter
12. Enter tag Tag1 into Tag section
13. Press Enter
14. Click button [Add]

Expected result
- Error messages display for
+ Problem statement: ""This field is required.""
+ MCQ: ""Choices field is required""
+ MCQ: ""Answers field is required.""",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import groovy.transform.Field
import generator.DynamicGenerator
@Field String randomString = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

WebUI.comment('Story: [ON] As a Recruiter, I want to add questions to a library.')

@SetUp()
def setUp( ) {
	WebUI.comment('Given I am logged in and there is at least ONE libraries,')
	
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Libraries on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
	
	'Create test library'
	WebDriver driver = DriverFactory.getWebDriver()
	def numOfLibraries = driver.findElements(By.xpath(libraryElementsXpath)).size()
	
	if (numOfLibraries == 0) {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library In Empty Page'), [""validName"": testLibraryName+randomString])
	} else {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library'), [""validName"": testLibraryName+randomString])
	}
}

@TearDown()
def tearDown() {
	'delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': testLibraryName+randomString])
}

WebUI.comment('Click an existing Library')
WebUI.click(findTestObject('Page_Libraries/btn_libraryName_relyOnName', ['libraryName': testLibraryName+randomString]))

WebUI.comment('Click Add Multiple Choice Question')
WebUI.click(findTestObject('Page_Libraries/btn_questionType', ['type': 'mcq']))
WebUI.click(findTestObject('Page_Libraries/btn_addQuestion'))

WebUI.comment('Verify dialog Add Multiple Choice Question is displayed')
WebUI.verifyElementVisible(findTestObject('Page_Libraries/dialog_addQuestion'))

WebUI.comment('Enter invalid values')
if (true) {
	WebUI.click(findTestObject('Page_Libraries/Question_Dialog/txt_ProblemAdd'))
	
	WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/txt_ckeditor_problem'), Problem)
	
	WebUI.click(findTestObject('Page_Libraries/Question_Dialog/lbl_Multiple_Choose',[('CHOOSE_TYPE'):ChooseType]))
	
	def answers = Answers
	
	List pending = WebUI.findWebElements(findTestObject('Page_Libraries/Question_Dialog/tbx_ChoiceValue'),30)
	
	int closetabsSize = pending.size()
	
	if (closetabsSize > 0) {
		for (int i = 0; i < closetabsSize; i++) {
			pending.get(i).sendKeys(answers[i])
		}
	}
	
	WebUI.setText(findTestObject('Page_Libraries/Question_Dialog/tbx_MaxTime'), '13')
	
	WebUI.selectOptionByValue(findTestObject('Page_Libraries/Question_Dialog/slt_DifficultyLevel'), DifficultLevel, false)
	
	for(tag in Tags) {
		
		WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), tag)
		
		WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), Keys.chord(Keys.ENTER))
		
	}
}

WebUI.comment('Click Add')
WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_Submit'))

WebUI.comment('Verify error message is displayed')
if (true) {
	def message;
	""order is the order of invalid feedback rely on the order of form's field""
	WebUI.comment('Verify invalid message in problem statement')

	WebUI.waitForElementPresent(findTestObject('Page_Libraries/Question_Dialog/txt_MCQ_ErrorMessage', ['order': 1]), 20, FailureHandling.CONTINUE_ON_FAILURE)
	message = WebUI.getText(findTestObject('Page_Libraries/Question_Dialog/txt_MCQ_ErrorMessage', ['order': 1]), FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyMatch(message, invalidFeedback[0], false)
	
	WebUI.comment('Verify invalid message in option fields')
	WebUI.waitForElementPresent(findTestObject('Page_Libraries/Question_Dialog/txt_MCQ_ErrorMessage', ['order': 2]), 20, FailureHandling.CONTINUE_ON_FAILURE)
	message = WebUI.getText(findTestObject('Page_Libraries/Question_Dialog/txt_MCQ_ErrorMessage', ['order': 2]), FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyMatch(message, invalidFeedback[1], false)
	
	WebUI.comment('Verify invalid message in answer fields')
	WebUI.waitForElementPresent(findTestObject('Page_Libraries/Question_Dialog/txt_MCQ_ErrorMessage', ['order': 3]), 20, FailureHandling.CONTINUE_ON_FAILURE)
	message = WebUI.getText(findTestObject('Page_Libraries/Question_Dialog/txt_MCQ_ErrorMessage', ['order': 3]), FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyMatch(message, invalidFeedback[2], false)

}

WebUI.comment('Click Cancel')
WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_Cancel'))
"
22,Add questions to library,TC023,TC023_Success Add Others Type Question_P1,Verify login successfully with valid credentials,"Pre-conditions:
- There is at least 1 Library on the system.
- User logged in to the OnTest site.

Steps:
1. Click on Libraries link on Left Menu.
2. Click on a Library Name.
3. Click on the Subjective option under the Question Types section.
4. Click on the Add Subjective Question button.
5. Input a valid value to the Problem Statement field.
6. Input valid values to all required fields.
7. Click on Add button to see a new Subjective Question is added to the Library.
8. Repeat above steps with other Question types: Programming, File Upload.
 
Expected result:
- The new question is added to the Library successfully
- Successful message displays as “Add question successfully”.
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import groovy.transform.Field
import generator.DynamicGenerator
@Field String randomString = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

WebUI.comment('Story: [ON] As a Recruiter, I want to add questions to a library.')

@SetUp()
def setUp( ) {
	WebUI.comment('Given I am logged in and there is at least ONE libraries,')
	
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Libraries on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
	
	'Create test library'
	WebDriver driver = DriverFactory.getWebDriver()
	def numOfLibraries = driver.findElements(By.xpath(libraryElementsXpath)).size()
	
	if (numOfLibraries == 0) {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library In Empty Page'), [""validName"": testLibraryName+randomString])
	} else {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library'), [""validName"": testLibraryName+randomString])
	}
}

@TearDown()
def tearDown() {
	'delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': testLibraryName+randomString])
}

WebUI.comment('Click an existing Library')
WebUI.click(findTestObject('Page_Libraries/btn_libraryName_relyOnName', ['libraryName': testLibraryName+randomString]))

def questionType;
def questionTypeId;
for (int i = 2; i <= 4; i++) {
	switch(i) {
		case 2:
			questionType = ""Subjective""
			questionTypeId = ""subjective""
			break;
		case 3:
			questionType = ""Programming""
			questionTypeId = ""programming""
			break;
		case 4:
			questionType = ""File Upload""
			questionTypeId = ""file""
			break;
	}
	WebUI.comment('Click Add' + questionType + 'Question')
	WebUI.click(findTestObject('Page_Libraries/btn_questionType', ['type': questionTypeId]))
	WebUI.click(findTestObject('Page_Libraries/btn_addQuestion'))
	
	WebUI.comment('Verify dialog Add' + questionType + 'Question is displayed')
	WebUI.verifyElementVisible(findTestObject('Page_Libraries/dialog_addQuestion'))
	
	WebUI.takeScreenshotAsCheckpoint('Add other type question to Library')
	
	WebUI.comment('Verify required fields are marked with a red asterisk after a label name')
	'modify verify later, because spell to much time.'
	
	WebUI.comment('Enter valid values')
	if (true) {
		WebUI.click(findTestObject('Page_Libraries/Question_Dialog/txt_ProblemAdd'))
		
		WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/txt_ckeditor_problem'), Problem)
		
		WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/txt_ckeditor_problem'), Keys.chord(Keys.TAB))
		
		WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/txt_ckeditor_SuggestedAnswer'), SuggestAnswer)
		
		WebUI.selectOptionByValue(findTestObject('Page_Libraries/Question_Dialog/slt_DifficultyLevel'), 'Medium', false)
		
		WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), Tags)
		
		WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), Keys.chord(Keys.ENTER))
	}
	WebUI.comment('Click Add')
	WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_Submit'))
	
	WebUI.comment('Verify' + questionType + 'is added to Library successfully, show a successful message and redirect to Questions listing page of that question type.')
	if (true) {
		WebUI.waitForElementPresent(findTestObject('Page_Libraries/Question_Dialog/toast_Sucess'), 20, FailureHandling.STOP_ON_FAILURE)
		
		def message = WebUI.getText(findTestObject('Page_Libraries/Question_Dialog/toast_Sucess'))
		
		WebUI.verifyMatch(message, SuccessMessage, false)
	}
}
"
23,Add questions to library,TC024,TC024_Verify error message display when user add Others invalid Type Question_P3,Verify login successfully with valid credentials,"Pre-condition
- There is at least one librabry available on the system
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Libraries
2. Select testing lib from the list on the left 
3. Select Question Type is ""Programing""
4. Click button [Add Programing Question]
5. On Add APQ dialog, leave textbox Problem Statement empty
6. Leave textbox Suggest Answer empty
7. Enter tag Tag1 into Tag section
8. Press Enter
9. Click button [Add]

Expected result
- Error messages display for
+ Problem statement: ""This field is required.""
+ Suggest answer: ""This field is required.""",P3,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.glassfish.jersey.internal.Errors.ErrorMessage
import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import groovy.transform.Field
import generator.DynamicGenerator
@Field String randomString = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

WebUI.comment('Story: [ON] As a Recruiter, I want to add questions to a library.')

@SetUp()
def setUp( ) {
	WebUI.comment('Given I am logged in and there is at least ONE libraries,')
	
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Libraries on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
	
	'Create test library'
	WebDriver driver = DriverFactory.getWebDriver()
	def numOfLibraries = driver.findElements(By.xpath(libraryElementsXpath)).size()
	
	if (numOfLibraries == 0) {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library In Empty Page'), [""validName"": testLibraryName+randomString])
	} else {
		WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Library'), [""validName"": testLibraryName+randomString])
	}
}

@TearDown()
def tearDown() {
	'delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': testLibraryName+randomString])
}

WebUI.comment('Click an existing Library')
WebUI.click(findTestObject('Page_Libraries/btn_libraryName_relyOnName', ['libraryName': testLibraryName+randomString]))

def questionType;
def questionTypeId;
for (int i = 2; i <= 4; i++) {
	switch(i) {
		case 2:
			questionType = ""Subjective""
			questionTypeId = ""subjective""
			break;
		case 3:
			questionType = ""Programming""
			questionTypeId = ""programming""
			break;
		case 4:
			questionType = ""File Upload""
			questionTypeId = ""file""
			break;
	}
	WebUI.comment('Click Add' + questionType + 'Question')
	WebUI.click(findTestObject('Page_Libraries/btn_questionType', ['type': questionTypeId]))
	WebUI.click(findTestObject('Page_Libraries/btn_addQuestion'))
	
	WebUI.comment('Verify dialog Add' + questionType + 'Question is displayed')
	WebUI.verifyElementVisible(findTestObject('Page_Libraries/dialog_addQuestion'))
	
	WebUI.comment('Verify required fields are marked with a red asterisk after a label name')
	'modify verify later, because spell to much time.'
	
	WebUI.comment('Enter valid values')
	if (true) {
		WebUI.click(findTestObject('Page_Libraries/Question_Dialog/txt_ProblemAdd'))
		
		WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/txt_ckeditor_problem'), Problem)
		
		WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/txt_ckeditor_problem'), Keys.chord(Keys.TAB))
		
		WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/txt_ckeditor_problem'), SuggestAnswer)
		
		WebUI.selectOptionByValue(findTestObject('Page_Libraries/Question_Dialog/slt_DifficultyLevel'), 'Medium', false)
		
		WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), Tags)
		
		WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), Keys.chord(Keys.ENTER))
	}
	
	WebUI.comment('Click Add')
	WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_Submit'))
	
	WebUI.comment('Verify error message is displayed')
	if (true) {
		def message;
		""order is the order of invalid feedback rely on the order of form's field""
		WebUI.comment('Verify invalid message in problem statement')
		WebUI.waitForElementPresent(findTestObject('Page_Libraries/Question_Dialog/txt_MCQ_ErrorMessage', ['order': 1]), 20, FailureHandling.CONTINUE_ON_FAILURE)
		message = WebUI.getText(findTestObject('Page_Libraries/Question_Dialog/txt_MCQ_ErrorMessage', ['order': 1]), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyMatch(message, invalidFeedback[0], false)
		
		""Potential fail when chaneg UI in later, because xpath of object.""
		WebUI.comment('Verify invalid message in suggested answer')
		WebUI.waitForElementPresent(findTestObject('Page_Libraries/Question_Dialog/txt_InvalidSugestedAnswer'), 20, FailureHandling.CONTINUE_ON_FAILURE)
		message = WebUI.getText(findTestObject('Page_Libraries/Question_Dialog/txt_InvalidSugestedAnswer'), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyMatch(message, invalidFeedback[1], false)
	}
	
	WebUI.comment('Click cancel')
	WebUI.click(findTestObject('Page_Libraries/More_Action/btn_Cancel'))
}
"
24,Update questions added in a library,TC025,TC025_Verify update MCQ question successfully_P1,Verify login successfully with valid credentials,"Pre-conditions:

- There is at least 1 Library on the system.
- There is at least 1 MCQ question in the Library
- User logged in to the OnTest site.

Steps:
1. Click on Libraries link on Left Menu.
2. Click on a Library Name.
3. Click on the Multiple Choice option under the Question Types section.
4. Click on the MCQ question in the list.
5. Update the Problem Statement value.
6. Update the Choices option.
7. Update the Choice values.
8. Update the Difficulty Level.
9. Update the Max Time value.
10. Update or add the tag value.
11. Click on Submit button.


Expected result:
- The MCQ question is updated with new information.
- Successful message displays as “Update question successfully”.
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import org.openqa.selenium.Keys as Keys
import com.kms.katalon.core.annotation.SetUp as SetUp
import com.kms.katalon.core.annotation.TearDown as TearDown
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import generator.DynamicGenerator as DynamicGenerator
import groovy.transform.Field as Field

WebUI.comment('Story: [ON] As a Recruiter, I want to update questions in a libary.')

@Field String testLibraryNameUnique = testLibraryName + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

WebUI.comment('Click an existing Library')

WebUI.click(findTestObject('Page_Libraries/btn_libraryName_relyOnName', [('libraryName') : testLibraryNameUnique]))

WebUI.comment('Click Multiple Choice on Question types')

WebUI.click(findTestObject('Page_Libraries/btn_questionType', [('type') : 'mcq']))

WebUI.comment('Click MCQ need to update')

WebUI.click(findTestObject('Page_Libraries/btn_questionList', [('order') : 1]))

WebUI.comment('Verify dialog Update Multiple Choice Question is displayed')

WebUI.waitForElementPresent(findTestObject('Page_Libraries/Question_Dialog/dialog_UpdateQuestion'), 10)

WebUI.takeScreenshotAsCheckpoint(""Update MCQ  Question in Library"")

WebUI.comment('Enter valid values')

if (true) {
    WebUI.clearText(findTestObject('Page_Libraries/Question_Dialog/txt_ProblemUpdate'))

    WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_ProblemUpdate'), 'test')

    WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_SingleChoice'))

    WebUI.setText(findTestObject('Page_Libraries/Question_Dialog/tbx_ChoiceValue'), 'Choice 1')

    WebUI.setText(findTestObject('Page_Libraries/Question_Dialog/tbx_MaxTime'), '10')

    WebUI.selectOptionByValue(findTestObject('Page_Libraries/Question_Dialog/slt_DifficultyLevel'), 'Medium', false)

    WebUI.setText(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), 'newTag')

    WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), Keys.chord(Keys.ENTER))
}

WebUI.comment('Click Submit')

WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_Submit'))

WebUI.comment('Verify MCQ is updated successfully, save changes, show a successful message and redirect to Questions listing page of that question type.')

if (true) {
    WebUI.waitForElementPresent(findTestObject('Page_Libraries/txt_SuccessfullMessage'), 10)

    WebUI.verifyElementText(findTestObject('Page_Libraries/txt_SuccessfullMessage'), 'Update question successfully.')

    WebUI.verifyElementText(findTestObject('Page_Libraries/txt_QuestionStatement', [('order') : 1]), 'test')

    WebUI.verifyElementText(findTestObject('Page_Libraries/txt_QuestionDifficulty', [('order') : 1]), 'Medium')
}

@SetUp
def setUp() {
    WebUI.comment('Given I am logged in and there is at least ONE libraries,')

    'Login'
    WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)

    WebUI.comment('When I click Libraries on the menu,')

    WebUI.click(findTestObject('Object Repository/Module_Navigation/btn_Libraries'))

    WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'), 5)

    'create Testing MCQ Question.'
    WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New MCQ'), [('libraryName') : testLibraryNameUnique])
}

@TearDown
def tearDown() {
    'delete the test libary'
    WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), [('libraryName') : testLibraryNameUnique])
}

"
25,Update questions added in a library,TC026,TC026_Verify error message display when user update MCQ unsuccessfully_P2,Verify login successfully with valid credentials,"Pre-condition
- There is at least one librabry available on the system
- There is at least 1 Multiple Choice Question is added to above librabry with
 + Problem Statement = ""Problem""
 + Tags = tag2, tag1
 + Multiple choice: Option 1, Option 2, Option3, Option 4
 + Difficult level = ""Medium""
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Libraries
2. Select testing lib from the list on the left 
3. Click on 1 MCQ question on the right side
4. On Update MCQ dialog, clear all text of Problem Statement
5. Click X icon to remove all choices
6. Click button [Add a choice]
7. Click button [Submit]

Expected result
- Error messages display for
 + Problem statment: ""This field is required.""
 + Choice Answer: ""Answer field is required.""",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

WebUI.comment('Story: [ON] As a Recruiter, I want to update questions in a libary.')

@Field String testLibraryNameUnique = testLibraryName + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@SetUp()
def setUp( ) {
	WebUI.comment('Given I am logged in and there is at least ONE libraries,')
	
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Libraries on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
	
	'create Testing MCQ Question.'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New MCQ'), ['libraryName': testLibraryNameUnique])
}

@TearDown()
def tearDown() {
	'delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': testLibraryNameUnique])
}

WebUI.comment('Click an existing Library')
WebUI.click(findTestObject('Page_Libraries/btn_libraryName_relyOnName', ['libraryName': testLibraryNameUnique]))

WebUI.comment('Click Multiple Choice on Question types')
WebUI.click(findTestObject('Page_Libraries/btn_questionType', ['type': 'mcq']))

WebUI.comment('Click MCQ need to update')
WebUI.click(findTestObject('Page_Libraries/btn_questionList', ['order': 1]))

WebUI.comment('Verify dialog Update Multiple Choice Question is displayed')
WebUI.waitForElementPresent(findTestObject('Page_Libraries/Question_Dialog/dialog_UpdateQuestion'), 10)

WebUI.comment('Enter invalid values')
if (true) {
	statement = WebUI.getText(findTestObject('Page_Libraries/txt_QuestionStatement', ['order': 1]))
	
	difficulty = WebUI.getText(findTestObject('Page_Libraries/txt_QuestionDifficulty', ['order': 1]))
	
	WebUI.clearText(findTestObject('Page_Libraries/Question_Dialog/txt_ProblemUpdate'), FailureHandling.STOP_ON_FAILURE)
	
	for (def index : (0..3)) {
		WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_RemoveChoice'))
	}
	
	WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_AddChoice'))
}

WebUI.comment('Click Submit')
WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_Submit'))

WebUI.comment('Verify error message is displayed')
if (true) {
	WebUI.verifyElementText(findTestObject('Page_Libraries/Question_Dialog/txt_InvalidStatement'), 'This field is required.')
	//inbug- block temporary
	//WebUI.verifyElementText(findTestObject('Page_Libraries/Question_Dialog/txt_InvalidChoices_Option'), 'Option fields are required')
	
	WebUI.verifyElementText(findTestObject('Page_Libraries/Question_Dialog/txt_InvalidChoices_Answer'), 'Answer field is required.')	
}

WebUI.comment('Click Cancel')
WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_Cancel'))

WebUI.comment('Verify MCQ is updated unsuccessfully, disregard changes, redirect to Questions listing page of that question type.')
if (true) {
	WebUI.verifyElementText(findTestObject('Page_Libraries/txt_QuestionDifficulty', ['order': 1]), difficulty)
	
	WebUI.verifyElementText(findTestObject('Page_Libraries/txt_QuestionStatement', ['order': 1]), statement)
}"
26,Update questions added in a library,TC027,TC027_Verify update Subjective question successfully_P1,Verify login successfully with valid credentials,"Pre-conditions:
 
- There is at least 1 Library on the system.
- There is at least 1 Subjective question in the Library
- User logged in to the OnTest site.

Steps:
1. Click on Libraries link on Left Menu.
2. Click on a Library Name.
3. Click on the Subjective option under the Question Types section.
4. Click on the Subjective question in the list.
5. Update the Problem Statement value.
6. Update the Suggested Answer value.
7. Update the Difficulty Level.
8. Update or add the tag value.
9. Click on Submit button.

Expected result:
- The Subjective question is updated with new information.
- Successful message displays as “Update question successfully”.
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.Keys

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String testLibraryNameUnique = testLibraryName + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@SetUp()
def setUp( ) {
	WebUI.comment('Given I am logged in and there is at least ONE libraries,')
	
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Libraries on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
	
	'create Testing Subjective Question.'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Subjective'), ['libraryName': testLibraryNameUnique])
}

@TearDown()
def tearDown() {
	'delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': testLibraryNameUnique])
}

WebUI.comment('Click an existing Library')
WebUI.click(findTestObject('Page_Libraries/btn_libraryName_relyOnName', ['libraryName': testLibraryNameUnique]))

WebUI.comment('Click Subjective on Question types')
WebUI.click(findTestObject('Page_Libraries/btn_questionType', ['type': 'subjective']))

WebUI.comment('Click Subjective question need to update')
WebUI.click(findTestObject('Page_Libraries/btn_questionList', ['order': 1]))

WebUI.comment('Verify dialog Update Subjective Question is displayed')
WebUI.waitForElementPresent(findTestObject('Page_Libraries/Question_Dialog/dialog_UpdateQuestion'), 10)

WebUI.takeScreenshotAsCheckpoint(""Update Subject Question in Library"")

WebUI.comment('Enter valid values')
if (true) {
	WebUI.clearText(findTestObject('Page_Libraries/Question_Dialog/txt_ProblemUpdate'))
	
	WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_ProblemUpdate'), 'test')
	
	WebUI.clearText(findTestObject('Page_Libraries/Question_Dialog/txt_SuggestedAnswerUpdate'))
	
	WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_SuggestedAnswerUpdate'), 'test')
	
	WebUI.selectOptionByValue(findTestObject('Page_Libraries/Question_Dialog/slt_DifficultyLevel'), 'Medium', false)
	
	WebUI.setText(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), 'newTag')
	
	WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), Keys.chord(Keys.ENTER))
}

WebUI.comment('Click Submit')
WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_Submit'))

WebUI.comment('Verify Subjective is updated successfully, save changes, show a successful message and redirect to Questions listing page of that question type.')
if (true) {
	WebUI.waitForElementPresent(findTestObject('Page_Libraries/txt_SuccessfullMessage'), 10)
	
	WebUI.verifyElementText(findTestObject('Page_Libraries/txt_SuccessfullMessage'), 'Update question successfully.')
	
	WebUI.verifyElementText(findTestObject('Page_Libraries/txt_QuestionStatement', ['order': 1]), 'test')
	
	WebUI.verifyElementText(findTestObject('Page_Libraries/txt_QuestionDifficulty', ['order': 1]), 'Medium')
}"
27,Update questions added in a library,TC028,TC028_Verify error message display when user update Subjective question unsuccessfully_P2,Verify login successfully with valid credentials,"Pre-condition
- There is at least one librabry available on the system
- There is at least 1 Subjective Question is added to above librabry with
 + Problem Statement = ""Problem""
 + Tags = tag2, tag1
 + Suggest Answer = ""Suggest""
 + Difficult level = ""Medium""
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Libraries
2. Select testing lib from the list on the left 
3. Click on 1 Subjective question on the right side
4. On Update Subjective dialog, clear all text of Problem Statement
5. Clear all text of Suggest Answer
6. Click button [Submit]

Expected result
- Error messages display for
 + Problem statment: ""This field is required.""
 + Suggest answer: ""This field is required.""",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String testLibraryNameUnique = testLibraryName + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@SetUp()
def setUp( ) {
	WebUI.comment('Given I am logged in and there is at least ONE libraries,')
	
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Libraries on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
	
	'create Testing Subjective Question.'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Subjective'), ['libraryName': testLibraryNameUnique])
}

@TearDown()
def tearDown() {
	'delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': testLibraryNameUnique])
}

WebUI.comment('Click an existing Library')
WebUI.click(findTestObject('Page_Libraries/btn_libraryName_relyOnName', ['libraryName': testLibraryNameUnique]))

WebUI.comment('Click Subjective on Question types')
WebUI.click(findTestObject('Page_Libraries/btn_questionType', ['type': 'subjective']))

WebUI.comment('Click Subjective need to update')
WebUI.click(findTestObject('Page_Libraries/btn_questionList', ['order': 1]))

WebUI.comment('Verify dialog Update Subjective Question is displayed')
WebUI.waitForElementPresent(findTestObject('Page_Libraries/Question_Dialog/dialog_UpdateQuestion'), 10)

WebUI.comment('Enter invalid values')
if (true) {
	statement = WebUI.getText(findTestObject('Page_Libraries/txt_QuestionStatement', ['order': 1]))
	
	difficulty = WebUI.getText(findTestObject('Page_Libraries/txt_QuestionDifficulty', ['order': 1]))
	
	WebUI.clearText(findTestObject('Page_Libraries/Question_Dialog/txt_ProblemUpdate'), FailureHandling.STOP_ON_FAILURE)
	
	WebUI.clearText(findTestObject('Page_Libraries/Question_Dialog/txt_SuggestedAnswerUpdate'), FailureHandling.STOP_ON_FAILURE)
	
	WebUI.clearText(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), FailureHandling.STOP_ON_FAILURE)
}

WebUI.comment('Click Submit')
WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_Submit'))

WebUI.comment('Verify error message is displayed')
if (true) {
	WebUI.verifyElementText(findTestObject('Page_Libraries/Question_Dialog/txt_InvalidStatement'), 'This field is required.')
	//inbug- block temporary
	//WebUI.verifyElementText(findTestObject('Page_Libraries/Question_Dialog/txt_InvalidSugestedAnswer'), 'This field is required.')
}

WebUI.comment('Click Cancel')
WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_Cancel'))

WebUI.comment('Verify MCQ is updated unsuccessfully, disregard changes, redirect to Questions listing page of that question type.')
if (true) {
	WebUI.verifyElementText(findTestObject('Page_Libraries/txt_QuestionDifficulty', ['order': 1]), difficulty)
	
	WebUI.verifyElementText(findTestObject('Page_Libraries/txt_QuestionStatement', ['order': 1]), statement)
}"
28,Update questions added in a library,TC029,TC029_Verify update Programming question successfully_P1,Verify login successfully with valid credentials,"Pre-conditions:
 
- There is at least 1 Library on the system.
- There is at least 1 Programming question in the Library
- User logged in to the OnTest site.

Steps:
1. Click on Libraries link on Left Menu.
2. Click on a Library Name.
3. Click on the Programming option under the Question Types section.
4. Click on the Programming question in the list.
5. Update the Problem Statement value.
6. Update the Suggested Answer value.
7. Update the Difficulty Level.
8. Update or add the tag value.
9. Click on Submit button.

Expected result:
- The Programming question is updated with new information.
- Successful message displays as “Update question successfully”.
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.Keys

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String testLibraryNameUnique = testLibraryName + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@SetUp()
def setUp( ) {
	WebUI.comment('Given I am logged in and there is at least ONE libraries,')
	
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Libraries on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
	
	'create Testing Programming Question.'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Programming'), ['libraryName': testLibraryNameUnique])
}

@TearDown()
def tearDown() {
	'delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': testLibraryNameUnique])
}

WebUI.comment('Click an existing Library')
WebUI.click(findTestObject('Page_Libraries/btn_libraryName_relyOnName', ['libraryName': testLibraryNameUnique]))

WebUI.comment('Click Programming on Question types')
WebUI.click(findTestObject('Page_Libraries/btn_questionType', ['type': 'programming']))

WebUI.comment('Click Programming question need to update')
WebUI.click(findTestObject('Page_Libraries/btn_questionList', ['order': 1]))

WebUI.comment('Verify dialog Update Programming is displayed')
WebUI.waitForElementPresent(findTestObject('Page_Libraries/Question_Dialog/dialog_UpdateQuestion'), 10)

WebUI.comment('Enter valid values')
if (true) {
	WebUI.clearText(findTestObject('Page_Libraries/Question_Dialog/txt_ProblemUpdate'))
	
	WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_ProblemUpdate'), 'test')
	
	WebUI.clearText(findTestObject('Page_Libraries/Question_Dialog/txt_SuggestedAnswerUpdate'))
	
	WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_SuggestedAnswerUpdate'), 'test')
	
	WebUI.selectOptionByValue(findTestObject('Page_Libraries/Question_Dialog/slt_DifficultyLevel'), 'Medium', false)
	
	WebUI.setText(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), 'newTag')
	
	WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), Keys.chord(Keys.ENTER))
}

WebUI.comment('Click Submit')
WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_Submit'))

WebUI.comment('Verify Programming is updated successfully, save changes, show a successful message and redirect to Questions listing page of that question type.')
if (true) {
	WebUI.waitForElementPresent(findTestObject('Page_Libraries/txt_SuccessfullMessage'), 10)
	
	WebUI.verifyElementText(findTestObject('Page_Libraries/txt_SuccessfullMessage'), 'Update question successfully.')
	
	WebUI.verifyElementText(findTestObject('Page_Libraries/txt_QuestionStatement', ['order': 1]), 'test')
	
	WebUI.verifyElementText(findTestObject('Page_Libraries/txt_QuestionDifficulty', ['order': 1]), 'Medium')
}"
29,Update questions added in a library,TC030,TC030_Verify update File Upload question successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- There is at least one librabry available on the system
- There is at least 1 File Upload Question is added to above librabry with
 + Problem Statement = ""Problem""
 + Tags = tag2, tag1
 + Suggest Answer = ""Suggest""
 + Difficult level = ""Medium""
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Libraries
2. Select testing lib from the list on the left 
3. Click on 1 File Upload question on the right side
4. On Update Subjective dialog, update Problem Statement with ""Problem Update""
5. Update suggest answer with ""Suggest Updated""
6. Change Difficult Level to Easy
7. Click button [Submit]

Expected result
- Toast message displays at the bottom right corner ""Update question successfully""
- Problem statement is updated ""Problem Updated""
- Suggest answer is updated ""Suggest Updated""",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.Keys

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String testLibraryNameUnique = testLibraryName + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@SetUp()
def setUp( ) {
	WebUI.comment('Given I am logged in and there is at least ONE libraries,')
	
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Libraries on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
	
	'create Testing File Upload Question.'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New File Upload'), ['libraryName': testLibraryNameUnique])
}

@TearDown()
def tearDown() {
	'delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': testLibraryNameUnique])
}

WebUI.comment('Click an existing Library')
WebUI.click(findTestObject('Page_Libraries/btn_libraryName_relyOnName', ['libraryName': testLibraryNameUnique]))

WebUI.comment('Click File Upload on Question types')
WebUI.click(findTestObject('Page_Libraries/btn_questionType', ['type': 'file']))

WebUI.comment('Click File Upload question need to update')
WebUI.click(findTestObject('Page_Libraries/btn_questionList', ['order': 1]))

WebUI.comment('Verify dialog Update File Upload is displayed')
WebUI.waitForElementPresent(findTestObject('Page_Libraries/Question_Dialog/dialog_UpdateQuestion'), 10)

WebUI.comment('Enter valid values')
if (true) {
	WebUI.clearText(findTestObject('Page_Libraries/Question_Dialog/txt_ProblemUpdate'))
	
	WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_ProblemUpdate'), 'test')
	
	WebUI.clearText(findTestObject('Page_Libraries/Question_Dialog/txt_SuggestedAnswerUpdate'))
	
	WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_SuggestedAnswerUpdate'), 'test')
	
	WebUI.selectOptionByValue(findTestObject('Page_Libraries/Question_Dialog/slt_DifficultyLevel'), 'Medium', false)
	
	WebUI.setText(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), 'newTag')
	
	WebUI.sendKeys(findTestObject('Page_Libraries/Question_Dialog/tbx_Tags'), Keys.chord(Keys.ENTER))
}

WebUI.comment('Click Submit')
WebUI.click(findTestObject('Page_Libraries/Question_Dialog/btn_Submit'))

WebUI.comment('Verify File Upload is updated successfully, save changes, show a successful message and redirect to Questions listing page of that question type.')
if (true) {
	WebUI.waitForElementPresent(findTestObject('Page_Libraries/txt_SuccessfullMessage'), 10)
	
	WebUI.verifyElementText(findTestObject('Page_Libraries/txt_SuccessfullMessage'), 'Update question successfully.')
	
	WebUI.verifyElementText(findTestObject('Page_Libraries/txt_QuestionStatement', ['order': 1]), 'test')
	
	WebUI.verifyElementText(findTestObject('Page_Libraries/txt_QuestionDifficulty', ['order': 1]), 'Medium')
}"
30,Delete questions from a library,TC031,TC031_Verify delete MCQ question successfully_P1,Verify login successfully with valid credentials,"Pre-conditions:

- There is at least 1 Library on the system.
- There is at least 1 MCQ question in the Library
- User logged in to the OnTest site.

Steps:
1. Click on Libraries link on Left Menu.
2. Click on a Library Name.
3. Click on the Multiple Choice option under the Question Types section.
4. Click on the Trash icon in the MCQ question row.
5. Click on OK button on Warning dialog to confirm.

Expected result:
- The MCQ question is deleted from the MCQ questions list.
- Successful message displays as “Delete question successfully”.",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import org.openqa.selenium.Keys as Keys

WebUI.comment('Story: [ON] As a Recruiter, I want to delete questions from a library')

def LibName = 'Test lib' + System.currentTimeMillis()

'Set up'
if (true) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'When I click Libraries on the menu'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	'Add 1 MCQ'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Library/Create New Subjective'), ['libraryName': LibName])
}

WebUI.waitForPageLoad(10)
'On MCQ need to delete: Click delete icon'
WebUI.click(findTestObject(""Object Repository/Page_Libraries/btn_DeleteQuestion"", ['order': 1]))
'Verify confirmation popup is displayed'
WebUI.verifyElementPresent(findTestObject(""Object Repository/Page_TestQuestions/dialog_Dialog""), 30)
'Click Confirm'
WebUI.click(findTestObject(""Object Repository/Page_TestQuestions/btn_ConfirmDialog_Submit""))
'Verify confirmation popup is closed'
WebUI.verifyElementNotPresent(findTestObject(""Object Repository/Page_TestQuestions/dialog_Dialog""), 0)

'Verify delete question successfully'
WebUI.waitForPageLoad(10)
WebUI.takeScreenshotAsCheckpoint(""Delete Multiple Choice Question"")
WebUI.verifyTextPresent(""Delete question successfully."", false, FailureHandling.STOP_ON_FAILURE)

'Tear down'
if (true){
	'Delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': LibName])
}
"
31,Delete questions from a library,TC032,TC032_Verify delete MCQ question unsuccessfully when user click Cancel button_P2,Verify login successfully with valid credentials,"Pre-condition
- There is at least one librabry available on the system
- There is at least 1 Multiple Choice Question is added to above librabry with
 + Problem Statement = ""Problem""
 + Tags = tag2, tag1
 + Multiple choice: Option 1, Option 2, Option3, Option 4
 + Difficult level = ""Medium""
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Libraries
2. Select testing lib from the list on the left 
3. Click on trash icon of testing MCQ question
4. On Warning dialog, click button [Cancel]

Expected result
- Toast message ""Delete question successfully"" does not appear at the bottom right corner",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import org.openqa.selenium.Keys as Keys
WebUI.comment('Story: [ON] As a Recruiter, I want to delete questions from a library')

def LibName = 'Test lib' + System.currentTimeMillis()

'Set up'
if (true) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'When I click Libraries on the menu'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	'Add 1 MCQ'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New MCQ'), ['libraryName': LibName])
}

WebUI.waitForPageLoad(10)
'On MCQ need to delete: Click delete icon'
WebUI.click(findTestObject(""Object Repository/Page_Libraries/btn_DeleteQuestion"", ['order': 1]))
'Verify confirmation popup is displayed'
WebUI.verifyElementPresent(findTestObject(""Object Repository/Page_TestQuestions/dialog_Dialog""), 30)
'Click Cancel'
WebUI.click(findTestObject(""Object Repository/Page_TestQuestions/btn_ConfirmDialog_Cancel""))
'Verify confirmation popup is closed'
WebUI.verifyElementNotPresent(findTestObject(""Object Repository/Page_TestQuestions/dialog_Dialog""), 0)

'Verify delete question unsuccessfully'
WebUI.waitForPageLoad(10)
WebUI.takeScreenshotAsCheckpoint(""Delete Multiple Choice Question"")
WebUI.verifyTextNotPresent(""Delete question successfully."", false, FailureHandling.STOP_ON_FAILURE)

'Tear down'
if (true) {
	'Delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': LibName])
}"
32,Delete questions from a library,TC033,TC033_Verify delete Subjective Question successfully_P1,Verify login successfully with valid credentials,"Pre-conditions:

- There is at least 1 Library on the system.
- There is at least 1 Subjective question in the Library
- User logged in to the OnTest site.

Steps:
1. Click on Libraries link on Left Menu.
2. Click on a Library Name.
3. Click on the Subjective option under the Question Types section.
4. Click on the Trash icon in the Subjective question row.
5. Click on OK button on Warning dialog to confirm.

Expected result:
- The Subjective question is deleted from the Subjective questions list.
- Successful message displays as “Delete question successfully”.""",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import org.openqa.selenium.Keys as Keys

WebUI.comment('Story: [ON] As a Recruiter, I want to delete questions from a library')

def LibName = 'Test lib' + System.currentTimeMillis()

'Set up'
if (true) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'When I click Libraries on the menu'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	'Add subjective question'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Create New Subjective'), ['libraryName': LibName])
}

WebUI.waitForPageLoad(10)
'On MCQ need to delete: Click delete icon'
WebUI.click(findTestObject(""Object Repository/Page_Libraries/btn_DeleteQuestion"", ['order': 1]))
'Verify confirmation popup is displayed'
WebUI.verifyElementPresent(findTestObject(""Object Repository/Page_TestQuestions/dialog_Dialog""), 30)
'Click Confirm'
WebUI.click(findTestObject(""Object Repository/Page_TestQuestions/btn_ConfirmDialog_Submit""))
'Verify confirmation popup is closed'
WebUI.verifyElementNotPresent(findTestObject(""Object Repository/Page_TestQuestions/dialog_Dialog""), 0)

'Verify delete question successfully'
WebUI.waitForPageLoad(10)
WebUI.takeScreenshotAsCheckpoint(""Delete Subjective Question"")
WebUI.verifyTextPresent(""Delete question successfully."", false, FailureHandling.STOP_ON_FAILURE)

'Tear down'
if (true) {
	'Delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': LibName])
}
"
33,Delete questions from a library,TC034,TC034_Verify delete Subjective unsuccessfully when user click Cancel button_P4,There is at least one library and Subjective question > Delete Subjective > Click Cancel,,P4,Yes,
34,Delete questions from a library,TC035,TC035_Verify delete Programming Question successfully_P2,Verify login successfully with valid credentials,"Pre-condition
- There is at least one librabry available on the system
- There is at least 1 Programing Question is added to above librabry with
 + Problem Statement = ""Problem""
 + Tags = tag2, tag1
 + Suggest Answer = ""Suggest""
 + Difficult level = ""Medium""
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Libraries
2. Select testing lib from the list on the left 
3. Click on trash icon on testing Programming Question
4. On Warning dialog, click button [OK]

Expected result
- Toast message ""Delete question successfully."" displays on the bottom right corner
- Testing Programing question is deleted successfully from testing lib",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import org.openqa.selenium.Keys as Keys

WebUI.comment('Story: [ON] As a Recruiter, I want to delete questions from a library')

def LibName = 'Test lib' + System.currentTimeMillis()

'Set up'
if (true) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'When I click Libraries on the menu'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	'Add MCQ question'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Library/Create New Programming'), ['libraryName': LibName])
}

WebUI.waitForPageLoad(10)
'On MCQ need to delete: Click delete icon'
WebUI.click(findTestObject(""Object Repository/Page_Libraries/btn_DeleteQuestion"", ['order': 1]))
'Verify confirmation popup is displayed'
WebUI.verifyElementPresent(findTestObject(""Object Repository/Page_TestQuestions/dialog_Dialog""), 30)
'Click Confirm'
WebUI.click(findTestObject(""Object Repository/Page_TestQuestions/btn_ConfirmDialog_Submit""))
'Verify confirmation popup is closed'
WebUI.verifyElementNotPresent(findTestObject(""Object Repository/Page_TestQuestions/dialog_Dialog""), 0)

'Verify delete question successfully'
WebUI.waitForPageLoad(10)
WebUI.takeScreenshotAsCheckpoint(""Delete Subjective Question"")
WebUI.verifyTextPresent(""Delete question successfully."", false, FailureHandling.STOP_ON_FAILURE)

'Tear down'
if (true) {
	'Delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': LibName])
}
"
35,Delete questions from a library,TC036,TC036_Verify delete File Upload Question successfully_P2,Verify login successfully with valid credentials,"Pre-conditions:

- There is at least 1 Library on the system.
- There is at least 1 File Upload question in the Library
- User logged in to the OnTest site.

Steps:
1. Click on Libraries link on Left Menu.
2. Click on a Library Name.
3. Click on the File Upload option under the Question Types section.
4. Click on the Trash icon in the Subjective question row.
5. Click on OK button on Warning dialog to confirm.

Expected result:
- The File Upload question is deleted from the File Upload questions list.
- Successful message displays as “Delete question successfully”.""",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import org.openqa.selenium.Keys as Keys

WebUI.comment('Story: [ON] As a Recruiter, I want to delete questions from a library')

def LibName = 'Test lib' + System.currentTimeMillis()

'Set up'
if (true) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'When I click Libraries on the menu'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	'Add MCQ question'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Library/Create New File Upload'), ['libraryName': LibName])
}

WebUI.waitForPageLoad(10)
'On MCQ need to delete: Click delete icon'
WebUI.click(findTestObject(""Object Repository/Page_Libraries/btn_DeleteQuestion"", ['order': 1]))
'Verify confirmation popup is displayed'
WebUI.verifyElementPresent(findTestObject(""Object Repository/Page_TestQuestions/dialog_Dialog""), 30)
'Click Confirm'
WebUI.click(findTestObject(""Object Repository/Page_TestQuestions/btn_ConfirmDialog_Submit""))
'Verify confirmation popup is closed'
WebUI.verifyElementNotPresent(findTestObject(""Object Repository/Page_TestQuestions/dialog_Dialog""), 0)

'Verify delete question successfully'
WebUI.waitForPageLoad(10)
WebUI.takeScreenshotAsCheckpoint(""Delete Subjective Question"")
WebUI.verifyTextPresent(""Delete question successfully."", false, FailureHandling.STOP_ON_FAILURE)

'Tear down'
if (true) {
	'Delete the test libary'
	WebUI.callTestCase(findTestCase('Common Test Cases/Library/Tear Down Test Library'), ['libraryName': LibName])
}
"
36,Create tests,TC037,TC037_Verify Success Create Test In Empty Page_P4,There are no tests yet > Create Test > Verify successfully,,P4,Yes,
37,Create tests,TC038,TC038_Verify Create Test successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test] on the right side

Expected result
- Toast message ""Create test successfully."" displays on the bottom right corner
- Test name is created and displays on top of the test",P1,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys
import org.junit.After
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.webui.driver.DriverFactory


WebUI.comment('Story: [ON] As a Recruiter, I want to create tests.')

@SetUp()
def setUp() {
	WebUI.comment('Given I am logged in and there are no libraries yet,')
	
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Tests on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	

	'Make sure there is at least a draft test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(emptyXpath)).size()
	
	if(empty != 0){
	 WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
		WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Add Test'), null)
	}
		
}

@TearDown()
def teardown() {
	'delete the test after done'
	def testName = WebUI.getText(findTestObject('Object Repository/Page_AddTest/txt_TestName'))
	def testId = WebUI.getText(findTestObject('Object Repository/Page_AddTest/txt_testID'))
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': testName,'name':testId,""testStatus"":testStatus])
}
WebUI.comment('Click Tests on the menu')
WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))

WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))

WebUI.comment('Then there is a successful message and tests have been created. Redirect to update test page')
if (true) {
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_AddTest/successToast'), 20, FailureHandling.CONTINUE_ON_FAILURE)
	def message = WebUI.getText(findTestObject('Object Repository/Page_AddTest/successToast'), FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyMatch(message, successMessage, false)
	WebUI.verifyElementVisible(findTestObject('Object Repository/Page_AddTest/txt_TestName'), FailureHandling.STOP_ON_FAILURE)
}

WebUI.takeScreenshotAsCheckpoint(""Create Draft Test"")"
38,Search tests,TC039,TC039_Verify Search Test With Criteria function_P1,Verify login successfully with valid credentials,"Pre-condition:
- User logged in to the OnTest site.
- There are some tests with Ongoing status in the system.
- There are some tests with Completed status in the system.
- There are some tests with Draft status in the system.

Steps:
1. Click on Tests link on Left Menu.
2. Click on Ongoing option below Tests section.
3. Input Search key to the Search field.
4. Click on Search icon on the Search field to get the result.
5. Repeat above steps with other status: Completed, Draft.

Expected result:
- The number of result displays below the Search field.
- List of Tests are matched with Search key display on the page.
- The filter query is applied for all Test Status.
- The Count Tests numbers will be updated for all Test Status.
",P1,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys
import com.database.Database as DB
import org.openqa.selenium.WebElement as WebElement
import org.openqa.selenium.By as By
import org.openqa.selenium.WebDriver as WebDriver
import com.kms.katalon.core.webui.driver.DriverFactory as DriverFactory
import com.kms.katalon.core.util.KeywordUtil as KeyworUtil
import groovy.transform.Field
import generator.DynamicGenerator
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import org.openqa.selenium.JavascriptExecutor

@Field String randomString = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp()
setup(){
	WebDriver driver = DriverFactory.getWebDriver()
	'Login'
	WebUI.comment('Precondition: User already logged in')

	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'), [('Email') : GlobalVariable.G_Email, ('Password') : GlobalVariable.G_Password],
		FailureHandling.STOP_ON_FAILURE)
	'create list of test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Insert Test To DB'), ['testData':testData,'randomString':randomString])
	'Connect to database'
	WebUI.comment('Connect to database')
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
	GlobalVariable.G_DB_PASSWORD)
	
	""click on Tests sidebar""
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
}
@TearDown()
def tearDown() {
	'Delete all test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Tests By Key'), ['key':randomString])
	'Close database connection'
	DB.close()
}
""Input search key and press enter to search""
WebUI.click(findTestObject('Object Repository/Page_SearchTests/txt_search'))
WebUI.setText(findTestObject('Object Repository/Page_SearchTests/txt_search'),randomString+'_'+searchKey)
WebUI.sendKeys(findTestObject('Object Repository/Page_SearchTests/txt_search'), Keys.chord(Keys.ENTER))
WebUI.delay(30)
""View and compare result""
def status = [""Ongoing"",""Completed"",""Draft""]
def countStatus = countAllByStatus()
for (int j = 0; j<status.size;j++) {
	""Verify count of test by status""
	def statusNavMessage = WebUI.getText(findTestObject('Object Repository/Page_SearchTests/nav_testStatus',[""order"":j+1]))
	WebUI.click(findTestObject('Object Repository/Page_SearchTests/nav_testStatus',[""order"":j+1]))
	def index = countStatus.findIndexOf {it-> it.get(0) == status[j] }
	def numberOfTests = index!=-1 ? countStatus[index].get(1) : '0'
	WebUI.verifyEqual(statusNavMessage, ""${status[j]} (${numberOfTests})"")
	def testIds = findTestByStatus(status[j])
	
	'Verify every test which query from db with UI'
	def testElements = WebUI.findWebElements(findTestObject('Object Repository/Page_SearchTests/cpn_tests'), 5)
	try {
		for (int i = 0; i < testIds.size(); i++) {
			try {
				if (!(testElements.get(i).getAttribute('id').trim().equals(testIds.get(i).get(0).toString()))) {
					KeyworUtil.markFailed('Test\'s id is not matched')
				}
				'Verify option of test'
				//WebUI.click(findTestObject('Object Repository/Page_SearchTests/toggle_more',[""id"":testElements.get(i).getAttribute('id')]))
				def toggleElements = findTestObject('Object Repository/Page_SearchTests/toggle_more',[""id"":testElements.get(i).getAttribute('id')])
				
				WebUI.waitForElementPresent(toggleElements, 10, FailureHandling.STOP_ON_FAILURE)
				WebUI.scrollToElement(toggleElements, 30, FailureHandling.STOP_ON_FAILURE)
				WebDriver driver = DriverFactory.getWebDriver()
				WebElement element = WebUiCommonHelper.findWebElement(toggleElements, 5)
				JavascriptExecutor executor = ((driver) as JavascriptExecutor)
				executor.executeScript('arguments[0].click()', element)
				switch (status[j]) {
					case ""Ongoing"": 
						def firstElem = WebUI.getText(findTestObject('Object Repository/Page_SearchTests/txt_dropdown_menu',
							[""id"":testElements.get(i).getAttribute('id'), 'order':1]))
						WebUI.verifyEqual(firstElem, ""Complete test"")
						def secondElem = WebUI.getText(findTestObject('Object Repository/Page_SearchTests/txt_dropdown_menu',
							[""id"":testElements.get(i).getAttribute('id'), 'order':2]))
						WebUI.verifyEqual(secondElem, ""Clone test"")
							break
					case ""Completed"":
						def firstElem = WebUI.getText(findTestObject('Object Repository/Page_SearchTests/txt_dropdown_menu',
							[""id"":testElements.get(i).getAttribute('id'), 'order':1]))
						WebUI.verifyEqual(firstElem, ""Clone test"")
							break
					case ""Draft"":
						def firstElem = WebUI.getText(findTestObject('Object Repository/Page_SearchTests/txt_dropdown_menu',
							[""id"":testElements.get(i).getAttribute('id'), 'order':1]))
						WebUI.verifyEqual(firstElem, ""Delete test"")
						def secondElem = WebUI.getText(findTestObject('Object Repository/Page_SearchTests/txt_dropdown_menu',
							[""id"":testElements.get(i).getAttribute('id'), 'order':2]))
						WebUI.verifyEqual(secondElem, ""Clone test"")
							break
				}
				
				
			}
			catch (Exception ex) {
				ex.printStackTrace()
				KeyworUtil.markFailed('Tests are not matched')
			}
		}
	}
	catch (Exception ex) {
	    if (testIds.size() != 0) {
	        KeyworUtil.markFailed('Tests are not matched')
	    }
} 
		
}

def findTestByStatus(status) {
	def query = ""SELECT t.id FROM test t WHERE t.status='"" + status +""'""+ 
	""and (to_tsvector( t.name || ' ' || t.description || ' ' || array_to_string(t.tags, ' ')) @@ to_tsquery('""+randomString+'_'+searchKey+""')""+
	""or LOWER(t.name) like LOWER('%""+randomString+'_'+searchKey+""%' ));""
	def result = DB.execute(query)
	return result
}
def countAllByStatus() {
	def query = ""SELECT t.status, count(t.id)::int FROM test t ""+
	"" where to_tsvector( t.name || ' ' || t.description || ' ' || array_to_string(t.tags, ' ')) @@ to_tsquery('""+randomString+'_'+searchKey+""')""+
	"" or LOWER(t.name) like LOWER('%""+randomString+'_'+searchKey+""%' ) group by(t.status);""
	def result = DB.execute(query)
	return result
}"
39,Search tests,TC040,TC040_Verify Search All Tests function_P2,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)
- There are 50 Tests have been added with status ""Draft""
- There are 100 Tests have been added with status ""On-Going""
- There are 150 Tests have been added with status ""Completed""

Steps
1. From the navigation bar on the left site, click Tests
2. Verify tests with status ""Draft""
3. Verify tests with status ""On-Going""
4. Verify tests with status ""Completed""
5. Open test in each test status and verify details

Expected result
- Number of tests in each status group match Draft (50), On-Going (100), Completed (150)
- On each test status group, user can click 3 dots menu on the top right corner... to 
 * On-Going
 + Complete test
 + Clone test
 * Completed
 + Clone test
 * Draft
 + Delete test
 + Clone test",P2,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys
import com.database.Database as DB
import org.openqa.selenium.WebElement as WebElement
import org.openqa.selenium.By as By
import org.openqa.selenium.WebDriver as WebDriver
import com.kms.katalon.core.webui.driver.DriverFactory as DriverFactory
import com.kms.katalon.core.util.KeywordUtil as KeyworUtil
import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import org.openqa.selenium.JavascriptExecutor

import groovy.transform.Field
import generator.DynamicGenerator
@Field String randomString = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@SetUp()
def setup(){
	WebDriver driver = DriverFactory.getWebDriver()
	'Login'
	WebUI.comment('Precondition: User already logged in')

	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'), [('Email') : GlobalVariable.G_Email, ('Password') : GlobalVariable.G_Password],
		FailureHandling.STOP_ON_FAILURE)
	'create list of tests'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Insert Test To DB'), ['testData':testData,'randomString':randomString])
//	'Connect to database'
	WebUI.comment('Connect to database')
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
	GlobalVariable.G_DB_PASSWORD)
	
	""click on Tests sidebar""
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
}
@TearDown()
def tearDown() {
	'Delete all test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Tests By Key'), ['key':randomString])
	'Close database connection'
	DB.close()
}

""View and compare result""
def status = [""Ongoing"",""Completed"",""Draft""]
def countStatus = countAllByStatus()
for (int j = 0; j<status.size;j++) {
	""Verify count of test by status""
	def statusNavMessage = WebUI.getText(findTestObject('Object Repository/Page_SearchTests/nav_testStatus',[""order"":j+1]))
	
	def statusNavElement = findTestObject('Object Repository/Page_SearchTests/nav_testStatus',[""order"":j+1])
	
	WebUI.waitForElementPresent(statusNavElement, 10, FailureHandling.STOP_ON_FAILURE)
	WebUI.scrollToElement(statusNavElement, 30, FailureHandling.STOP_ON_FAILURE)
	try {
		WebUI.click(statusNavElement, FailureHandling.STOP_ON_FAILURE)
	}
	catch (Exception e) {
		WebDriver driver = DriverFactory.getWebDriver()
		WebElement element = WebUiCommonHelper.findWebElement(statusNavElement, 5)
		JavascriptExecutor executor = ((driver) as JavascriptExecutor)
		executor.executeScript('arguments[0].click()', element)
	}
	def index = countStatus.findIndexOf {it-> it.get(0) == status[j] }
	def numberOfTests = index!=-1 ? countStatus[index].get(1) : '0'
	WebUI.verifyEqual(statusNavMessage, ""${status[j]} (${numberOfTests})"")
	def testIds = findTestByStatus(status[j])
	
	'Verify every test which query from db with UI'
	def testElements = WebUI.findWebElements(findTestObject('Object Repository/Page_SearchTests/cpn_tests'), 5)
	try {
		for (int i = 0; i < testIds.size(); i++) {
			try {
				if(i>99) {
					testElements = WebUI.findWebElements(findTestObject('Object Repository/Page_SearchTests/cpn_tests'), 5)
				}
				if (!(testElements.get(i).getAttribute('id').trim().equals(testIds.get(i).get(0).toString()))) {
					KeyworUtil.markFailed('Test\'s id is not matched')
				}
				'Verify option of test'
				def toggleElements = findTestObject('Object Repository/Page_SearchTests/toggle_more',[""id"":testElements.get(i).getAttribute('id')])
				
				WebUI.waitForElementPresent(toggleElements, 60, FailureHandling.STOP_ON_FAILURE)
				WebUI.scrollToElement(toggleElements, 30, FailureHandling.STOP_ON_FAILURE)
				try {
					WebDriver driver = DriverFactory.getWebDriver()
					WebElement element = WebUiCommonHelper.findWebElement(toggleElements, 5)
					JavascriptExecutor executor = ((driver) as JavascriptExecutor)
					executor.executeScript('arguments[0].click()', element)
				}
				catch (Exception e) {
					e.printStackTrace()
				}
//				WebUI.click(findTestObject('Object Repository/Page_SearchTests/toggle_more',[""id"":testElements.get(i).getAttribute('id')]))
				switch (status[j]) {
					case ""Ongoing"": 
						def firstElem = WebUI.getText(findTestObject('Object Repository/Page_SearchTests/txt_dropdown_menu',
							[""id"":testElements.get(i).getAttribute('id'), 'order':1]))
						WebUI.verifyEqual(firstElem, ""Complete test"")
						def secondElem = WebUI.getText(findTestObject('Object Repository/Page_SearchTests/txt_dropdown_menu',
							[""id"":testElements.get(i).getAttribute('id'), 'order':2]))
						WebUI.verifyEqual(secondElem, ""Clone test"")
							break
					case ""Completed"":
						def firstElem = WebUI.getText(findTestObject('Object Repository/Page_SearchTests/txt_dropdown_menu',
							[""id"":testElements.get(i).getAttribute('id'), 'order':1]))
						WebUI.verifyEqual(firstElem, ""Clone test"")
							break
					case ""Draft"":
						def firstElem = WebUI.getText(findTestObject('Object Repository/Page_SearchTests/txt_dropdown_menu',
							[""id"":testElements.get(i).getAttribute('id'), 'order':1]))
						WebUI.verifyEqual(firstElem, ""Delete test"")
						def secondElem = WebUI.getText(findTestObject('Object Repository/Page_SearchTests/txt_dropdown_menu',
							[""id"":testElements.get(i).getAttribute('id'), 'order':2]))
						WebUI.verifyEqual(secondElem, ""Clone test"")
							break
				}
				
				
			}
			catch (Exception ex) {
				ex.printStackTrace()
				KeyworUtil.markFailed('Tests are not matched')
			}
		}
	}
	catch (Exception ex) {
	    if (testIds.size() != 0) {
	        KeyworUtil.markFailed('Tests are not matched')
	    }
} 
		
}

def findTestByStatus(status) {
	def query = ""SELECT t.id FROM test t WHERE t.status='"" + status +""';""
	def result = DB.execute(query)
	return result
}
def countAllByStatus() {
	def query = ""SELECT t.status, count(t.id)::int FROM test t group by(t.status);""
	def result = DB.execute(query)
	return result
}"
40,Update draft tests,TC041,TC041_Verify successfully message when edit valid value_P1,Verify login successfully with valid credentials,"Pre-condition:
- User logged in to the OnTest site.
- There are some tests with Draft status in the system.
Steps:
1. Click on Tests link on Left Menu.
2. Click on Draft option below Tests section.
3. Click on a Test on the page.
4. Click on Edit icon next to the Test Name.
5. Update the Test Name with valid value.
6. Click Save button.
7. Click on Edit icon next to the Test Duration.
8. Update the Duration to a new value.
9. Click Save button.
10. Click on Edit icon next to the Test Type.
11. Select another option from the Test Type dropdown.
12. Click Save button.
13. Click on Edit icon next to the Test Link.
14. Update the Link to a new value.
15. Click Save button.
16. Click on Edit icon in the Tags section.
17. Update or add a tag with a valid value.
18. Click Save button.
19. Click on Edit icon next to the Test Description.
20. Update the Description with a valid value.
21. Click Save button.
22. Click on Edit icon next to the Test Instructions.
23. Update the Instruction with a valid value.
24. Click Save button.


Expected result: 
- User can update value successfully for all fields: Test Name, Test Duration, Test Type, Test Link, Tags, Test Description, Test Instructions.
- New values will be displayed to all above fields.
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import com.google.common.collect.FilteredEntryMultimap.Keys
import org.openqa.selenium.Keys as Keys
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

@SetUp()
def setUp() {
	def testNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	
	WebUI.comment('User must be logged in to the system successfully ')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'), null)
	
	WebUI.comment('There is at least one draft test')
	if (true) {
		WebUI.click(testNavItem)
		WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Add Test'), null)
	}
}

@TearDown()
def tearDown() {
	def OptionDropdownButton = findTestObject('Object Repository/Page_TestOverview/btn_OptionDropdown')
	def ConfirmButtonDeleteTest = findTestObject('Object Repository/Page_TestOverview/btn_Confirm_Delete_Test')
	
	WebUI.comment('Delete the draft test which has just been used to test.')
	if (true) {
		WebUI.scrollToElement(OptionDropdownButton, 3)
		WebUI.waitForElementVisible(OptionDropdownButton, 3)
		WebUI.click(OptionDropdownButton)
		WebUI.waitForElementVisible(findTestObject('Object Repository/Page_TestOverview/btn_Option', ['optionName': 'Delete test']), 3)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Option', ['optionName': 'Delete test']))
		WebUI.waitForElementVisible(ConfirmButtonDeleteTest, 3)
		WebUI.click(ConfirmButtonDeleteTest)
	}
}

def switchTestAccessibleDisable = findTestObject('Object Repository/Page_TestOverview/switch_TestAccessible_Disable')
def practiseTestNotAvailabeMessage = findTestObject('Object Repository/Page_TestOverview/msg_PracticeTestLinkNotAvaliable')

WebUI.comment('Verify fields are not edited')
if (true) {
	WebUI.comment('Text Access')
	WebUI.verifyElementVisible(switchTestAccessibleDisable, FailureHandling.CONTINUE_ON_FAILURE)
	
	WebUI.comment('Practice Test Link')
	WebUI.verifyElementVisible(practiseTestNotAvailabeMessage, FailureHandling.CONTINUE_ON_FAILURE)
}

def templateInstruction

WebUI.comment('Click on the fields and update valid values')
if (true) {
	WebUI.comment('Edit Test Name')
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'name']), 3, , FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'name']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.setText(findTestObject('Object Repository/Page_TestOverview/input_TextOrNumberField', ['fieldName': 'name']), testName, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Save', ['fieldName': 'name']), FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Edit Test Duration')
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'duration']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'duration']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.setText(findTestObject('Object Repository/Page_TestOverview/input_TextOrNumberField', ['fieldName': 'duration']), testDuration, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Save', ['fieldName': 'duration']), FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Edit Test Type')
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'type']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'type']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.selectOptionByValue(findTestObject('Object Repository/Page_TestOverview/input_TextOrNumberField', ['fieldName': 'type']), testType, false, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Save', ['fieldName': 'type']), FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Edit Test Link')
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'testLink']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'testLink']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.setText(findTestObject('Object Repository/Page_TestOverview/input_TextOrNumberField', ['fieldName': 'testLink']), testLink, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Save', ['fieldName': 'testLink']), FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Edit Tags')
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'tags']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'tags']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.setText(findTestObject('Object Repository/Page_TestOverview/input_TestTags'), testTag, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.sendKeys(findTestObject('Object Repository/Page_TestOverview/input_TestTags'), Keys.chord(Keys.ENTER), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Save', ['fieldName': 'tags']), FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Edit Test Description')
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/icon_EditRichText', ['fieldName': 'TEST DESCRIPTION']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/icon_EditRichText', ['fieldName': 'TEST DESCRIPTION']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.sendKeys(findTestObject('Object Repository/Page_TestOverview/input_RichText', ['fieldName': 'description']), testDescription, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Save', ['fieldName': 'description']), FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Edit Test Instruction')
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/icon_EditRichText', ['fieldName': 'TEST INSTRUCTIONS']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/icon_EditRichText', ['fieldName': 'TEST INSTRUCTIONS']), FailureHandling.CONTINUE_ON_FAILURE)
		templateInstruction = WebUI.getText(findTestObject('Object Repository/Page_TestOverview/input_RichText', ['fieldName': 'instructions']), FailureHandling.STOP_ON_FAILURE)
		WebUI.sendKeys(findTestObject('Object Repository/Page_TestOverview/input_RichText', ['fieldName': 'instructions']), testInstructions, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Save', ['fieldName': 'instructions']), FailureHandling.CONTINUE_ON_FAILURE)
	}
}

WebUI.comment('Verify the fields has been updated with the corresponding values.')
if (true) {
	WebUI.comment('Verify Test Name')
	if(true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'name']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementText(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'name']), testName, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Verify Test Duration')
	if(true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'duration']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementText(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'duration']), testDuration + "" min(s)"", FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Verify Test Type')
	if(true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'type']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementText(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'type']), testType, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Verify Test Link')
	if(true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'testLink']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementText(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'testLink']), testLink, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Verify Tags')
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_TheFirstTagInTagsField'), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementText(findTestObject('Object Repository/Page_TestOverview/span_TheFirstTagInTagsField'), testTag, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Verify Test Description')
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_ShowingTestDescription'), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementText(findTestObject('Object Repository/Page_TestOverview/span_ShowingTestDescription'), testDescription, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Verify Test Instruction')
	def matchInstruction = templateInstruction + testInstructions
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_ShowingTestInstructions'), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementText(findTestObject('Object Repository/Page_TestOverview/span_ShowingTestInstructions'), templateInstruction + testInstructions, FailureHandling.CONTINUE_ON_FAILURE)
	}
}"
41,Update draft tests,TC042,TC042_Verify error message display when edit invalid value_P2,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. On the test page, click pencil icon next to Test Name
4. Clear all text in Test Name
5. Click pencil icon next to Test Link
6. Clear all text in Test Link
7. Click pencil icon next to Test Description
8. Enter a long paragraph which is more than 255 characters
9. Click pencil icon next to Test Instructions
10. Enter a long paragrapt with is more than 1000 characters


Expected result
- Error messages display for
+ Test Name: ""This field is required.""
+ Test Link: ""This field is required.""
+ Test Description: ""TEST DESCRIPTION must be at most 255 characters.""
+ Test Instructions: ""TEST INSTRUCTIONS must be at most 1000 characters.""
- User cannot Save test
",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.Keys

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

@SetUp()
def setUp() {
	def testNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	
	WebUI.comment('User must be logged in to the system successfully ')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'), null)
	
	WebUI.comment('There is at least one draft test')
	if (true) {
		WebUI.click(testNavItem)
		WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Add Test'), null)
	}
}

@TearDown()
def tearDown() {
	def OptionDropdownButton = findTestObject('Object Repository/Page_TestOverview/btn_OptionDropdown')
	def ConfirmButtonDeleteTest = findTestObject('Object Repository/Page_TestOverview/btn_Confirm_Delete_Test')
	
	WebUI.comment('Delete the draft test which has just been used to test.')
	if (true) {
		WebUI.scrollToElement(OptionDropdownButton, 3)
		WebUI.waitForElementVisible(OptionDropdownButton, 3)
		WebUI.click(OptionDropdownButton)
		WebUI.waitForElementVisible(findTestObject('Object Repository/Page_TestOverview/btn_Option', ['optionName': 'Delete test']), 3)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Option', ['optionName': 'Delete test']))
		WebUI.waitForElementVisible(ConfirmButtonDeleteTest, 3)
		WebUI.click(ConfirmButtonDeleteTest)
		WebUI.delay(1)
	}
}

WebUI.comment('Click on the fields and update invalid values')
if (true) {
	WebUI.comment('Edit Test Name')
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'name']), 3, , FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'name']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.setText(findTestObject('Object Repository/Page_TestOverview/input_TextOrNumberField', ['fieldName': 'name']), invalidTestName, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Save', ['fieldName': 'name']), FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Edit Test Link')
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'testLink']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'testLink']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.setText(findTestObject('Object Repository/Page_TestOverview/input_TextOrNumberField', ['fieldName': 'testLink']), invalidTestLink, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Save', ['fieldName': 'testLink']), FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Edit Tags')
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'tags']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'tags']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.setText(findTestObject('Object Repository/Page_TestOverview/input_TestTags'), invalidTestTag, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.sendKeys(findTestObject('Object Repository/Page_TestOverview/input_TestTags'), Keys.chord(Keys.ENTER), FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Edit Test Description')
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/icon_EditRichText', ['fieldName': 'TEST DESCRIPTION']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/icon_EditRichText', ['fieldName': 'TEST DESCRIPTION']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.sendKeys(findTestObject('Object Repository/Page_TestOverview/input_RichText', ['fieldName': 'description']), invalidTestDescription, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Edit Test Instruction')
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/icon_EditRichText', ['fieldName': 'TEST INSTRUCTIONS']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/icon_EditRichText', ['fieldName': 'TEST INSTRUCTIONS']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.sendKeys(findTestObject('Object Repository/Page_TestOverview/input_RichText', ['fieldName': 'instructions']), invalidTestInstructions, FailureHandling.CONTINUE_ON_FAILURE)
	}
}

WebUI.comment('Verify error message is displayed')
if (true) {
	WebUI.comment('Verify Test Name')
	if(true) {
		WebUI.verifyElementVisible(findTestObject('Object Repository/Page_TestOverview/span_InvalidFeedbackMessage', ['fieldName': 'name']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_InvalidFeedbackMessage', ['fieldName': 'name']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementText(findTestObject('Object Repository/Page_TestOverview/span_InvalidFeedbackMessage', ['fieldName': 'name']), invalidTestNameMessage, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	
	WebUI.comment('Verify Test Link')
	if(true) {
		WebUI.verifyElementVisible(findTestObject('Object Repository/Page_TestOverview/span_InvalidFeedbackMessage', ['fieldName': 'testLink']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_InvalidFeedbackMessage', ['fieldName': 'testLink']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementText(findTestObject('Object Repository/Page_TestOverview/span_InvalidFeedbackMessage', ['fieldName': 'testLink']), invalidTestLinkMessage, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Verify Tags')
	if (true) {
		WebUI.verifyElementVisible(findTestObject('Object Repository/Page_TestOverview/span_InvalidFeedbackMessage', ['fieldName': 'tags']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_InvalidFeedbackMessage', ['fieldName': 'tags']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementText(findTestObject('Object Repository/Page_TestOverview/span_InvalidFeedbackMessage', ['fieldName': 'tags']), invalidTestTagMessage, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Verify Test Description')
	if (true) {
		WebUI.verifyElementVisible(findTestObject('Object Repository/Page_TestOverview/span_InvalidFeedbackMessage', ['fieldName': 'description']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_InvalidFeedbackMessage', ['fieldName': 'description']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementText(findTestObject('Object Repository/Page_TestOverview/span_InvalidFeedbackMessage', ['fieldName': 'description']), invalidTestDescriptionMessage, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Verify Test Instruction')
	if (true) {
		WebUI.verifyElementVisible(findTestObject('Object Repository/Page_TestOverview/span_InvalidFeedbackMessage', ['fieldName': 'instructions']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_InvalidFeedbackMessage', ['fieldName': 'instructions']), 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementText(findTestObject('Object Repository/Page_TestOverview/span_InvalidFeedbackMessage', ['fieldName': 'instructions']), invalidTestInstructionsMessage, FailureHandling.CONTINUE_ON_FAILURE)
	}
}"
42,Update draft tests,TC043,TC043_Verify Edit Setting function_P1,Verify login successfully with valid credentials,"Pre-condition:
- User logged in to the OnTest site.
- There is at least 1 Test with Draft status in the system.
- The Setting for snapshots is disabled in the Draft Test.

Steps:
1. Click on Tests link on Left Menu.
2. Click on Draft option below Tests section.
3. Click on a Test on the page.
4. Click on the toggle button in the Setting section.
5. Click on Cancel button to go back without any changes.
6. Click the toggle button in the Setting section again.
7. Click on OK button.

Expected result: The toggle is enabled successfully.",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

@SetUp()
def setUp() {
	WebUI.comment('User must be logged in to the system successfully ')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'), null)
	
	WebUI.comment('There is at least one draft test')
	if (true) {
		WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
		WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Add Test'), null)
	}
}

@TearDown()
def tearDown() {
	def OptionDropdownButton = findTestObject('Object Repository/Page_TestOverview/btn_OptionDropdown')
	def ConfirmButtonDeleteTest = findTestObject('Object Repository/Page_TestOverview/btn_Confirm_Delete_Test')
	
	WebUI.comment('Delete the draft test which has just been used to test.')
	if (true) {
		WebUI.scrollToElement(OptionDropdownButton, 3)
		WebUI.waitForElementVisible(OptionDropdownButton, 3)
		WebUI.click(OptionDropdownButton)
		WebUI.waitForElementVisible(findTestObject('Object Repository/Page_TestOverview/btn_Option', ['optionName': 'Delete test']), 3)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Option', ['optionName': 'Delete test']))
		WebUI.waitForElementVisible(ConfirmButtonDeleteTest, 3)
		WebUI.click(ConfirmButtonDeleteTest)
		WebUI.delay(1)
	}
}

WebUI.comment('Click enable')
if (true) {
	WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/input_SwitchSetting'), 3, FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/input_SwitchSetting'), FailureHandling.CONTINUE_ON_FAILURE)
}


WebUI.comment('Verify confirmation message show')
if (true) {
	WebUI.verifyElementVisible(findTestObject('Object Repository/Page_TestOverview/modal_Confirm'), FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyElementText(findTestObject('Object Repository/Page_TestOverview/span_ConfirmMessage'), confirmMessage, FailureHandling.CONTINUE_ON_FAILURE)
}


WebUI.comment('Click Cancel')
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_CancelConfirmModal'), FailureHandling.CONTINUE_ON_FAILURE)

WebUI.comment('Verify the setting for snapshots is disabled')
WebUI.verifyElementText(findTestObject('Object Repository/Page_TestOverview/label_StatusOfSetting'), 'Off', FailureHandling.STOP_ON_FAILURE)

WebUI.comment('Click OK')
if (true) {
	WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/input_SwitchSetting'), 3, FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/input_SwitchSetting'), FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Confirm'), FailureHandling.CONTINUE_ON_FAILURE)
}

WebUI.comment('Verify the setting for snapshots is enabled')
WebUI.delay(1)
WebUI.verifyElementText(findTestObject('Object Repository/Page_TestOverview/label_StatusOfSetting'), 'On', FailureHandling.STOP_ON_FAILURE)"
43,Delete tests,TC044,TC044_Verify Delete one Test successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one Draft test has been created in Tests
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click on tab Draft to see all Draft tests
3. Scroll down the page and look for draft test which is defined in pre-condition
4. Click on 3 dots menu on the draft test card
5. Select option ""Delete test""
6. On Delete test dialogue, click [OK]

Expected result
- Toast message ""Delete test successfully."" displays on the bottom right corner
- Deleted draft test dispears from the list
",P1,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows

import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys
import com.database.Database as DB
import org.openqa.selenium.WebElement as WebElement
import org.openqa.selenium.By as By
import org.openqa.selenium.WebDriver as WebDriver
import com.kms.katalon.core.webui.driver.DriverFactory as DriverFactory
import com.kms.katalon.core.util.KeywordUtil as KeyworUtil
import groovy.transform.Field
import generator.DynamicGenerator
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import org.openqa.selenium.JavascriptExecutor

@Field String randomString = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@SetUp()
def setUp() {
	'Login'
	WebDriver driver = DriverFactory.getWebDriver()
	WebUI.comment('Precondition: User already logged in')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'), [('Email') : GlobalVariable.G_Email, ('Password') : GlobalVariable.G_Password],
		FailureHandling.STOP_ON_FAILURE)
	'create list of test by delete all tests and add new once'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Insert Test To DB'), ['testData':testData,'randomString':randomString])
}
@TearDown()
def tearDown() {
}
""click on Tests sidebar""
WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
""Click on draft test""
WebUI.click(findTestObject('Object Repository/Page_SearchTests/nav_testStatus',[""order"":3]))

def testSpanElements = findTestObject('Object Repository/Page_SearchTests/txt_testName',['testName':randomString+""_""+testName])

WebUI.waitForElementPresent(testSpanElements, 30, FailureHandling.STOP_ON_FAILURE)
WebUI.scrollToElement(testSpanElements, 60, FailureHandling.STOP_ON_FAILURE)

WebDriver driver = DriverFactory.getWebDriver()
WebElement element = WebUiCommonHelper.findWebElement(testSpanElements, 5)
JavascriptExecutor executor = ((driver) as JavascriptExecutor)
executor.executeScript('arguments[0].click()', element)

""Click more""
WebUI.click(findTestObject('Object Repository/Page_SearchTests/cpn_more'))
""Click delete""
WebUI.click(findTestObject('Object Repository/Page_SearchTests/txt_toggle_option',['order':1]))
""Click OK""
WebUI.click(findTestObject('Page_SearchTests/btn_delete_dialog_ok'))

def message = WebUI.getText(findTestObject('Object Repository/Page_SearchTests/successToast'), FailureHandling.CONTINUE_ON_FAILURE)
WebUI.verifyMatch(message, successMessage, false)
WebUI.verifyElementVisible(findTestObject('Object Repository/Page_SearchTests/successToast'), FailureHandling.STOP_ON_FAILURE)
""Check if navigated to listing page by click on draft test""
WebUI.click(findTestObject('Object Repository/Page_SearchTests/nav_testStatus',[""order"":3]))
//WebUI.takeScreenshotAsCheckpoint(""Delete one test successfully"")

/*
Delete all Draft Test
def numOfTest = WebUI.findWebElements(findTestObject('Object Repository/Page_SearchTests/cpn_tests'), 5).size()
if (numOfTest != 0) {
		int i = 1;
		while (i <= numOfLibraries) {
		//cpn_more: //*[@id=""dropdown-button""]
			WebUI.click(findTestObject('Object Repository/Page_SearchTests/cpn_more'))
		//txt_toggle_option: //*[@id=""test-container""]//li[${order}]/a
			WebUI.click(findTestObject('Object Repository/Page_SearchTests/txt_toggle_option',['order':1]))
			WebUI.click(findTestObject('Page_SearchTests/btn_delete_dialog_ok'))
			i = i + 1
		}
	}
*/"
44,Delete tests,TC045,TC045_Verify Delete one Test unsucessfully when user click Cancel button_P3,Verify login successfully with valid credentials,"Pre-condition:
- User logged in to the OnTest site.
- There is at least 1 Test with Draft status in the system.

Steps:
1. Click on Tests link on Left Menu.
2. Click on Draft option below Tests section.
3. Click on 3 dots button at the end of a Test row on the page.
4. Select Delete Test option.
5. Click on Cancel button to go back without any changes.

Expected result: 
- The Test is not deleted.
- The Test still displays on the page
",P3,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys
import com.database.Database as DB
import org.openqa.selenium.WebElement as WebElement
import org.openqa.selenium.By as By
import org.openqa.selenium.WebDriver as WebDriver
import com.kms.katalon.core.webui.driver.DriverFactory as DriverFactory
import com.kms.katalon.core.util.KeywordUtil as KeyworUtil
import groovy.transform.Field
import generator.DynamicGenerator
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import org.openqa.selenium.JavascriptExecutor

@Field String randomString = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@SetUp()
def setUp() {
	WebDriver driver = DriverFactory.getWebDriver()
	'Login'
	WebUI.comment('Precondition: User already logged in')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'), [('Email') : GlobalVariable.G_Email, ('Password') : GlobalVariable.G_Password],
		FailureHandling.STOP_ON_FAILURE)
	'create list of test by delete all tests and add new once'
	//WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete All Tests'), null)
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Insert Test To DB'), ['testData':testData,'randomString':randomString])
}
@TearDown()
def tearDown() {
	'delete the test after done'
	def testName = WebUI.getText(findTestObject('Object Repository/Page_AddTest/txt_TestName'))
	def testId = WebUI.getText(findTestObject('Object Repository/Page_AddTest/txt_testID'))
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': testName,'name':testId])
}
""click on Tests sidebar""
WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
""Click on tab draft test""
WebUI.click(findTestObject('Object Repository/Page_SearchTests/nav_testStatus',[""order"":3]))
""Click on draft test name""
def testSpanElements = findTestObject('Object Repository/Page_SearchTests/txt_testName',['testName':randomString+""_""+testName])

WebUI.waitForElementPresent(testSpanElements, 10, FailureHandling.STOP_ON_FAILURE)
WebUI.scrollToElement(testSpanElements, 30, FailureHandling.STOP_ON_FAILURE)

WebDriver driver = DriverFactory.getWebDriver()
WebElement element = WebUiCommonHelper.findWebElement(testSpanElements, 5)
JavascriptExecutor executor = ((driver) as JavascriptExecutor)
executor.executeScript('arguments[0].click()', element)

""Click more""
WebUI.click(findTestObject('Object Repository/Page_SearchTests/cpn_more'))

""Click delete""
WebUI.click(findTestObject('Object Repository/Page_SearchTests/txt_toggle_option',['order':1]))

""Click cancel""
WebUI.click(findTestObject('Page_SearchTests/btn_delete_dialog_cancel'))

""Verify test modal is not present""
WebUI.verifyElementNotPresent(findTestObject('Object Repository/Page_SearchTests/cpn_test_modal'), 2)"
45,Delete tests,TC046,P046_Verify message display when user delete all tests,"There is more than one existing draft test > Delete all tests > Verify ""You have no tests yet."" is displayed",,P4,Yes,
46,Create new question to add to a test,TC047,TC047_Verify Add MCQ Questions to Test Successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. Select ""Questions"" on the left menu
4. Click button [Add new question] to open Add MCQ dialog
5. Fill in test data as below
 5.1 Problem Statement: ""Problem ABC""
 5.2 Suggest Answer: ""Problem ABC should be ABC""
 5.3 Choices: ""Single Choice""
 5.4 4 answers: 4, 3, 2, 1
 5.5 Correct answer (radio) 1
 5.6 Difficulty Level: Hard
 5.7 Awarded Score: 20
 5.8 Subtracted Score: 20
 5.9 Max time: 20
 5.10 Tags: 2, 1
6. Click [Add]


Expected result
- Message ""Add question successfully."" displays
- MCQ quetion is added to test successfully
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

WebUI.comment('[ON] As a Recruiter, I want to create new question to add to a test.')

@SetUp()
def setUp( ) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Test on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(emptyXpath)).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Click questions in the left sidebar'
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_AddTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['id': id])
}

'Click Add New Question button'
WebUI.click(findTestObject('Page_TestQuestions/btn_AddNewQuestion'))

'Verify if the Add New Question dialog is presented'
WebUI.verifyElementPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)

'Verify Question Type field: Default value: Multiple Choice'
WebUI.verifyOptionSelectedByValue(findTestObject('Object Repository/Page_TestQuestions/select_QuestionType'), 'Multiple Choice', false, 20)

WebUI.takeScreenshotAsCheckpoint(""Add New MCQ to Test"")

'Enter valid value'
if (true) {
	WebUI.click(findTestObject('Object Repository/Page_TestQuestions/wrapper_Ckeditor'))
	WebUI.sendKeys(findTestObject('Object Repository/Page_TestQuestions/ckedior_ProblemStatement'), ProblemStatement)
	
	WebUI.click(findTestObject('Object Repository/Page_TestQuestions/label_MultipleChoice',[('CHOOSE_TYPE'):ChooseType]))
	def answers = Answers
	
	List answerTextbox = WebUI.findWebElements(findTestObject('Object Repository/Page_TestQuestions/tbx_Answer'),30)
	
	int numberOfAnswers = answerTextbox.size()
	
	if (numberOfAnswers > 0) {
		for (int i = 0; i < numberOfAnswers; i++) {
			answerTextbox.get(i).sendKeys(answers[i])
		}
	}
	
	WebUI.click(findTestObject('Object Repository/Page_TestQuestions/cbx_rightAnswer'))
	WebUI.setText(findTestObject('Object Repository/Page_TestQuestions/tbx_MaxTime'), MaxTime)
	WebUI.selectOptionByValue(findTestObject('Object Repository/Page_TestQuestions/select_Difficulty'), Difficulty, false)
	
	WebUI.setText(findTestObject('Object Repository/Page_TestQuestions/tbx_AwardedScore'), AwardedScore)
	WebUI.setText(findTestObject('Object Repository/Page_TestQuestions/tbx_SubtractedScore'), SubtractedScore)
	
	for(tag in Tags) {
		WebUI.sendKeys(findTestObject('Object Repository/Page_TestQuestions/tbx_TagsInput'), tag)
		WebUI.sendKeys(findTestObject('Object Repository/Page_TestQuestions/tbx_TagsInput'), Keys.chord(Keys.ENTER))
	}
}

'Click Add Question'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_SubmitButton'))

'Verify MCQ is added to Test successfully, show a successful message and redirect to Questions listing page.'
if (true) {
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'), 20, FailureHandling.STOP_ON_FAILURE)
	def message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'))
	WebUI.verifyMatch(message, ""Add question successfully."", false)
}"
47,Create new question to add to a test,TC048,TC048_Verify error message display when user add MCQ question unsuccessfully_P2,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.

Steps
1. Click on Tests link from left menu.
2. Click on Create Test button.
3. Select ""Questions"" on the left menu
4. Click Add new question button to open Add MCQ dialog.
5. Leave all fields blank.
6. Click on Add button.
7. Input a valid value to Problem statement field.
8. Click Add button to see the 
9. Select Multiple choice option.
10. Input values to all choice options.
11. Do not select the answer field.
12. Click Add button.


Expected result
- Error messages display to all missing required fields.
- MCQ question is not added to test successfully.
",P2,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys

import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

WebUI.comment('[ON] As a Recruiter, I want to create new question to add to a test.')

@SetUp()
def setUp( ) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Test on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(emptyXpath)).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Click questions in the left sidebar'
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_AddTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['id': id])
}

'Click Add New Question button'
WebUI.click(findTestObject('Page_TestQuestions/btn_AddNewQuestion'))

'Verify if the Add New Question dialog is presented'
WebUI.verifyElementPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)

'Verify Question Type field: Default value: Multiple Choice'
WebUI.verifyOptionSelectedByValue(findTestObject('Object Repository/Page_TestQuestions/select_QuestionType'), 'Multiple Choice', false, 20)

'Enter invalid value'
if (true) {
	WebUI.click(findTestObject('Object Repository/Page_TestQuestions/wrapper_Ckeditor'))
	WebUI.sendKeys(findTestObject('Object Repository/Page_TestQuestions/ckedior_ProblemStatement'), ProblemStatement)
	
	WebUI.click(findTestObject('Object Repository/Page_TestQuestions/label_MultipleChoice',[('CHOOSE_TYPE'):ChooseType]))
	def answers = Answers
	
	List answerTextbox = WebUI.findWebElements(findTestObject('Object Repository/Page_TestQuestions/tbx_Answer'),30)
	
	int numberOfAnswers = answerTextbox.size()
	
	if (numberOfAnswers > 0) {
		for (int i = 0; i < numberOfAnswers; i++) {
			answerTextbox.get(i).sendKeys(answers[i])
		}
	}
	
	WebUI.setText(findTestObject('Object Repository/Page_TestQuestions/tbx_MaxTime'), MaxTime)
	WebUI.selectOptionByValue(findTestObject('Object Repository/Page_TestQuestions/select_Difficulty'), Difficulty, false)
	
	WebUI.setText(findTestObject('Object Repository/Page_TestQuestions/tbx_AwardedScore'), AwardedScore)
	WebUI.setText(findTestObject('Object Repository/Page_TestQuestions/tbx_SubtractedScore'), SubtractedScore)
	
	for(tag in Tags) {
		WebUI.sendKeys(findTestObject('Object Repository/Page_TestQuestions/tbx_TagsInput'), tag)
		WebUI.sendKeys(findTestObject('Object Repository/Page_TestQuestions/tbx_TagsInput'), Keys.chord(Keys.ENTER))
	}
}

'Click Add Question'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_SubmitButton'))

'Verify if error message is displayed'
if (true) {
	def message;
	'Verify message error in problem statement field'
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 1]), 10, FailureHandling.CONTINUE_ON_FAILURE)
	message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 1]), FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyMatch(message, statementError, false)
	
	'Verify message error in choice field'
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 2]), 10, FailureHandling.CONTINUE_ON_FAILURE)
	message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 2]), FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyMatch(message, choiceError, false)
	
	'Verify message error in answer field'
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 3]), 10, FailureHandling.CONTINUE_ON_FAILURE)
	message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 3]), FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyMatch(message, answerError, false)
	
	'Verify message error in awarded score field'
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 4]), 10, FailureHandling.CONTINUE_ON_FAILURE)
	message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 4]), FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyMatch(message, awardedScoreError, false)
	
	'Verify message error in subtracted score field'
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 5]), 10, FailureHandling.CONTINUE_ON_FAILURE)
	message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 5]), FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyMatch(message, subtractedScoreError, false)
}

'Click cancel'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_CancelButton'))"
48,Create new question to add to a test,TC049,TC049_Verify Add Other Question to Test Successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. Select ""Questions"" on the left menu
4. Click button [Add new question] to open Add MCQ dialog
5. Fill in test data as below
 5.1 Problem Statement: ""Problem ABC""
 5.2 Suggest Answer: ""Problem ABC should be ABC""
 5.3 Choices: ""Single Choice""
 5.4 4 answers: 4, 3, 2, 1
 5.5 Correct answer (radio) 1
 5.6 Difficulty Level: Hard
 5.7 Awarded Score: 20
 5.8 Subtracted Score: 20
 5.9 Max time: 20
 5.10 Tags: 2, 1
6. Click [Add]
7. Click [Add new question] again
8. Enter all the below test data into Add MCQ dialog
 8.1 Question Type: Subjective
 8.2 Problem Statement: ""Problem ABC""
 8.3 Suggest Answer: ""Problem ABC should be ABC""
 8.4 Difficulty Level: Hard
 8.5 Awarded Score: 20
 8.6 Subtracted Score: 20
 8.7 Max time: 20
 8.8 Tags: 2, 1
9. Hit button [Add]
10. Add the 3rd question
11. Enter all the below test data into Add MCQ dialog
 11.1 Question Type: Programming
 11.2 Problem Statement: ""Problem ABC""
 11.3 Suggest Answer: ""Problem ABC should be ABC""
 11.4 Difficulty Level: Hard
 11.5 Awarded Score: 20
 11.6 Subtracted Score: 20
 11.7 Max time: 20
 11.8 Tags: 2, 1
12. Click [Add]
13. Create the last new question
 13.1 Question Type: File Upload
 13.2 Problem Statement: ""Problem ABC""
 13.3 Suggest Answer: ""Problem ABC should be ABC""
 13.4 Difficulty Level: Hard
 13.5 Awarded Score: 20
 13.6 Subtracted Score: 20
 13.7 Max time: 20
 13.8 Tags: 2, 1
14. Click button [Add]


Expected result
- Message ""Add question successfully."" displays after Step 6, 9, 12, 14
- All the four questions are added to test successfully
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

WebUI.comment('[ON] As a Recruiter, I want to create new question to add to a test.')

@SetUp()
def setUp( ) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Test on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(emptyXpath)).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Click questions in the left sidebar'
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_AddTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['id': id])
}

def questionType
for(i=2; i< 5;i++) {
	switch(i) {
		case 2:
			questionType = ""Subjective""
			break;
		case 3:
			questionType = ""Programming""
			break;
		case 4:
			questionType = ""File Upload""
			break;
	}
	
	'Click Add New Question button'
	WebUI.click(findTestObject('Page_TestQuestions/btn_AddNewQuestion'))
	
	'Verify if the Add New Question dialog is presented'
	WebUI.verifyElementPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)
	
	'Verify Question Type field'
	WebUI.selectOptionByValue(findTestObject('Object Repository/Page_TestQuestions/select_QuestionType'), questionType, false)
	WebUI.verifyOptionSelectedByValue(findTestObject('Object Repository/Page_TestQuestions/select_QuestionType'), questionType, false, 20)
	
	WebUI.takeScreenshotAsCheckpoint(""Add other question type to Test"")
	
	'Enter valid value'
	if (true) {
		WebUI.click(findTestObject('Object Repository/Page_TestQuestions/wrapper_Ckeditor'))
		WebUI.sendKeys(findTestObject('Object Repository/Page_TestQuestions/ckedior_ProblemStatement'), ProblemStatement)
		
		WebUI.sendKeys(findTestObject('Object Repository/Page_TestQuestions/ckedior_ProblemStatement'), Keys.chord(Keys.TAB))
		
		WebUI.sendKeys(findTestObject('Object Repository/Page_TestQuestions/ckeditor_SuggestedAnswer'), SuggestedAnswer)
		
		WebUI.selectOptionByValue(findTestObject('Object Repository/Page_TestQuestions/select_Difficulty'), Difficulty, false)
		
		WebUI.setText(findTestObject('Object Repository/Page_TestQuestions/tbx_AwardedScore'), AwardedScore)
		WebUI.setText(findTestObject('Object Repository/Page_TestQuestions/tbx_SubtractedScore'), SubtractedScore)
		
		for(tag in Tags) {
			WebUI.sendKeys(findTestObject('Object Repository/Page_TestQuestions/tbx_TagsInput'), tag)
			WebUI.sendKeys(findTestObject('Object Repository/Page_TestQuestions/tbx_TagsInput'), Keys.chord(Keys.ENTER))
		}
	}
	
	'Click Add Question'
	WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_SubmitButton'))
	
	'Verify if the question is added to Test successfully, show a successful message and redirect to Questions listing page.'
	if (true) {
		WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'), 20, FailureHandling.STOP_ON_FAILURE)
		def message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'))
		WebUI.verifyMatch(message, ""Add question successfully."", false)
	}
}"
49,Create new question to add to a test,TC050,TC050_Verify error message display when user add Other Question unsuccessfully_P3,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.

Steps
1. Click on Tests link from left menu.
2. Click on Create Test button.
3. Select ""Questions"" on the left menu
4. Click Add new question button to open Add MCQ dialog.
5. Click on Question Type field.
6. Select Subjective from the dropdown list.
7. Leave all fields blank.
6. Click on Add button to see the result.
7. Input a valid value to Problem statement field.
8. Click Add button to see the result.
9. Remove Problem statement value.
10. Enter Suggested Answer value.
11. Click Add buttonto see the result.
12. Click on Question type field.
13. Select Programming option from the dropdown.
14. Repeat step 7 to step 11 to see the result.
15. Click on Question type field again.
16. Select File upload option from the dropdown.
18. Repeat step 1 to step 11 to see the result.

Expected result
- Error messages display to all missing required fields.
- The question is not added to test successfully for all question types.
",P3,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

WebUI.comment('[ON] As a Recruiter, I want to create new question to add to a test.')

@SetUp()
def setUp( ) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Test on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(emptyXpath)).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Click questions in the left sidebar'
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_AddTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['id': id])
}

def questionType
for(i=2; i< 5;i++) {
	switch(i) {
		case 2:
			questionType = ""Subjective""
			break;
		case 3:
			questionType = ""Programming""
			break;
		case 4:
			questionType = ""File Upload""
			break;
	}
	
	'Click Add New Question button'
	WebUI.click(findTestObject('Page_TestQuestions/btn_AddNewQuestion'))
	
	'Verify if the Add New Question dialog is presented'
	WebUI.verifyElementPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)
	
	'Verify Question Type field'
	WebUI.selectOptionByValue(findTestObject('Object Repository/Page_TestQuestions/select_QuestionType'), questionType, false)
	WebUI.verifyOptionSelectedByValue(findTestObject('Object Repository/Page_TestQuestions/select_QuestionType'), questionType, false, 20)
	
	'Enter invalid value'
	if (true) {
		WebUI.click(findTestObject('Object Repository/Page_TestQuestions/wrapper_Ckeditor'))
		WebUI.sendKeys(findTestObject('Object Repository/Page_TestQuestions/ckedior_ProblemStatement'), ProblemStatement)
		
		WebUI.sendKeys(findTestObject('Object Repository/Page_TestQuestions/ckedior_ProblemStatement'), Keys.chord(Keys.TAB))
		
		WebUI.sendKeys(findTestObject('Object Repository/Page_TestQuestions/ckedior_ProblemStatement'), SuggestedAnswer)
		
		WebUI.selectOptionByValue(findTestObject('Object Repository/Page_TestQuestions/select_Difficulty'), Difficulty, false)
		
		WebUI.setText(findTestObject('Object Repository/Page_TestQuestions/tbx_AwardedScore'), AwardedScore)
		WebUI.setText(findTestObject('Object Repository/Page_TestQuestions/tbx_SubtractedScore'), SubtractedScore)
		
		for(tag in Tags) {
			WebUI.sendKeys(findTestObject('Object Repository/Page_TestQuestions/tbx_TagsInput'), tag)
			WebUI.sendKeys(findTestObject('Object Repository/Page_TestQuestions/tbx_TagsInput'), Keys.chord(Keys.ENTER))
		}
	}
	
	'Click Add Question'
	WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_SubmitButton'))
	
	'Verify if error message is displayed'
	if (true) {
		def message;
		'Verify message error in problem statement field'
		WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 1]), 10, FailureHandling.CONTINUE_ON_FAILURE)
		message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 1]), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyMatch(message, statementError, false)

		'Verify message error in suggested answer field'
		WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 2]), 10, FailureHandling.CONTINUE_ON_FAILURE)
		message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 2]), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyMatch(message, suggestedAnswerError, false)
		
		'Verify message error in awarded score field'
		WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 3]), 10, FailureHandling.CONTINUE_ON_FAILURE)
		message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 3]), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyMatch(message, awardedScoreError, false)
		
		'Verify message error in subtracted score field'
		WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 4]), 10, FailureHandling.CONTINUE_ON_FAILURE)
		message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 4]), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyMatch(message, subtractedScoreError, false)
	}
	
	'Click cancel'
	WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_CancelButton'))
}"
50,Add questions from library to a draft test,TC051,TC051_Verify Add questions from library successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- There is at least lin created in the system
- There is at least one question (can be MCQ, Programing, Subjective or File Upload) is added to above lib
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. Select ""Questions"" on the left menu
4. Click button [Choose From Library]
5. When Choose frm Library dialog opens, select the top question that displays on this dialog
6. Hit button [Add]


Expected result
- Dialog ""Choose from Library"" is closed
- Message ""Add questions successfully."" displays
- Quetion is added to test successfully
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

'As a Recruiter, I want to add questions from libraries to a draft test'

def libname = 'random lib' + System.currentTimeMillis()

'Set up'
if (true) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
		
	'Click library on the navigation menu'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
		
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
		
	'Create a MCQ question'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Library/Create New MCQ'), ['libraryName': libname])
		
	'Click test on the navigation menu'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
		
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(emptyXpath)).size()
		
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Click questions in the left sidebar'
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
}


'Click Choose from Library button'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_ChooseFromLibrary'))

'Verify if the dialog displays'
WebUI.verifyElementPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)

WebUI.takeScreenshotAsCheckpoint(""Add question from Library to Test"")

'Select one question'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/cbx_LibraryQuestion'))

'Click add'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_SubmitButton'))

'Verify if the dialog disappears'
WebUI.verifyElementNotPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)

'Verify the question is added to Test successfully, show a successful message and redirect to Questions listing page of that test.'
if (true) {
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'), 20, FailureHandling.STOP_ON_FAILURE)
	def message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'))
	WebUI.verifyMatch(message, ""Add questions successfully."", false)
}

'Verify if, on the added question, awarded score is 0 and subtracted score is 0'
if (true) {
	def subtractedScore = WebUI.getAttribute(findTestObject('Object Repository/Page_TestQuestions/cpn_Question', ['order': 1]), 'data-subtractedScore')
	def awardedScore = WebUI.getAttribute(findTestObject('Object Repository/Page_TestQuestions/cpn_Question', ['order': 1]), 'data-awardedScore')
	
	WebUI.verifyMatch(subtractedScore, ""0"", false)
	WebUI.verifyMatch(awardedScore, ""0"", false)
}

'Tear down'
if (true) {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_AddTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['id': id])
	
	'Click library on the navigation menu'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	'Delete the test library'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Library/Tear Down Test Library'), ['libraryName': libname])
}"
51,Add questions from library to a draft test,TC052,TC052_Verify error message display_P2,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.

Steps
1. Click on Tests link from left menu.
2. Click on Create Test button.
3. Select on ""Questions"" on the left menu
4. Click on Choose From Library button.
5. Tick on a Question from the list.
6. Click on Cancel button.

Expected result
- The Choose from Library dialog is closed.
- The question is not added to test.",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

'As a Recruiter, I want to add questions from libraries to a draft test'

def libname = 'random lib' + System.currentTimeMillis()

'Set up'
if (true) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click library on the navigation menu'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	WebUI.waitForElementVisible(findTestObject('Object Repository/Page_Libraries/link_homeLib'),5)
	
	'Create a MCQ question'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Library/Create New MCQ'), ['libraryName': libname])
	
	'Click test on the navigation menu'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(emptyXpath)).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Click questions in the left sidebar'
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
}

'Click Choose from Library button'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_ChooseFromLibrary'))

'Verify if the dialog displays'
WebUI.verifyElementPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)

'Select one question'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/cbx_LibraryQuestion'))

'Click cancel'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_CancelButton'))

'Verify if the dialog disappears'
WebUI.verifyElementNotPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)

'Tear down'
if (true) {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_AddTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['id': id])
	
	'Click library on the navigation menu'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_libraries'))
	
	'Delete the test library'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Library/Tear Down Test Library'), ['libraryName': libname])
}"
52,Update questions added in a draft test,TC053,TC053_Verify Update MCQ successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. Select ""Questions"" on the left menu
4. Click button [Add new question] to open Add MCQ dialog
5. Fill in test data as below
 5.1 Problem Statement: ""Problem ABC""
 5.2 Suggest Answer: ""Problem ABC should be ABC""
 5.3 Choices: ""Single Choice""
 5.4 4 answers: 4, 3, 2, 1
 5.5 Correct answer (radio) 1
 5.6 Difficulty Level: Hard
 5.7 Awarded Score: 20
 5.8 Subtracted Score: 20
 5.9 Max time: 20
 5.10 Tags: 2, 1
6. Click [Add]
7. Wait for toast message ""Add question succssfully."" disappears
8. Mouse click on the card of question which is justed added above to open ""Update Multiple Choice Question"" dialog
9. Try to update the question details as below
 9.1 Problem Statement: ""Updated ABC""
 9.2 Suggest Answer: ""Problem Updated ABC""
 9.3 Choices: ""Multiple Choice""
 9.4 4 answers: 4, 3, 2, 1
 9.5 Correct answer (radio) 1, 2
 9.6 Difficulty Level: Easy
 9.7 Awarded Score: 25
 9.8 Subtracted Score: 25
 9.9 Max time: 15
 9.10 Tags: tagUpdated
10. Click button [Submit]


Expected result
- Message ""Update question successfully."" displays
- Update MCQ dialog is closed
- Verify page return to draft test with updated question
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

WebUI.comment('Story: [ON] As a Recruiter, I want to update questions added in a draft test.')

@SetUp()
def setUp() {
	WebUI.comment('Given I am logged into the system and there is at least one draft test with at least one question added,')
	
	'Login'
	WebUI.comment('Log in system')
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('Click Tests on the menu')
	WebUI.waitForElementPresent(findTestObject('Object Repository/Module_Navigation/nav_item_tests'), 10)
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create draft test'	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Add Test'), null)
	WebUI.waitForElementPresent(findTestObject('Page_TestOverview/toast_Successfully'), 10)
	WebUI.click(findTestObject('Page_TestOverview/toast_Successfully'))
	
	'Click questions in the left sidebar'
	WebUI.waitForElementPresent(findTestObject('Page_TestQuestions/btn_TestQuestion'), 10)
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
	
	'Create MCQ Question.'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Create MCQ'), null)
}

@TearDown()
def tearDown() {
	'Delete the test'	
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 30)
	testName = WebUI.getText(findTestObject('Object Repository/Page_TestOverview/txt_TestName'))
	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': testName])
}

WebUI.comment('Click on a question')
WebUI.waitForElementPresent(findTestObject('Page_TestQuestions/btn_Question__relyOnOrder', [('order') : 1]), 10)
WebUI.click(findTestObject('Page_TestQuestions/btn_Question__relyOnOrder', [('order') : 1]))

WebUI.comment('Verify system show a popup ""Update question""')
WebUI.waitForElementPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)

WebUI.takeScreenshotAsCheckpoint(""Update MCQ in draft Test"")

WebUI.comment('Enter valid values')
setUpdateValues()

WebUI.comment('Click Save')
WebUI.click(findTestObject('Page_TestQuestions/btn_SubmitButton'))

WebUI.comment('Verify changes, show a successful message and redirect to Questions listing page of that test.')
verify()

def setUpdateValues() {
	WebUI.clearText(findTestObject('Page_TestQuestions/txt_ProblemStatement'))
	
	WebUI.sendKeys(findTestObject('Page_TestQuestions/ckedior_ProblemStatement'), statement)
	
	WebUI.click(findTestObject('Page_TestQuestions/label_MultipleChoice', [('CHOOSE_TYPE') : chooseType]))
	
	List answerTextbox = WebUI.findWebElements(findTestObject('Page_TestQuestions/tbx_Answer'), 2)
	
	for (int i = 0; i < answers.size(); i++) {
		if (i >= answerTextbox.size()) {
			WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_AddChoice'))
	
			answerTextbox = WebUI.findWebElements(findTestObject('Page_TestQuestions/txt_Answers'), 2)
		}
		
		answerTextbox.get(i).clear()
		answerTextbox.get(i).sendKeys(answers[i])
	}
	
	WebUI.click(findTestObject('Page_TestQuestions/cbx_rightAnswer'))
	
	WebUI.selectOptionByValue(findTestObject('Page_TestQuestions/select_Difficulty'), difficulty, false)
	
	WebUI.setText(findTestObject('Page_TestQuestions/tbx_AwardedScore'), awardedScore)
	
	WebUI.setText(findTestObject('Page_TestQuestions/tbx_SubtractedScore'), subtractedScore)
	
	WebUI.setText(findTestObject('Page_TestQuestions/tbx_MaxTime'), maxTime)
	
	for (def tag : tags) {
		WebUI.sendKeys(findTestObject('Page_TestQuestions/tbx_TagsInput'), tag)
	
		WebUI.sendKeys(findTestObject('Page_TestQuestions/tbx_TagsInput'), Keys.chord(Keys.ENTER))
	}
}

def verify() {
	WebUI.waitForElementPresent(findTestObject('Page_TestQuestions/toast_Successfully'), 10)
	
	WebUI.verifyElementText(findTestObject('Page_TestQuestions/toast_Successfully'), 'Update question successfully.')
}

"
53,Update questions added in a draft test,TC054,TC054_Verify error message display when user update MCQ unsuccessfully_P2,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Draft Test in the system.
- There is at least 1 MCQ in the Draft Test.

Steps
1. Click on Tests link from left menu.
2. Click on Draft button under Tests section.
3. Click on a Test on the page.
4. Click on Questions button under Test section.
5. Click on MCQ question to open the “Update MCQ” dialog.
6. Remove the Problem Statement value to empty.
7. Click on Submit button to see the result.
8. Input a valid value to Problem Statement.
9. Change the Choices option
 Ex: Change from Multiple Choice to Single choice.
10. Click submit button.

Expected result
- Error messages display to all missing required fields.
- MCQ question is not updated to test.
",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

WebUI.comment('[ON] As a Recruiter, I want to create new question to add to a test.')

@SetUp()
def setUp() {
	WebUI.comment('Given I am logged into the system and there is at least one draft test with at least one question added,')
	
	'Login'
	WebUI.comment('Log in system')
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('Click Tests on the menu')
	WebUI.waitForElementPresent(findTestObject('Object Repository/Module_Navigation/nav_item_tests'), 10)
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create draft test'	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Add Test'), null)
	WebUI.waitForElementPresent(findTestObject('Page_TestOverview/toast_Successfully'), 10)
	WebUI.click(findTestObject('Page_TestOverview/toast_Successfully'))
	
	'Click questions in the left sidebar'
	WebUI.waitForElementPresent(findTestObject('Page_TestQuestions/btn_TestQuestion'), 10)
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
	
	'Create MCQ Question.'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Create MCQ'), null)
}

@TearDown()
def tearDown() {
	'Delete the test'
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 30)
	testName = WebUI.getText(findTestObject('Object Repository/Page_TestOverview/txt_TestName'))
	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': testName])
}

WebUI.comment('Click on a question')
WebUI.waitForElementPresent(findTestObject('Page_TestQuestions/btn_Question__relyOnOrder', [('order') : 1]), 10)
WebUI.click(findTestObject('Page_TestQuestions/btn_Question__relyOnOrder', [('order') : 1]))

WebUI.comment('Verify system show a popup ""Update question""')
WebUI.waitForElementPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)

WebUI.comment('Enter valid values')
setUpdateValues()

WebUI.comment('Click Save Question')
WebUI.click(findTestObject('Page_TestQuestions/btn_SubmitButton'))

WebUI.comment('Verify if error message is displayed')
verify()

'Click cancel'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_CancelButton'))


def setUpdateValues() {
	WebUI.clearText(findTestObject('Page_TestQuestions/txt_ProblemStatement'))
	
	WebUI.sendKeys(findTestObject('Page_TestQuestions/ckedior_ProblemStatement'), statement)
	
	WebUI.click(findTestObject('Page_TestQuestions/label_MultipleChoice', [('CHOOSE_TYPE') : chooseType]))
	
	List answerTextbox = WebUI.findWebElements(findTestObject('Page_TestQuestions/tbx_Answer'), 2)

	for (int i = 0; i < answerTextbox.size(); i++) {
		WebUI.click(findTestObject('Page_TestQuestions/btn_RemoveChoice'))
	}

	WebUI.selectOptionByValue(findTestObject('Page_TestQuestions/select_Difficulty'), difficulty, false)
	
	WebUI.setText(findTestObject('Page_TestQuestions/tbx_AwardedScore'), awardedScore)
	
	WebUI.setText(findTestObject('Page_TestQuestions/tbx_SubtractedScore'), subtractedScore)
	
	WebUI.setText(findTestObject('Page_TestQuestions/tbx_MaxTime'), maxTime)
	
	for (def tag : tags) {
		WebUI.sendKeys(findTestObject('Page_TestQuestions/tbx_TagsInput'), tag)
	
		WebUI.sendKeys(findTestObject('Page_TestQuestions/tbx_TagsInput'), Keys.chord(Keys.ENTER))
	}
}

def verify() {
	def message;
	'Verify message error in problem statement field'
	message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 1]), FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyMatch(message, invalidStatementError, false)
	
	'Verify message error in choice field'
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 2]), 10, FailureHandling.CONTINUE_ON_FAILURE)
	message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 2]), FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyMatch(message, invalidChoiceValueError, false)

	'Verify message error in answer field'
	message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 3]), FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyMatch(message, invalidAnswerError, false)
}"
54,Update questions added in a draft test,TC055,TC055_Verify Update Other Question successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. Select ""Questions"" on the left menu
4. Click button [Add new question] to open Add MCQ dialog
5. Fill in test data as below
 5.1 Question Type: Programing
 5.2 Problem Statement: ""Problem ABC""
 5.3 Suggest Answer: ""Problem ABC should be ABC""
 5.4 Difficulty Level: Hard
 5.5 Awarded Score: 20
 5.6 Subtracted Score: 20
 5.7 Max time: 20
 5.8 Tags: 2, 1
6. Click [Add]
7. Wait for toast message ""Add question succssfully."" disappears
8. Mouse click on the card of question which is justed added above to open ""Update Programing Question"" dialog
9. Try to update the question details as below
 9.1 Problem Statement: ""Updated ABC""
 9.2 Suggest Answer: ""Problem Updated ABC""
 9.3 Difficulty Level: Easy
 9.4 Awarded Score: 25
 9.5 Subtracted Score: 25
 9.7 Max time: 15
 9.8 Tags: tagUpdated
10. Click button [Submit]


Expected result
- Message ""Update question successfully."" displays
- Update Programing Question dialog is closed
- Verify page return to draft test with updated question
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

WebUI.comment('Story: [ON] As a Recruiter, I want to update questions added in a draft test.')

@SetUp()
def setUp() {
	WebUI.comment('Given I am logged into the system and there is at least one draft test with at least one question added,')
	
	'Login'
	WebUI.comment('Log in system')
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('Click Tests on the menu')
	WebUI.waitForElementPresent(findTestObject('Object Repository/Module_Navigation/nav_item_tests'), 10)
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create draft test'	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Add Test'), null)
	WebUI.waitForElementPresent(findTestObject('Page_TestOverview/toast_Successfully'), 10)
	WebUI.click(findTestObject('Page_TestOverview/toast_Successfully'))
	
	'Click questions in the left sidebar'
	WebUI.waitForElementPresent(findTestObject('Page_TestQuestions/btn_TestQuestion'), 10)
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
	
	'Create Question.'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Create Question'), [('questionType'): questionType])
}

@TearDown()
def tearDown() {
	'Delete the test'	
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 30)
	testName = WebUI.getText(findTestObject('Object Repository/Page_TestOverview/txt_TestName'))
	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': testName])
}

WebUI.comment('Click on a question')
WebUI.waitForElementPresent(findTestObject('Page_TestQuestions/btn_Question__relyOnOrder', [('order') : 1]), 10)
WebUI.click(findTestObject('Page_TestQuestions/btn_Question__relyOnOrder', [('order') : 1]))

WebUI.comment('Verify system show a popup ""Update question""')
WebUI.waitForElementPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)

WebUI.takeScreenshotAsCheckpoint(""Update other question in draft Test"")

WebUI.comment('Enter valid values')
setUpdateValues()

WebUI.comment('Click Save')
WebUI.click(findTestObject('Page_TestQuestions/btn_SubmitButton'))

WebUI.comment('Verify changes, show a successful message and redirect to Questions listing page of that test.')
verify()

def setUpdateValues() {
	WebUI.clearText(findTestObject('Page_TestQuestions/txt_ProblemStatement'))
	
	WebUI.sendKeys(findTestObject('Page_TestQuestions/ckedior_ProblemStatement'), statement)
	
	WebUI.clearText(findTestObject('Page_TestQuestions/txt_SuggestedAnswer'))	
	
	WebUI.sendKeys(findTestObject('Page_TestQuestions/ckeditor_SuggestedAnswer'), suggestedAnswer)
	
	WebUI.selectOptionByValue(findTestObject('Page_TestQuestions/select_Difficulty'), difficulty, false)
	
	WebUI.setText(findTestObject('Page_TestQuestions/tbx_AwardedScore'), awardedScore)
	
	WebUI.setText(findTestObject('Page_TestQuestions/tbx_SubtractedScore'), subtractedScore)
		
	for (def tag : tags) {
		WebUI.sendKeys(findTestObject('Page_TestQuestions/tbx_TagsInput'), tag)
	
		WebUI.sendKeys(findTestObject('Page_TestQuestions/tbx_TagsInput'), Keys.chord(Keys.ENTER))
	}
}

def verify() {
	WebUI.waitForElementPresent(findTestObject('Page_TestQuestions/toast_Successfully'), 10)
	WebUI.verifyElementText(findTestObject('Page_TestQuestions/toast_Successfully'), 'Update question successfully.')
}

"
55,Update questions added in a draft test,TC056,TC056_Verify error message display when user update Other Question unsuccessfully_P3,Verify login successfully with valid credentials,"Pre-condition 
- User has logged in to OnTest successfully. 
- There is at least 1 Draft Test in the system. 
- There is at least 1 MCQ in the Draft Test. 

Steps 
1. Click on Tests link from left menu. 
2. Click on Draft button under Tests section. 
3. Click on a Test on the page. 
4. Click on Questions button under Test section. 
5. Click on MCQ question to open the “Update MCQ” dialog. 
6. Click on Question type field.
7. Select Subjective option from the dropdown.
8. Leave the Suggested Answer empty.
10. Click submit button. 

Expected result 
- Error messages display to all missing required fields. 
- Subjective question is not updated to test. 
- The MCQ question still displays when User clicks on Cancel button.
",P3,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

WebUI.comment('[ON] As a Recruiter, I want to create new question to add to a test.')

@SetUp()
def setUp() {
	WebUI.comment('Given I am logged into the system and there is at least one draft test with at least one question added,')
	
	'Login'
	WebUI.comment('Log in system')
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('Click Tests on the menu')
	WebUI.waitForElementPresent(findTestObject('Object Repository/Module_Navigation/nav_item_tests'), 10)
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create draft test'	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Add Test'), null)
	WebUI.waitForElementPresent(findTestObject('Page_TestOverview/toast_Successfully'), 10)
	WebUI.click(findTestObject('Page_TestOverview/toast_Successfully'))
	
	'Click questions in the left sidebar'
	WebUI.waitForElementPresent(findTestObject('Page_TestQuestions/btn_TestQuestion'), 10)
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
	
	'Create Question.'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Create Question'), [('questionType'): questionType])
}

@TearDown()
def tearDown() {
	'Delete the test'	
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 30)
	testName = WebUI.getText(findTestObject('Object Repository/Page_TestOverview/txt_TestName'))
	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': testName])
}

WebUI.comment('Click on a question')
WebUI.waitForElementPresent(findTestObject('Page_TestQuestions/btn_Question__relyOnOrder', [('order') : 1]), 10)
WebUI.click(findTestObject('Page_TestQuestions/btn_Question__relyOnOrder', [('order') : 1]))

WebUI.comment('Verify system show a popup ""Update question""')
WebUI.waitForElementPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)

WebUI.comment('Enter valid values')
setUpdateValues()

WebUI.comment('Click Save Question')
WebUI.click(findTestObject('Page_TestQuestions/btn_SubmitButton'))

WebUI.comment('Verify if error message is displayed')
verify()

'Click cancel'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_CancelButton'))

def setUpdateValues() {
	WebUI.clearText(findTestObject('Page_TestQuestions/txt_ProblemStatement'))
	
	WebUI.sendKeys(findTestObject('Page_TestQuestions/ckedior_ProblemStatement'), statement)
	
	WebUI.clearText(findTestObject('Page_TestQuestions/txt_SuggestedAnswer'))	
	
	WebUI.sendKeys(findTestObject('Page_TestQuestions/ckeditor_SuggestedAnswer'), suggestedAnswer)
	
	WebUI.selectOptionByValue(findTestObject('Page_TestQuestions/select_Difficulty'), difficulty, false)
	
	WebUI.setText(findTestObject('Page_TestQuestions/tbx_AwardedScore'), awardedScore)
	
	WebUI.setText(findTestObject('Page_TestQuestions/tbx_SubtractedScore'), subtractedScore)
		
	for (def tag : tags) {
		WebUI.sendKeys(findTestObject('Page_TestQuestions/tbx_TagsInput'), tag)
	
		WebUI.sendKeys(findTestObject('Page_TestQuestions/tbx_TagsInput'), Keys.chord(Keys.ENTER))
	}
}

def verify() {
	def message;
	'Verify message error in problem statement field'
	message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 1]), FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyMatch(message, invalidStatementError, false)

	'Verify message error in suggested answer field'
	message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_MCQErrorMessage', ['order': 2]), FailureHandling.CONTINUE_ON_FAILURE)
	WebUI.verifyMatch(message, invalidSuggestedAnswerError, false)
}
"
56,Delete questions in a draft test,TC057,TC057_Verify Delete One Question Successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. Select ""Questions"" on the left menu
4. Click button [Add new question] to open Add MCQ dialog
5. Fill in test data as below
 5.1 Question Type: Programing
 5.2 Problem Statement: ""Problem ABC""
 5.3 Suggest Answer: ""Problem ABC should be ABC""
 5.4 Difficulty Level: Hard
 5.5 Awarded Score: 20
 5.6 Subtracted Score: 20
 5.7 Max time: 20
 5.8 Tags: 2, 1
6. Click [Add]
7. Wait for toast message ""Add question succssfully."" disappears
8. Repeat Step 4 to 6 in oder to add a second MCQ to draft test
9. Tick the checkbox in front of the 1st question
11. Hit button [Delete Questions] on the top 
12. Click [OK]


Expected result
- Message ""Delete questions successfully."" displays
- Deleted question is removed successfully from draft test
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

'[ON] As a Recruiter, I want to delete questions in a draft test'

@SetUp()
def setUp() {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Test on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create test for testing'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Add Test'), null)
	
	'Add a MCQ question'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Add MCQ Question'), null)
	
	'Dismiss the toast'
	WebUI.click(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'))
	
	'Add one more MCQ question'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Add MCQ Question'), null)
	
	'Dismiss the toast'
	WebUI.click(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'))
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_AddTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['id': id])
}

'Click a checkbox'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/cbx_Question', ['order': 1]))

'Click delete questions'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_DeleteQuestion'))

'Verify if the confirm dialog is appearing'
WebUI.verifyElementPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)

WebUI.takeScreenshotAsCheckpoint(""Delete question in draft Test"")

'Verify if the message of the confirm dialog is displayed correctly'
if (true) {
	def message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_ConfirmMessage'))
	WebUI.verifyMatch(message, confirmMessage, false)
}


'Click OK button'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_ConfirmDialog_Submit'))

'Verify if the message of the toast is displayed correctly'
if (true) {
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'), 10, FailureHandling.STOP_ON_FAILURE)
	def message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'))
	WebUI.verifyMatch(message, ""Delete questions successfully."", false)
}

"
57,Delete questions in a draft test,TC058,TC058_Verify Delete One Question unsuccessfully when user click Cancel button_P3,Verify login successfully with valid credentials,"""Pre-condition 
- User has logged in to OnTest successfully. 
- There is at least 1 Draft Test in the system. 
- There is at least 1 MCQ in the Draft Test. 

Steps 
1. Click on Tests link from left menu. 
2. Click on Draft button under Tests section. 
3. Click on a Test on the page. 
4. Click on Questions button under Test section. 
5. Tick on a checkbox to select a question.
6. Click on Delete Questions button.
7. Click on Cancel button.

Expected result 
- The Question is not deleted.
- The Question still displays on the page as before.",P3,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

'[ON] As a Recruiter, I want to delete questions in a draft test'

@SetUp()
def setUp() {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Test on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create test for testing'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Add Test'), null)
	
	'Add a MCQ question'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Add MCQ Question'), null)
	
	'Dismiss the toast'
	WebUI.click(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'))
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_AddTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['id': id])
}

'Click a checkbox'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/cbx_Question', ['order': 1]))

'Click delete questions'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_DeleteQuestion'))

'Verify if the confirm dialog is appearing'
WebUI.verifyElementPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)

'Verify if the message of the confirm dialog is displayed correctly'
if (true) {
	def message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_ConfirmMessage'))
	WebUI.verifyMatch(message, confirmMessage, false)
}


'Click cancel button'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_ConfirmDialog_Cancel'))

'Verify if the dialog is already closed and the questions are not deleted'
if (true) {
	WebUI.verifyElementNotPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)
	WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TestQuestions/cbx_Question', ['order' : 1]), 10)
}

"
58,Delete questions in a draft test,TC059,TC059_Verify Delete Multiple Questions Successfully_P2,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. Select ""Questions"" on the left menu
4. Click button [Add new question] to open Add MCQ dialog
5. Fill in test data as below
 5.1 Question Type: Programing
 5.2 Problem Statement: ""Problem ABC""
 5.3 Suggest Answer: ""Problem ABC should be ABC""
 5.4 Difficulty Level: Hard
 5.5 Awarded Score: 20
 5.6 Subtracted Score: 20
 5.7 Max time: 20
 5.8 Tags: 2, 1
6. Click [Add]
7. Wait for toast message ""Add question succssfully."" disappears
8. Repeat Step 4 to 6 in oder to add a second MCQ to draft test
9. Tick the checkbox MULTIPLE CHOICE to select all MCQ items
11. Hit button [Delete Questions] on the top 
12. Click [OK]


Expected result
- Message ""Delete questions successfully."" displays
- All questions are remove from test successfully
",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

'[ON] As a Recruiter, I want to delete questions in a draft test'

@SetUp()
def setUp() {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Test on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create test for testing'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Add Test'), null)
	
	'Add a MCQ question'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Add MCQ Question'), null)
	
	'Dismiss the toast'
	WebUI.click(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'))
	
	'Add one more MCQ question'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Add MCQ Question'), null)
	
	'Dismiss the toast'
	WebUI.click(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'))
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_AddTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['id': id])
}

'Click a Multiple Choice checkbox'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/cbx_QuestionType', ['order': 1]))

'Click delete questions'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_DeleteQuestion'))

'Verify if the confirm dialog is appearing'
WebUI.verifyElementPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)

'Verify if the message of the confirm dialog is displayed correctly'
if (true) {
	def message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_ConfirmMessage'))
	WebUI.verifyMatch(message, confirmMessage, false)
}


'Click OK button'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_ConfirmDialog_Submit'))

'Verify if the message of the toast is displayed correctly'
if (true) {
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'), 10, FailureHandling.STOP_ON_FAILURE)
	def message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'))
	WebUI.verifyMatch(message, ""Delete questions successfully."", false)
}

"
59,Delete questions in a draft test,TC060,TC060_Verify Delete Multiple Questions unsuccessfully when user click Cancel button_P4,Verify login successfully with valid credentials,"Pre-condition:
 - User has logged in to OnTest successfully.
 - There is at least 1 Draft Test in the system.
 - There are at least 2 questions in the Draft Test.
 
 Steps:
1. Click on the Tests link from the left menu.
2. Click on the Draft button under the Tests section.
3. Click on a Test on the page.
4. Click on the Questions button under the Test section.
5. Tick on 2 checkboxes to select 2 questions.
6. Click on the Delete Questions button.
7. Click on the Cancel button.

Expected result:
- No any Question is deleted.
- All Questions still display on the page as before.
",P4,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

'[ON] As a Recruiter, I want to delete questions in a draft test'

@SetUp()
def setUp() {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	WebUI.comment('When I click Test on the menu,')
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create test for testing'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Add Test'), null)
	
	'Add a MCQ question'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Add MCQ Question'), null)
	
	'Dismiss the toast'
	WebUI.click(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'))
	
	'Add one more MCQ question'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Add MCQ Question'), null)
	
	'Dismiss the toast'
	WebUI.click(findTestObject('Object Repository/Page_TestQuestions/toast_Successfully'))
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_AddTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['id': id])
}

'Click the Multiple Choice checkbox'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/cbx_QuestionType', ['order': 1]))

'Click delete questions'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_DeleteQuestion'))

'Verify if the confirm dialog is appearing'
WebUI.verifyElementPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)

'Verify if the message of the confirm dialog is displayed correctly'
if (true) {
	def message = WebUI.getText(findTestObject('Object Repository/Page_TestQuestions/txt_ConfirmMessage'))
	WebUI.verifyMatch(message, confirmMessage, false)
}


'Click cancel button'
WebUI.click(findTestObject('Object Repository/Page_TestQuestions/btn_ConfirmDialog_Cancel'))

'Verify if the dialog is already closed and the questions are not deleted'
if (true) {
	WebUI.verifyElementNotPresent(findTestObject('Page_TestQuestions/dialog_Dialog'), 10)
	WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TestQuestions/cbx_QuestionType', ['order' : 1]), 10)
}

"
60,Create sample email templates,TC061,TC061_Verify Email Templates_P2,"There is at least one draft test > Click Publish test > System shows confirmation message > Click Confirm > Verify Email Templates (Invite, Reminder, Cancelled Invite, Thank You) ",,P2,Yes,
61,Preview invite-only tests,TC062,TC062_Verify Enter the test is displayed_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. Select ""Questions"" on the left menu
4. Click button [Add new question] to open Add MCQ dialog
5. Fill in test data as below
 5.1 Question Type: Programing
 5.2 Problem Statement: ""Problem ABC""
 5.3 Suggest Answer: ""Problem ABC should be ABC""
 5.4 Difficulty Level: Hard
 5.5 Awarded Score: 20
 5.6 Subtracted Score: 20
 5.7 Max time: 20
 5.8 Tags: 2, 1
6. Click [Add]
9. Click [Add new question] again
10. Enter all the below test data into Add MCQ dialog
 10.1 Question Type: Subjective
 10.2 Problem Statement: ""Problem ABC""
 10.3 Suggest Answer: ""Problem ABC should be ABC""
 10.4 Difficulty Level: Hard
 10.5 Awarded Score: 20
 10.6 Subtracted Score: 20
 10.7 Max time: 20
 10.8 Tags: 2, 1
11. Hit button [Add]
12. Wait for toast message ""Add question succssfully."" disappears
13. Repeat Step 9 to 11 to create another Subjective question
14. Click the eye icon on the top right menu of the test
15. Verify button [Enter Test] is available
16. Click button [Enter Test]
17. Click button [Start Test]

Expected result
- There is total 1 MCQ item available on the test
- There are total of 2 Subjective questions are available on the test
- The test name match the name that draft test is created
- Test duration is 1 hour (default value when creating draft test)
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB

@SetUp()
def setUp( ) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Click questions in the left sidebar'
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
	
	'Add one subjective questions'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create Question'), null)
	
	'Add one more subjective questions'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create Question'), null)
	
	'Add one mcq'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create MCQ'), null)
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_PreviewTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), ['id': id])
}

'Get the test name before navigate to preview page'
def testName = WebUI.getText(findTestObject('Object Repository/Page_PreviewTest/txt_TestName'))

'Click preview test'
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'))

'Verify if ""Enter Test"" button is displayed'
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_PreviewTest/btn_EnterTest'), 10)

'Verify total question in question type'
def text
if (true) {
	'Verify if there is one mcq'
	text = WebUI.getText(findTestObject('Object Repository/Page_PreviewTest/txt_QuestionType', ['order': 1]))
	WebUI.verifyMatch(text, ""1 Multiple Choice"", false)
	'Verify if there is two subjectives'
	text = WebUI.getText(findTestObject('Object Repository/Page_PreviewTest/txt_QuestionType', ['order': 2]))
	WebUI.verifyMatch(text, ""2 Subjective"", false)
}

'Verify test name'
if (true) {
	def previewTestName = WebUI.getText(findTestObject('Object Repository/Page_PreviewTest/txt_TestName'))
	WebUI.verifyMatch(previewTestName, testName, false)
}

'Verify test duration (default duration of a newly created test is one minute)'
if (true) {
	text = WebUI.getText(findTestObject('Object Repository/Page_PreviewTest/txt_Duration'))
	WebUI.verifyMatch(text, ""01:00:00"", false)
}"
62,Preview invite-only tests,TC063,TC063_Verify UI on Enter the test_P3,"There is at least one test with type invite-only > Click Preview test > On Enter the test: Verify General instructions, About the test, Recommendede before you start, Help & support",,P3,Yes,
63,Preview invite-only tests,TC064,TC064_Verify Webcam accessed successfully_P1,Verify login successfully with valid credentials,"Pre-condition:
 - User has logged in to OnTest successfully.
 
 Steps:
1. Click on the Tests link from the left menu.
2. Click on the Create Test button at top right of the page.
3. Turn on the Snapshot toggle under Settings section.
4. Select OK button to confirm.
5. Click on Preview icon at top right of the page.

Expected result:
- The Webcam is accessed successfully.
- The successfully message displays as ""Webcam accessed successfully.Ready to take the test!""",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import java.awt.Robot;
import java.awt.event.KeyEvent;
import com.database.Database as DB

@SetUp()
def setUp( ) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_PreviewTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), ['id': id])
}

'Turn on taking screen shot'
WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/input_SwitchSetting'), 10)
WebUI.click(findTestObject('Object Repository/Page_TestOverview/input_SwitchSetting'))

'Accep the confirmation'
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Confirm'))

'Click preview test'
WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'), 10)
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'))

'Verify if successfull message is displayed'
if (true) {
	text = WebUI.getText(findTestObject('Object Repository/Page_PreviewTest/txt_WebcamMessage'))
	WebUI.verifyMatch(text, ""Webcam accessed successfully.\nReady to take the test!"", false)
}
"
64,Preview invite-only tests,TC065,TC064_Verify Webcam can Not access_P2,The test requires to take snapshots > Click Preview test > On Enter the test: Checks webcam can NOT be accessed > show warning message “Please turn on webcam to take this test”,,P2,Yes,
65,Preview invite-only tests,TC066,TC066_Verify Read instructions is displayed_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. Wait for draft test created
4. Repeat Step 9 to 11 to create another Subjective question
5. Click the eye icon on the top right menu of the test
6. Hit button [Enter Test]

Expected result
- Button ""Start Test"" is not enabled
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import java.awt.Robot;
import java.awt.event.KeyEvent;
import com.database.Database as DB

@SetUp()
def setUp( ) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_PreviewTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), ['id': id])
}

'Click preview test'
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'))

'Click Enter Test'
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_EnterTest'))

'Verify if ""Read Instruction"" is displayed'
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_PreviewTest/txt_TestInstruction'), 0)

'verify if ""Start Test"" button is not clickable'
WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/btn_StartTest'), 10)
WebUI.verifyElementNotClickable(findTestObject('Object Repository/Page_PreviewTest/btn_StartTest'))"
66,Preview invite-only tests,TC067,TC067_Verify UI on Read instructions_P3,"On Read instructions: Verify Test instructions, Default time to read instructions: 1 min.",,P3,Yes,
67,Preview invite-only tests,TC068,TC068_Verify No start test on Read instructions_P4,"On Read instructions: Verify After 1 min, “Start Test” button is enabled > No click Start Test ",,P4,Yes,
68,Preview invite-only tests,TC069,TC069_Verify Solve questions is displayed_P1,Verify login successfully with valid credentials,"Pre-condition:
 - User has logged in to OnTest successfully.
 
 Steps:
1. Click on the Tests link from the left menu.
2. Click on the Create Test button at top right of the page.
3. Click on Questions button under Test 
4. Click on Add New Question button.
5. Input valid values to all required fields.
6. Click on Add button to create a new question.
7. Click on Preview icon at top right of the page.
8. Click on Enter Test button.
9. Click on Start Test button.
10. Verify Solve questions on the page.

Expected result:
- The Preview button displays on the page.
- The Submit button displays on the page.
- The Duration time is starting count down. 
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB

@SetUp()
def setUp( ) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Click questions in the left sidebar'
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
	
	'Add one mcq'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create MCQ'), null)
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_PreviewTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), ['id': id])
}

'Click preview test'
WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'), 10)
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'))

'Click Enter Test'
WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/btn_EnterTest'), 10)
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_EnterTest'))

'Wait for 1mins'
WebUI.delay(60)

'Click Start Test'
WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/btn_StartTest'), 10)
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_StartTest'))

'Verify if Solve Questions is displayed'
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_PreviewTest/btn_Submit'), 10)

'Verify if the countdown is already starting'
if (true) {
	WebUI.delay(3)
	text = WebUI.getText(findTestObject('Object Repository/Page_PreviewTest/txt_Duration'))
	WebUI.verifyNotMatch(text, ""01:00:00"", false)
}"
69,Preview invite-only tests,TC070,TC070_Verify UI on Solve questions_P3,"On Solve questions > List question: Verify Question type, Score, Total question, Total score",,P3,Yes,
70,Preview invite-only tests,TC071,TC071_Verify can be reset answers_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. Select ""Questions"" on the left menu
4. Click button [Add new question] to open Add MCQ dialog
5. Fill in test data as below
 5.1 Question Type: Programing
 5.1 Problem Statement: ""Problem ABC""
 5.2 Suggest Answer: ""Problem ABC should be ABC""
 5.3 Choices: ""Single Choice""
 5.4 4 answers: 4, 3, 2, 1
 5.5 Correct answer (radio) 1
 5.6 Difficulty Level: Hard
 5.7 Awarded Score: 20
 5.8 Subtracted Score: 20
 5.9 Max time: 20
 5.10 Tags: 2, 1
6. Click [Add]
7. Click the eye icon on the top right menu of the test
8. Click button [Enter Test]
9. Click button [Start Test]
10. On the MCQ question, hit [Load Test] to see question in details
11. Select the 1st answer of MCQ
12. Verify button [Reset anser] is enabled
13. Click button Reset anwer

Expected result
- Select answered at Step 11 is unchecked
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB

@SetUp()
def setUp( ) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Click questions in the left sidebar'
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
	
	'Add one mcq'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create MCQ'), null)
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_PreviewTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), ['id': id])
}

'Click preview test'
WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'), 10)
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'))

'Click Enter Test'
WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/btn_EnterTest'), 10)
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_EnterTest'))

'Wait for 1mins'
WebUI.delay(60)

'Click Start Test'
WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/btn_StartTest'), 10)
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_StartTest'))

'On the first mcq, choose the first option'
WebUI.click(findTestObject('Page_PreviewTest/radio_MCQ', ['order': 1]))

'Click reset answer'
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_ResetAnswer'))

'Verify if the answer is reset'
WebUI.verifyElementNotChecked(findTestObject('Page_PreviewTest/radio_MCQ', ['order': 1]), 10)"
71,Preview invite-only tests,TC072,TC072_Verify validate for upload file_P3,"On Solve questions > Detail question: Question type “File upload”: allow single file. Validate:
File size < 10MB.
Supported file type: zip",,P3,Yes,
72,Preview invite-only tests,TC073,TC073_Verify webcam can view_P2,On Solve questions > Click the webcam icon > view the webcam,,P2,Yes,
73,Preview invite-only tests,TC074,TC074_Verify submit the test before the duration ends_P1,Verify login successfully with valid credentials,"Pre-condition:
 - User has logged in to OnTest successfully.
 
 Steps:
1. Click on the Tests link from the left menu.
2. Click on the Create Test button at top right of the page.
3. Click on Questions button under Test 
4. Click on Add New Question button.
5. Input valid values to all required fields.
6. Click on Add button to create a new question.
7. Click on Add New Question button again.
8. Input valid value to all required fields.
9. Click on Add button to create a second new question.
10. Click on Preview icon at top right of the page.
11. Click on Enter Test button.
12. Click on Start Test button.
13. Verify the Back button is disabled on first question.
14. Click on Next button.
15. Verify the Next button is disabled on the last question.
16. Click on Submit button.
17. Click on OK button to confirm.

Expected result: User backs to Enter Test page.",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB

@SetUp()
def setUp( ) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Click questions in the left sidebar'
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
	
	'Add one mcq'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create MCQ'), null)
	
	'Add one more mcq'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create MCQ'), null)
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_PreviewTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), ['id': id])
}

'Click preview test'
WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'), 10)
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'))

'Click Enter Test'
WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/btn_EnterTest'), 10)
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_EnterTest'))

'Wait for 1mins'
WebUI.delay(60)

'Click Start Test'
WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/btn_StartTest'), 10)
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_StartTest'))

'There are 2 questions in total'
'On the first question'
'Verify there is no back button'
WebUI.verifyElementNotClickable(findTestObject('Object Repository/Page_PreviewTest/btn_Back'))

'Click next'
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_Next'))

'On the last question'
'Verify there is no next button'
WebUI.verifyElementNotClickable(findTestObject('Object Repository/Page_PreviewTest/btn_Next'))

'Click submit'
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_Submit'))

'Verify if confirm dialog is displayed'
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_PreviewTest/dialog_Dialog'), 10)

'Verify the confirm message'
if (true) {
	text = WebUI.getText(findTestObject('Object Repository/Page_PreviewTest/txt_Confirm'))
	WebUI.verifyMatch(text, ""Are you sure you want to submit your answers?"", false)
}

'Click ok'
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_OK'))

'Verify if the system redirects user back to enter the test'
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_PreviewTest/btn_EnterTest'), 10)"
74,Preview invite-only tests,TC075,TC075_Verify do not submit test at duration end_P2,On Solve questions > Do not submit the test at duration ends > system navigates to Enter the test,,P2,Yes,
75,Publish tests,TC076,TC076_Verify Publish tests Successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. Change the test name to ""Publish Test Ongoing""
4. On draft test, hit button [Publish Test]
5. Click [OK] on Publish test dialog
6. Verify toast message displays ""Publish test successfully.""
7. Verify Publish test dialog is closed
8. Verify test status is changed to ""Ongoing""
9. Click tab ""Email Templates"" on the left menu
10. Select tab ""Invite Email"" in the Email Template section
11. Verify Subjective of Invite Email
12. Verify Email Body of Inviate Email
13. Switch to tab ""Reminder Email""
14. Verify Subjective of Reminder Email
15. Verify Email Body of Reminder Email
16. Go to next tab ""Invite Cancelled Email""
17. Verify Subjective of Invite Cancelled Email
18. Verify Email Body of Invite Cancelled Email
19. Select the last tab ""Thank You Email""
20. Verify Subjective of Thank You Email
21. Verify Email Body of Thank You Email


Expected result
- All email templates match Subject and Body in the sheet TestData
- Test status is ""On-going""",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String testName = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp()
def setUp() {
	WebUI.comment('User must be logged in to the system successfully ')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'), null)
	
	WebUI.comment('There is at least one draft test')
	if (true) {
		WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
		WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Add Test'), null)
	}
	
	WebUI.delay(5)
	
	// Change the name of this test
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'name']), 3, , FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/span_ShowingTextOrNumberField', ['fieldName': 'name']), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.setText(findTestObject('Object Repository/Page_TestOverview/input_TextOrNumberField', ['fieldName': 'name']), testName, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Save', ['fieldName': 'name']), FailureHandling.CONTINUE_ON_FAILURE)
	}
}

@TearDown()
def tearDown() {
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': testName])
}

WebUI.comment('Step 1: Click Publish test')
WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/btn_Publish'), 3, FailureHandling.CONTINUE_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Publish'), FailureHandling.STOP_ON_FAILURE)

WebUI.comment('Step 2: Verify System shows a confirmation message')
WebUI.waitForElementVisible(findTestObject('Object Repository/Page_TestOverview/modal_Confirm_Publish'), 3, FailureHandling.CONTINUE_ON_FAILURE)

WebUI.comment('Step 3: Click Confirm')
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Ok_Publish'), FailureHandling.STOP_ON_FAILURE)

WebUI.comment('Step 4: Verify: ')
if (true) {
	WebUI.comment('Popup is closed, Show successful message and reload the current page.')
	if (true) {
		WebUI.comment('Popup is closed')
		WebUI.waitForElementNotPresent(findTestObject('Object Repository/Page_TestOverview/modal_Confirm_Publish'), 5, FailureHandling.CONTINUE_ON_FAILURE)
		
		WebUI.comment('Show successful message')
		def message = WebUI.getText(findTestObject('Object Repository/Module_Navigation/toast_Success'), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyMatch(message, successMessage, false)
		WebUI.verifyElementVisible(findTestObject('Object Repository/Module_Navigation/toast_Success'), FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Change test status to “Ongoing""')
	if (true) {
		WebUI.delay(1)
		def status = WebUI.getText(findTestObject('Object Repository/Page_TestOverview/span_Test_Status'), FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyMatch(status, 'Ongoing', false)
	}
	
	WebUI.comment('Create a Practice.')
	WebUI.comment('WAITING THE PRACTICE TEST TICKET.')
	
	WebDriver driver = DriverFactory.getWebDriver();
	JavascriptExecutor executor = (JavascriptExecutor)driver;
	
	
	WebUI.comment('Add Email Templates (Invite, Reminder, Cancelled Invite, Thank You) to a test.')
	if (true) {
		WebUI.comment('Open Email Templates')
		WebUI.waitForElementVisible(findTestObject('Object Repository/Page_TestOverview/btn_Email_Templates'), 3, FailureHandling.STOP_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Email_Templates'), FailureHandling.STOP_ON_FAILURE)
		
		WebUI.comment('Click to tab Invite Email')
		WebUI.waitForElementVisible(findTestObject('Object Repository/Page_EmailTemplates/tab_Invite_Email'), 3, FailureHandling.STOP_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_EmailTemplates/tab_Invite_Email'), FailureHandling.STOP_ON_FAILURE)
		
		WebUI.comment('Check Invite Subjective')
		def inviteSubjective = WebUI.getAttribute(findTestObject('Object Repository/Page_EmailTemplates/content_Subjective_By_Type', [""emailType"": ""invite""]), ""value"", FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyMatch(inviteSubjective, validInviteSubjective, false)
		
		WebUI.comment('Check Invite Email Body')
		def inviteEmailBody = executor.executeScript(""return document.evaluate('//*[@id=\""invite-email-email-body\""]//*[@aria-label=\""Rich Text Editor, main\""]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.outerHTML"");
		WebUI.verifyMatch(inviteEmailBody, validInviteEmailBody, false)
		
		WebUI.comment('Click to tab Reminder Email')
		WebUI.waitForElementVisible(findTestObject('Object Repository/Page_EmailTemplates/tab_Reminder_Email'), 3, FailureHandling.STOP_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_EmailTemplates/tab_Reminder_Email'), FailureHandling.STOP_ON_FAILURE)
		
		WebUI.comment('Check Reminder Subjective')
		def reminderSubjective = WebUI.getAttribute(findTestObject('Object Repository/Page_EmailTemplates/content_Subjective_By_Type', [""emailType"": ""reminder""]), ""value"", FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyMatch(reminderSubjective, validReminderSubjective, false)
		
		WebUI.comment('Check Reminder Email Body')
		def reminderEmailBody = executor.executeScript(""return document.evaluate('//*[@id=\""reminder-email-email-body\""]//*[@aria-label=\""Rich Text Editor, main\""]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.outerHTML"");
		WebUI.verifyMatch(reminderEmailBody, validReminderEmailBody, false)
		
		WebUI.comment('Click to tab Cancelled Email')
		WebUI.waitForElementVisible(findTestObject('Object Repository/Page_EmailTemplates/tab_Cancelled_Email'), 3, FailureHandling.STOP_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_EmailTemplates/tab_Cancelled_Email'), FailureHandling.STOP_ON_FAILURE)
		
		WebUI.comment('Check Cancelled Subjective')
		def cancelledSubjective = WebUI.getAttribute(findTestObject('Object Repository/Page_EmailTemplates/content_Subjective_By_Type', [""emailType"": ""cancelled""]), ""value"", FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyMatch(cancelledSubjective, validCancelledSubjective, false)
		
		WebUI.comment('Check Cancelled Email Body')
		def cancelledEmailBody = executor.executeScript(""return document.evaluate('//*[@id=\""cancelled-email-email-body\""]//*[@aria-label=\""Rich Text Editor, main\""]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.outerHTML"");
		WebUI.verifyMatch(cancelledEmailBody, validCancelledEmailBody, false)
		
		WebUI.comment('Click to tab Thank You Email')
		WebUI.waitForElementVisible(findTestObject('Object Repository/Page_EmailTemplates/tab_Thanks_Email'), 3, FailureHandling.STOP_ON_FAILURE)
		WebUI.click(findTestObject('Object Repository/Page_EmailTemplates/tab_Thanks_Email'), FailureHandling.STOP_ON_FAILURE)
		
		WebUI.comment('Check Thank You Subjective')
		def thanksSubjective = WebUI.getAttribute(findTestObject('Object Repository/Page_EmailTemplates/content_Subjective_By_Type', [""emailType"": ""thank""]), ""value"", FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyMatch(thanksSubjective, validThanksSubjective, false)
		
		WebUI.comment('Check Thank You Email Body')
		def thanksEmailBody = executor.executeScript(""return document.evaluate('//*[@id=\""thank-email-email-body\""]//*[@aria-label=\""Rich Text Editor, main\""]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.outerHTML"");
		WebUI.verifyMatch(thanksEmailBody, validThanksEmailBody, false)
	}
}"
76,Publish tests,TC077,TC077_Verify Publish tests Unsuccessfully_P2,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.

Steps
1. Click on Tests link from left menu.
2. Click on Create Test button.
3. Click on Publish Test button.
4. Click on Cancel button on Publish test confirmation dialog.

Expected result
- User stays on the Test.
- Test status is ""Draft ""
",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@SetUp()
def setUp() {
	WebUI.comment('User must be logged in to the system successfully ')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'), null)
	
	WebUI.comment('There is at least one draft test')
	if (true) {
		WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
		WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Add Test'), null)
	}
	
	WebUI.delay(5)
}

@TearDown()
def tearDown() {
	WebUI.comment('Delete the draft test which has just been used to test.')
	if (true) {
		WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/btn_OptionDropdown'), 3)
		WebUI.waitForElementVisible(findTestObject('Object Repository/Page_TestOverview/btn_OptionDropdown'), 3)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_OptionDropdown'))
		WebUI.waitForElementVisible(findTestObject('Object Repository/Page_TestOverview/btn_Option', ['optionName': 'Delete test']), 3)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Option', ['optionName': 'Delete test']))
		WebUI.waitForElementVisible(findTestObject('Object Repository/Page_TestOverview/btn_Confirm'), 3)
		WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Confirm'))
	}
}

WebUI.comment('Step 1: Click Publish test')
WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/btn_Publish'), 3, FailureHandling.CONTINUE_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Publish'), FailureHandling.STOP_ON_FAILURE)


WebUI.comment('Step 2: Verify System shows a confirmation message')
WebUI.waitForElementVisible(findTestObject('Object Repository/Page_TestOverview/modal_Confirm_Publish'), 3, FailureHandling.CONTINUE_ON_FAILURE)

WebUI.comment('Step 3: Click Cancel')
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Cancel_Publish'), FailureHandling.STOP_ON_FAILURE)

WebUI.comment('Step 4: Verify: Popup is closed and do nothing')
WebUI.waitForElementNotPresent(findTestObject('Object Repository/Page_TestOverview/modal_Confirm_Publish'), 5, FailureHandling.CONTINUE_ON_FAILURE)"
77,View ongoing tests,TC078,TC078_View Ongoing test with Test Access is OFF_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. Change the test name to ""Publish Test Access Off""
4. On draft test, hit button [Publish Test]
5. Click [OK] on Publish test dialog
6. Scrolldown to see toggle ""Test Access""
7. Toggle Test Access to Off
8. Verify Update accessibility dialog displays
9. Click [OK]
10. Select Tests menu to see all the tests
11. Key in ""Publish Test Access Off"" in the search box
12. Click search icon
13. Click on the test that is found to open it
14. Verify toggle Test Access is still Off
15. Verify below fields are editable
 15.1 Test Name
 15.2 Test Duration
 15.3 Test Type
 15.4 Test Link
 15.5 Tags
 15.6 Test Description
 15.7 Test Instructions
16. Scrolldown to the bottom
17. Toggle button ""Take candidates snapshots during the test""
18. Verify Update setting dialog pops up on top of screen


",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest222 TC1 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp
def setup() {
	def testAccessibleSwitch = findTestObject('Object Repository/Page_TestOverview/switch_TestAccessible')
	def confirmToggleAccessibleSwitch = findTestObject('Object Repository/Page_TestOverview/btn_Ok_Toggle_Accessible')
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	
	WebUI.comment('There is at least one ongoing test with Invite-only type, Test Access is OFF')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
	
	WebUI.comment('Change Accessible to OFF')
	if (true) {
		WebUI.scrollToElement(testAccessibleSwitch, 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(testAccessibleSwitch, FailureHandling.STOP_ON_FAILURE)
		WebUI.waitForElementClickable(confirmToggleAccessibleSwitch, 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(confirmToggleAccessibleSwitch, FailureHandling.STOP_ON_FAILURE)
	}
	
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
}

@TearDown
def teardown() {
	WebUI.comment('Delete tested test.')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
}

def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
def testOverviewContainer = findTestObject('Object Repository/Page_TestOverview/container_Test_Overview')
def testAccessibleLabel = findTestObject('Object Repository/Page_TestOverview/label_Accessible')
def pencilIconOfTestName = findTestObject('Object Repository/Page_TestOverview/icon_Pencil_By_FieldName', ['fieldName': 'name'])
def pencilIconOfTestDuration = findTestObject('Object Repository/Page_TestOverview/icon_Pencil_By_FieldName', ['fieldName': 'duration'])
def pencilIconOfTestType = findTestObject('Object Repository/Page_TestOverview/icon_Pencil_By_FieldName', ['fieldName': 'type'])
def pencilIconOfTestLink = findTestObject('Object Repository/Page_TestOverview/icon_Pencil_By_FieldName', ['fieldName': 'testLink'])
def pencilIconOfTestPracticeLink = findTestObject('Object Repository/Page_TestOverview/icon_Pencil_By_FieldName', ['fieldName': 'practiceLink'])
def pencilIconOfTestTags = findTestObject('Object Repository/Page_TestOverview/icon_Pencil_By_FieldName', ['fieldName': 'tags'])
def pencilIconOfTestDescription = findTestObject('Object Repository/Page_TestOverview/icon_Pencil_By_FieldName', ['fieldName': 'description'])
def pencilIconOfTestInstructions = findTestObject('Object Repository/Page_TestOverview/icon_Pencil_By_FieldName', ['fieldName': 'instructions'])
def toggleTakeScreenshot = findTestObject('Object Repository/Page_TestOverview/switch_TakeScreenshot')
def takeScreenshotConfirmModal = findTestObject('Object Repository/Page_TestOverview/modal_Confirm_TakeScreenshot')

WebUI.comment('Step 1: Click an ongoing test on the Tests listing page.')
if (true) {
	WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
	try {
		WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
	}
	catch (Exception e) {
		WebDriver driver = DriverFactory.getWebDriver()
		WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
		JavascriptExecutor executor = ((driver) as JavascriptExecutor)
		executor.executeScript('arguments[0].click()', element)
	}
}

WebUI.comment('Step 2: Verify System redirects to Test details, Overview tab.')
WebUI.waitForElementVisible(testOverviewContainer, 3, FailureHandling.CONTINUE_ON_FAILURE)

WebUI.comment('Step 3: Verify Test Access: OFF.')
if (true) {
	WebUI.scrollToElement(testAccessibleLabel, 3, FailureHandling.CONTINUE_ON_FAILURE)
	def accessible = WebUI.getText(testAccessibleLabel, FailureHandling.STOP_ON_FAILURE)
	WebUI.verifyMatch(accessible, ""Off"", false)
	WebUI.delay(2)
}

WebUI.comment('Step 4: Verify editable fields.')
if (true) {
	WebUI.comment('Test Name')
	if (true) {
		WebUI.scrollToElement(pencilIconOfTestName, 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementVisible(pencilIconOfTestName, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Test Duration')
	if (true) {
		WebUI.scrollToElement(pencilIconOfTestDuration, 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementVisible(pencilIconOfTestDuration, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Test Type')
	if (true) {
		WebUI.scrollToElement(pencilIconOfTestType, 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementVisible(pencilIconOfTestType, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Test Link')
	if (true) {
		WebUI.scrollToElement(pencilIconOfTestLink, 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementVisible(pencilIconOfTestLink, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Tags')
	if(true) {
		WebUI.scrollToElement(pencilIconOfTestTags, 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementVisible(pencilIconOfTestTags, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Test Description')
	if (true) {
		WebUI.scrollToElement(pencilIconOfTestDescription, 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementVisible(pencilIconOfTestDescription, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Test Instruction')
	if (true) {
		WebUI.scrollToElement(pencilIconOfTestInstructions, 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementVisible(pencilIconOfTestInstructions, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Settings')
	if (true) {
		WebUI.scrollToElement(toggleTakeScreenshot, 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(toggleTakeScreenshot, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.waitForElementVisible(takeScreenshotConfirmModal, 3, FailureHandling.CONTINUE_ON_FAILURE)
	}
}





"
78,View ongoing tests,TC079,TC079_View Ongoing test with Test Access is ON_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.

Steps:
1. Click on the Tests link from left menu.
2. Click on the Create Test button.
3. Click on the Publish Test button.
4. Click on the OK button to confirm.
5. Verify details on the Test page.

Expected result
- Test status is ""Ongoing"".
- Test Access toggle is ON.
- Test Name, Test Duration, Test Type, Test Link, Practice Test Link, Tags, Test Description, Test Instruction, Settings fields are Non-editable.",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest222 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp
def setup() {
	def testAccessibleSwitch = findTestObject('Object Repository/Page_TestOverview/switch_TestAccessible')
	def confirmToggleAccessibleSwitch = findTestObject('Object Repository/Page_TestOverview/btn_Ok_Toggle_Accessible')
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	
	WebUI.comment('There is at least one ongoing test with Invite-only type, Test Access is ON')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
	
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
}

@TearDown
def teardown() {
	WebUI.comment('Delete tested test.')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
}

def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
def testOverviewContainer = findTestObject('Object Repository/Page_TestOverview/container_Test_Overview')
def testAccessibleLabel = findTestObject('Object Repository/Page_TestOverview/label_Accessible')
def pencilIconOfTestName = findTestObject('Object Repository/Page_TestOverview/icon_Pencil_By_FieldName', ['fieldName': 'name'])
def pencilIconOfTestDuration = findTestObject('Object Repository/Page_TestOverview/icon_Pencil_By_FieldName', ['fieldName': 'duration'])
def pencilIconOfTestType = findTestObject('Object Repository/Page_TestOverview/icon_Pencil_By_FieldName', ['fieldName': 'type'])
def pencilIconOfTestLink = findTestObject('Object Repository/Page_TestOverview/icon_Pencil_By_FieldName', ['fieldName': 'testLink'])
def pencilIconOfTestPracticeLink = findTestObject('Object Repository/Page_TestOverview/icon_Pencil_By_FieldName', ['fieldName': 'practiceLink'])
def pencilIconOfTestTags = findTestObject('Object Repository/Page_TestOverview/icon_Pencil_By_FieldName', ['fieldName': 'tags'])
def pencilIconOfTestDescription = findTestObject('Object Repository/Page_TestOverview/icon_Pencil_By_FieldName', ['fieldName': 'description'])
def pencilIconOfTestInstructions = findTestObject('Object Repository/Page_TestOverview/icon_Pencil_By_FieldName', ['fieldName': 'instructions'])
def toggleTakeScreenshot = findTestObject('Object Repository/Page_TestOverview/switch_TakeScreenshot')
def takeScreenshotConfirmModal = findTestObject('Object Repository/Page_TestOverview/modal_Confirm_TakeScreenshot')

WebUI.comment('Step 1: Click an ongoing test on the Tests listing page ')
if (true) {
	WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
	try {
		WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
	}
	catch (Exception e) {
		WebDriver driver = DriverFactory.getWebDriver()
		WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
		JavascriptExecutor executor = ((driver) as JavascriptExecutor)
		executor.executeScript('arguments[0].click()', element)
	}
}

WebUI.comment('Step 2: Verify System redirects to Test details, Overview tab')
WebUI.waitForElementVisible(testOverviewContainer, 3, FailureHandling.CONTINUE_ON_FAILURE)

WebUI.comment('Step 3: Verify Test Access: ON')
if (true) {
	WebUI.scrollToElement(testAccessibleLabel, 3, FailureHandling.CONTINUE_ON_FAILURE)
	def accessible = WebUI.getText(testAccessibleLabel, FailureHandling.STOP_ON_FAILURE)
	WebUI.verifyMatch(accessible, ""On"", false)
}

WebUI.comment('Step 4: Verify non-editable fields.')
if (true) {
	WebUI.comment('Test Name')
	if (true) {
		WebUI.verifyElementNotPresent(pencilIconOfTestName, 3, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Test Duration')
	if (true) {
		WebUI.verifyElementNotPresent(pencilIconOfTestDuration, 3, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Test Type')
	if (true) {
		WebUI.verifyElementNotPresent(pencilIconOfTestType, 3, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Test Link')
	if (true) {
		WebUI.verifyElementNotPresent(pencilIconOfTestLink, 3, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Practice Test Link')
	if(true) {
		WebUI.verifyElementNotPresent(pencilIconOfTestPracticeLink, 3, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Tags')
	if(true) {
		WebUI.verifyElementNotPresent(pencilIconOfTestTags, 3, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Test Description')
	if (true) {
		WebUI.verifyElementNotPresent(pencilIconOfTestDescription, 3, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Test Instruction')
	if (true) {
		WebUI.verifyElementNotPresent(pencilIconOfTestInstructions, 3, FailureHandling.CONTINUE_ON_FAILURE)
	}
	
	WebUI.comment('Settings')
	if (true) {
		WebUI.scrollToElement(toggleTakeScreenshot, 3, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.click(toggleTakeScreenshot, FailureHandling.CONTINUE_ON_FAILURE)
		WebUI.verifyElementNotPresent(takeScreenshotConfirmModal, 3, FailureHandling.CONTINUE_ON_FAILURE)
	}
}
"
79,View ongoing tests,TC080,TC080_View Ongoing test on Question tab_P2,There is at least one ongoing test >Click an ongoing test on Tests listing page > Navigate to Question tab > Verify editable,,P2,Yes,
80,View ongoing tests,TC081,TC081_View Ongoing test on Email Template tab_P2,There is at least one ongoing test >Click an ongoing test on Tests listing page > Navigate to Email Template tab > Verify editable,,P2,Yes,
81,Complete tests,TC082,TC082_Verify Complete tests Successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. Change the test name to ""Test Complete Test""
4. On draft test, hit button [Publish Test]
5. Click [OK] on Publish test dialog
6. Verify toast message displays ""Publish test successfully.""
7. Click on the 3 dots menu ... on the top right
8. Select option [Complete test]
9. Verify confirmation dialog ""Complete test"" appears
10. Click [OK]
11. Verify toast message displays ""Complete test successfully.""
12. Verify status of current test (on top of the test) should be ""Completed""
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import org.openqa.selenium.Keys as Keys
import com.kms.katalon.core.annotation.SetUp as SetUp
import com.kms.katalon.core.annotation.TearDown as TearDown
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

@SetUp
def setUp() {
	WebUI.comment('User must be logged in to the system successfully ')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'), null)
	
	WebUI.comment('There is at least one ongoing test')
	WebUI.waitForElementPresent(findTestObject('Object Repository/Module_Navigation/nav_item_tests'), 30)
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Add Test'), null)
	WebUI.waitForElementPresent(findTestObject('Page_TestOverview/toast_Successfully'), 10)
	WebUI.click(findTestObject('Page_TestOverview/toast_Successfully'))
	
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestOverview/btn_PublishTest'), 30)
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_PublishTest'))
	
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestOverview/btn_Confirm'), 30)
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Confirm'))
	
	WebUI.waitForElementPresent(findTestObject('Page_TestOverview/toast_Successfully'), 30)
	WebUI.click(findTestObject('Page_TestOverview/toast_Successfully'))
}

@TearDown
def tearDown() {
	WebUI.comment('Delete the completed test.')	
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 30)
	testName = WebUI.getText(findTestObject('Object Repository/Page_TestOverview/txt_TestName'))
	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': testName])
}

WebUI.comment('Click complete test')

WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestOverview/btn_OptionDropdown'), 10)
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_OptionDropdown'))
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Option', [('optionName') : 'Complete test']))

WebUI.comment('Verify System shows a confirmation message')
WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestOverview/modal_Confirm'), 10)

WebUI.comment('Click Confirm')
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Confirm'))

WebUI.comment('Verify')

WebUI.comment('Popup is closed, Show successful message and reload the current page.')
WebUI.waitForElementPresent(findTestObject('Page_TestOverview/toast_Successfully'), 10)
WebUI.verifyElementText(findTestObject('Page_TestOverview/toast_Successfully'), 'Complete test successfully.')


WebUI.comment('Change test status to “Completed')
WebUI.verifyElementText(findTestObject('Object Repository/Page_TestOverview/span_TestStatus'), 'Completed')
"
82,Complete tests,TC083,TC083_Verify Complete tests Unsuccessfully_P2,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.

Steps:
1. Click on the Tests link from left menu.
2. Click on the Create Test button.
3. Click on the Publish Test button.
4. Click on the OK button to confirm.
5. Click on 3 dots button.
6. Click on Complete test option.
7. Click on Cancel button on the confrmation dialog.

Expected result
- User backs to Ongoing Test details page.
- Test status is ""Ongoing"".
",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import org.openqa.selenium.Keys as Keys
import com.kms.katalon.core.annotation.SetUp as SetUp
import com.kms.katalon.core.annotation.TearDown as TearDown
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

@SetUp
def setUp() {
	WebUI.comment('User must be logged in to the system successfully ')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'), null)
	
	WebUI.comment('There is at least one ongoing test')
	WebUI.waitForElementPresent(findTestObject('Object Repository/Module_Navigation/nav_item_tests'), 30)
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Add Test'), null)
	WebUI.waitForElementPresent(findTestObject('Page_TestOverview/toast_Successfully'), 10)
	WebUI.click(findTestObject('Page_TestOverview/toast_Successfully'))
	
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestOverview/btn_PublishTest'), 30)
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_PublishTest'))
	
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestOverview/btn_Confirm'), 30)
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Confirm'))
}

@TearDown
def tearDown() {
	WebUI.comment('Delete the completed test.')	
	WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 30)
	testName = WebUI.getText(findTestObject('Object Repository/Page_TestOverview/txt_TestName'))
	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': testName])
}

WebUI.comment('Click complete test')
WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestOverview/btn_OptionDropdown'), 10)
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_OptionDropdown'))
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Option', [('optionName') : 'Complete test']))

WebUI.comment('Verify System shows a confirmation message')
WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestOverview/modal_Confirm'), 10)

WebUI.comment('Click Cancel')
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_CancelConfirmModal'))


WebUI.comment('Verify')

WebUI.comment('Popup is closed and do nothing')
WebUI.waitForElementNotPresent(findTestObject('Object Repository/Page_TestOverview/modal_Confirm'), 10)

"
83,"View completed tests
",TC084,TC084_View Completed tests on Overview tab_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. Change the test name to ""Test Complete Test in Overview""
4. On draft test, hit button [Publish Test]
5. Click [OK] on Publish test dialog
6. Verify toast message displays ""Publish test successfully.""
7. Click on the 3 dots menu ... on the top right
8. Select option [Complete test]
9. Verify confirmation dialog ""Complete test"" appears
10. Click [OK]
11. Verify toast message displays ""Complete test successfully.""
12. Go back to Tests page by clicking tab Tests on side nav.
13. Enter text ""Test Complete Test in Overview"" to the searchbox
14. Hit search icon and you should see the completed test
15. Open found completed test
16. On the Overview tab of complete test, verify toggle ""Test Access"" is not clickable
",P1,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows

import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys
import com.database.Database as DB
import org.openqa.selenium.WebElement as WebElement
import org.openqa.selenium.By as By
import org.openqa.selenium.WebDriver as WebDriver
import com.kms.katalon.core.webui.driver.DriverFactory as DriverFactory
import com.kms.katalon.core.util.KeywordUtil as KeyworUtil
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import org.openqa.selenium.JavascriptExecutor

import groovy.transform.Field
import generator.DynamicGenerator
@Field String randomString = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@SetUp()
def setUp() {
	WebDriver driver = DriverFactory.getWebDriver()
	'Login'
	WebUI.comment('Precondition: User already logged in')

	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'), [('Email') : GlobalVariable.G_Email, ('Password') : GlobalVariable.G_Password],
		FailureHandling.STOP_ON_FAILURE)
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Insert Test To DB'), ['testData':testData,'randomString':randomString])
}
@TearDown()
def tearDown() {
	'delete the test after done'
	def testName = WebUI.getText(findTestObject('Object Repository/Page_AddTest/txt_TestName'))
	def testId = WebUI.getText(findTestObject('Object Repository/Page_AddTest/txt_testID'))
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': testName,'name':testId])
}
""click on Tests sidebar""
WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
""Click on draft test""
WebUI.click(findTestObject('Object Repository/Page_SearchTests/nav_testStatus',[""order"":2]))

def testSpanElements = findTestObject('Object Repository/Page_SearchTests/txt_testName',['testName':randomString+""_""+testName])

WebUI.waitForElementPresent(testSpanElements, 10, FailureHandling.STOP_ON_FAILURE)
WebUI.scrollToElement(testSpanElements, 30, FailureHandling.STOP_ON_FAILURE)

WebDriver driver = DriverFactory.getWebDriver()
WebElement element = WebUiCommonHelper.findWebElement(testSpanElements, 5)
JavascriptExecutor executor = ((driver) as JavascriptExecutor)
executor.executeScript('arguments[0].click()', element)

def attribute = WebUI.getAttribute(findTestObject('Object Repository/Page_TestOverview/btn_Overview'), 'class')

'Verify if  attribute value is active'
WebUI.verifyMatch(attribute, 'active btn btn-outline-primary d-block w-100 text-left mt-2', false)

'Verify test accessible is of and not editable'
WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TestOverview/switch_TestAccessible_Disable'), 3)"
84,"View completed tests
",TC085,TC085_View Completed tests on Question tab_P2,There is at least one completed test. > Click a completed test on Tests listing page > Navigate to Question tab > Verify non-editable on this tab,,P2,Yes,
85,"View completed tests
",TC086,TC086_View Completed tests on Email Template tab_P2,There is at least one completed test. > Click a completed test on Tests listing page > Navigate to Email Template tab > Verify non-editable on this tab,,P2,Yes,
86,Create question pool for practice test,TC087,TC087_Verify Questions are from practice test pool_P2,There is at least one test with type invite-only > Click Preview test > On Enter the test: click Practice test link > On the practice test: Verify Questions are from practice test pool,,P2,Yes,
87,Take invite-only practice tests,TC088,TC088_Verify Practice test can access from Practice test link_P1,Verify login successfully with valid credentials,"Pre-condition:
 - User has logged in to OnTest successfully.
 
 Steps:
1. Click on the Tests link from the left menu.
2. Click on the Create Test button at top right of the page.
3. Click on Questions button under Test 
4. Click on Add New Question button.
5. Input valid values to all required fields.
6. Click on Add button to create a new question.
7. Click on Add New Question button again.
8. Input valid value to all required fields.
9. Click on Add button to create a second new question.
10. Click on Publish Test button
11. Click on OK button to confirm.
12. Click on Preview icon at top right of the page.
113. Click on Practice Test link on the page.

Expected result: 
- Test name displays on top left page is Practice Test.
- Question type displays: 2 Multiple Choice",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB

@SetUp()
def setUp( ) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Click questions in the left sidebar'
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
	
	'Add one mcq'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create MCQ'), null)
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_PreviewTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), ['id': id])
}

'Back to Overview'
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Overview'))

'Get the id of test'
def id = WebUI.getAttribute(findTestObject('Object Repository/Page_AddTest/txt_TestName'), 'data-id')

'publish test'
WebUI.callTestCase(findTestCase('Common Test Cases/Test/Publish Test'), null)

'Click preview test'
WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'), 10)
WebUI.delay(2)
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'))

'Click practice test link'
WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/link_PracticeTest'), 10)
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/link_PracticeTest'))

'Verify total question in question type'
def text
if (true) {
	'Verify if there is one mcq'
	text = WebUI.getText(findTestObject('Object Repository/Page_PreviewTest/txt_QuestionType', ['order': 1]))
	WebUI.verifyMatch(text, ""1 Multiple Choice"", false)
}

'Verify test name'
if (true) {
	def previewTestName = WebUI.getText(findTestObject('Object Repository/Page_PreviewTest/txt_TestName'))
	WebUI.verifyMatch(previewTestName, 'Practice Test', false)
}

'Verify test duration (default duration of a newly created test is one minute)'
if (true) {
	text = WebUI.getText(findTestObject('Object Repository/Page_PreviewTest/txt_Duration'))
	WebUI.verifyMatch(text, ""00:30:00"", false)
}"
88,Take invite-only practice tests,TC089,TC089_Verify UI on Practice test_P3,On the practice test: Verify UI design as Preview test + Candidate feedback page,,P3,Yes,
89,Take invite-only practice tests,TC090,TC090_Verify Setting_P2,On the practice test: Verify Setting,,P2,Yes,
90,Take invite-only practice tests,TC091,TC091_Verify The Question types in Practice test_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Test Preview Link"" has been created in the system
- Add 1 MCQ to above test
- Add 1 Subjective question to above test
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Enter text ""Test Preview Link"" to the searchbox
3. Open found draft test
4. Hit button [Publish Test]
5. Click [OK] on Publish test dialog
6. Open the preview mode by clicking on the eye icon on the top
7. Scroll down to the bottom of page
8. Click on the hyperlink says ""practice test""
9. Wait for practive test mode is loaded successfully

Expected result
- Check the question type section on the page
+ Total MCQ item is 1
+ Total Subjective question is 1
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB

@SetUp()
def setUp( ) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Click questions in the left sidebar'
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
	
	'Add one subjective questions'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create Question'), null)
	
	'Add one mcq'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create MCQ'), null)
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_PreviewTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), ['id': id])
}

'Back to Overview'
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Overview'))

'Get the id of test'
def id = WebUI.getAttribute(findTestObject('Object Repository/Page_AddTest/txt_TestName'), 'data-id')

'Publish test'
WebUI.callTestCase(findTestCase('Common Test Cases/Test/Publish Test'), null)

'Click preview test'
WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'), 10)
WebUI.delay(2)
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'))

'Click practice test link'
WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/link_PracticeTest'), 10)
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/link_PracticeTest'))

'Verify total question in question type'
def text
if (true) {
	'Verify if there is one mcq'
	text = WebUI.getText(findTestObject('Object Repository/Page_PreviewTest/txt_QuestionType', ['order': 1]))
	WebUI.verifyMatch(text, ""1 Multiple Choice"", false)
	'Verify if there is two subjectives'
	text = WebUI.getText(findTestObject('Object Repository/Page_PreviewTest/txt_QuestionType', ['order': 2]))
	WebUI.verifyMatch(text, ""1 Subjective"", false)
}"
91,Take invite-only practice tests,TC092,TC092_Verify Questions are from practice test pool_P3,"On Enter the test: Verify Questions are from practice test pool, No. of question/ question type: 1",,P3,Yes,
92,Take invite-only practice tests,TC093,TC093_Verify completion of Practice test_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.

Steps:
1. Click on the Tests link from left menu.
2. Click on the Create Test button.
3. Click on the Publish Test button.
4. Click on the OK button to confirm.
5. Click on Preview button.
6. Click on Practice link on the page.
7. Click on Enter test button.
8. Click on Start test button.
9. Click on submit button at top right of the page.
10. Click on OK button to confirm.
11. Select rating on Rating page.
12. Input some comment on Additional Comments field.
13. Click on Submit button.

Expected result
- User backs to Test Preview page.
- Enter test button displays.
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import java.awt.Robot;
import java.awt.event.KeyEvent;
import com.database.Database as DB

@SetUp()
def setUp( ) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Click questions in the left sidebar'
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
	
	'Add one mcq'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create MCQ'), null)
}

@TearDown()
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_PreviewTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), ['id': id])
}

'Back to Overview'
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Overview'))

'Get the id of test'
def id = WebUI.getAttribute(findTestObject('Object Repository/Page_AddTest/txt_TestName'), 'data-id')

'publish test'
WebUI.callTestCase(findTestCase('Common Test Cases/Test/Publish Test'), null)

'Click preview test'
WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'), 10)
WebUI.delay(2)
WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'))

'Click practice test link'
WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/link_PracticeTest'), 10)
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/link_PracticeTest'))

'Click Enter Test'
WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/btn_EnterTest'), 10)
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_EnterTest'))

'Wait for 1mins'
WebUI.delay(60)

'Click Start Test'
WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/btn_StartTest'), 10)
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_StartTest'))

'Click submit'
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_Submit'))

'Click ok'
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_OK'))

'Verify system navigates to the Candidate feedback page'
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_PreviewTest/img_Success'), 10)

'Enter feedback'
WebUI.setText(findTestObject('Object Repository/Page_PreviewTest/textarea_Feedback'), 'This is feedback')

'Click submit'
WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/btn_SubmitFeedback'), 10)
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_SubmitFeedback'))

'Verify if the system redirects user back to preview the test'
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_PreviewTest/Span_PreviewStatus'), 10)

'Verify if ""Enter Test"" button is displayed'
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_PreviewTest/btn_EnterTest'), 10)"
93,Take invite-only practice tests,TC094,TC094_Verify answers and feedback are not saved_P2,"On the practice test: Verify answers are not saved, feedback is not saved, can be reset answers",,P2,Yes,
94,Add candidates to invite list via email ID,TC095,TC095_Invite Candidates from ongoing test_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Test Invite Candidates"" has been created in the system
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, scrolldown to the bottom of the page 
3. Click ""Show more"" on the bottom of the page until you see your test card ""Test Invite Candidates""
3. Click to open the draft test which has been found
4. Hit button [Publish Test]
5. Click [OK] on Publish test dialog
6. Click on button ""Invite Candidates""
7. Verify the breadcrumb parts

Expected result
- You are on Inviate Candidates page
- Breadcrumb parts should match
+ Part1: ""Tests""
+ Part 2: ""Test Invite Candidates""
+ Part 3: ""Invite Candidates""
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC1 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	
	WebUI.comment('There is at least one ongoing test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
	
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	
	WebUI.comment('Step 1: Click an ongoing test on the Tests listing page.')
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
}

@TearDown
def teardown() {
	WebUI.comment('Remove the ongoing tested test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
}

def inviteCandidatesButton = findTestObject('Object Repository/Page_TestOverview/btn_Invite_Candidates')
def heading = findTestObject('Object Repository/Page_InviteCandidates/title_HeadingTitle')
def breadcrumb = findTestObject('Object Repository/Module_Navigation/breadcrumb')

WebUI.comment('Step 1: Click the Invite Candidates button')
WebUI.scrollToElement(inviteCandidatesButton, 3)
WebUI.click(inviteCandidatesButton)

WebUI.comment('Step 2: System navigates to Invite Candidates page, Verify Name page, menu')
if (true) {
	def givenHeadingText = WebUI.getText(heading)
	WebUI.verifyMatch(givenHeadingText, expectedHeading, false)
	
	WebDriver driver = DriverFactory.getWebDriver();
	JavascriptExecutor executor = (JavascriptExecutor)driver;
	
	def breadcrumbPart1 = executor.executeScript(""return document.evaluate('//*[@aria-label=\""breadcrumb\""]//li[2]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.innerText"")
	def breadcrumbPart2 = executor.executeScript(""return document.evaluate('//*[@aria-label=\""breadcrumb\""]//li[3]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.innerText"")
	def breadcrumbPart3 = executor.executeScript(""return document.evaluate('//*[@aria-label=\""breadcrumb\""]//li[4]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.innerText"")
	
	WebUI.verifyMatch(breadcrumbPart1, ""Tests"", false)
	WebUI.verifyMatch(breadcrumbPart2, validNameUnique, false)
	WebUI.verifyMatch(breadcrumbPart3, ""Invite Candidates"", false)
}


WebUI.comment('Step 3: Take Screenshot As Checkpoint')
WebUI.takeScreenshot()
"
95,Add candidates to invite list via email ID,TC096,TC096_Verify Add candidate in Invite list successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system.

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page.
3. Click on the Invite Candidates button at top right of the page.
4. Click on Add button.
5. Input Email ID and Full Name to Candidate field
ex: johna@gmail.com john a
6. Click on Add button.
Expected result
- The candidate is added to the page.
- Successfully message displays as ""Add candidate successfully"".
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@gmail.com""
@Field String validName = ""Hoa Pham""
@Field String validEmailAndFullName = validEmail + "" "" + validName

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	def inviteCandidatesButton = findTestObject('Object Repository/Page_TestOverview/btn_Invite_Candidates')
	
	WebUI.comment('There is at least one ongoing test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
	
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	
	WebUI.comment('Click an ongoing test on the Tests listing page.')
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
	
	WebUI.comment('Click the Invite Candidates button')
	WebUI.scrollToElement(inviteCandidatesButton, 3)
	WebUI.click(inviteCandidatesButton)
}

@TearDown
def teardown() {
	WebUI.comment('Remove all candidates')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Invite List/Delete All Candidates From Invite List'), null)
	
	WebUI.comment('Remove the ongoing tested test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
}

def addCandidatesButton = findTestObject('Object Repository/Page_InviteCandidates/btn_AddCandidates')
def addCandidatesModal = findTestObject('Object Repository/Page_InviteCandidates/modal_AddCandidates')
def inputAddCandidates = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/input_AddCandidates')
def addButton = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/btn_Add')
def successToast = findTestObject('Object Repository/Module_Navigation/toast_Success')
def newRowData = findTestObject('Object Repository/Page_InviteCandidates/row_CandidateInfo', [""lineNumber"": ""1""])
def email = findTestObject('Object Repository/Page_InviteCandidates/td_EmailByLineNumber', [""lineNumber"": ""1""])
def name = findTestObject('Object Repository/Page_InviteCandidates/td_NameByLineNumber',  [""lineNumber"": ""1""])
def checkbox = findTestObject('Object Repository/Page_InviteCandidates/checkbox_InviteListCheckBoxByLineNumber', [""lineNumber"": ""1""])

WebUI.comment('Step 1: On the Invite Candidates page: Click Add button')
WebUI.click(addCandidatesButton)

WebUI.comment('Step 2: Verify Add Candidate popup is displayed')
WebUI.verifyElementVisible(addCandidatesModal)

WebUI.comment('Step 3: Enter valid candidate’s details (email and full name)')
WebUI.setText(inputAddCandidates, validEmailAndFullName)

WebUI.comment('Step 4: Click Add')
WebUI.click(addButton)

WebUI.comment('Step 5: Verify Close popup, show the successful message, Create candidate tests with status “New”, Add candidates in Invite list in Invite Candidates page (ticked by default).')
if (true) {
	WebUI.comment('show the successful message')
	def givenMessage = WebUI.getText(successToast)
	WebUI.verifyMatch(givenMessage, expectedSuccessMessage, false)
	
	WebUI.comment('Verify Close popup')
	WebUI.verifyElementNotPresent(addCandidatesModal, 5)
	
	WebUI.comment('Create candidate tests with status “New”, Add candidates in Invite list in Invite Candidates page (ticked by default)')
	WebUI.verifyElementVisible(newRowData)
	def givenEmail = WebUI.getText(email)
	def givenName = WebUI.getText(name)
	def isChecked = WebUI.getAttribute(checkbox, ""aria-checked"")
	WebUI.verifyMatch(givenEmail, validEmail, false)
	WebUI.verifyMatch(givenName, validName, false)
	WebUI.verifyMatch(isChecked, ""true"", false)
}




"
96,Add candidates to invite list via email ID,TC097,TC097_Verify error message when Add candidate with invalid data_P2,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Test Invite Candidates Error"" has been created in the system
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, scrolldown to the bottom of the page 
3. Click ""Show more"" on the bottom of the page until you see your test card ""Test Invite Candidates Error""
3. Click to open the draft test which has been found
4. Hit button [Publish Test]
5. Click [OK] on Publish test dialog
6. Click on button ""Invite Candidates""
7. Click button [Add] to open Add Candidates dialog
8. Do not enter any things to the text box
9. Click button [Add] on the dialog

Expected result
- Error message displays ""This field is required.""
",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@gmail.com""
@Field String validName = ""Hoa Pham""
@Field String validEmailAndFullName = validEmail + "" "" + validName

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	def inviteCandidatesButton = findTestObject('Object Repository/Page_TestOverview/btn_Invite_Candidates')
	
	def addCandidatesButton = findTestObject('Object Repository/Page_InviteCandidates/btn_AddCandidates')
	def addCandidatesModal = findTestObject('Object Repository/Page_InviteCandidates/modal_AddCandidates')
	def inputAddCandidates = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/input_AddCandidates')
	def addButton = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/btn_Add')
	
	WebUI.comment('There is at least one ongoing test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
	
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	
	WebUI.comment('Click an ongoing test on the Tests listing page.')
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
	
	WebUI.comment('Click the Invite Candidates button')
	WebUI.click(inviteCandidatesButton)
}

@TearDown
def teardown() {
	WebUI.comment('Remove the ongoing tested test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
}

def addCandidatesButton = findTestObject('Object Repository/Page_InviteCandidates/btn_AddCandidates')
def addCandidatesModal = findTestObject('Object Repository/Page_InviteCandidates/modal_AddCandidates')
def inputAddCandidates = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/input_AddCandidates')
def addButton = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/btn_Add')
def invalidFeedback = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/span_InvalidFeedback')

WebUI.comment('Step 1: On the Invite Candidates page: Click Add button')
WebUI.click(addCandidatesButton)

WebUI.comment('Step 2: Verify Add Candidate popup is displayed')
WebUI.verifyElementVisible(addCandidatesModal)

WebUI.comment('Step 3: Enter invalid candidate’s details (email and full name)')
WebUI.setText(inputAddCandidates, invalidEmailAndFullName)

WebUI.comment('Step 4: Click Add')
WebUI.click(addButton)

WebUI.comment('Step 5: Verify error message:')
def givenErrorMessage = WebUI.getText(invalidFeedback)
WebUI.verifyMatch(givenErrorMessage, expectedErrorMessage, false)



"
97,Add candidates to invite list via email ID,TC098,TC098_Verify Add candidate in Invite list unsuccessfully by Cancel_P3,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system.

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page.
3. Click on the Invite Candidates button at top right of the page.
4. Click on Add button.
5. Input Email ID and Full Name to Candidate field
ex: johna@gmail.com john a
6. Click on Cancel button.
Expected result
- The candidate is not added to the page.
- The Add Candidates popup is closed.
",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	def inviteCandidatesButton = findTestObject('Object Repository/Page_TestOverview/btn_Invite_Candidates')
	
	WebUI.comment('There is at least one ongoing test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
	
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	
	WebUI.comment('Click an ongoing test on the Tests listing page.')
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
	
	WebUI.comment('Click the Invite Candidates button')
	WebUI.click(inviteCandidatesButton)
}

@TearDown
def teardown() {
	WebUI.comment('Remove the ongoing tested test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
}

def addCandidatesButton = findTestObject('Object Repository/Page_InviteCandidates/btn_AddCandidates')
def addCandidatesModal = findTestObject('Object Repository/Page_InviteCandidates/modal_AddCandidates')
def cancelButton = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/btn_Cancel')

WebUI.comment('Step 1: On the Invite Candidates page: Click Add button')
WebUI.click(addCandidatesButton)

WebUI.comment('Step 2: Verify Add Candidate popup is displayed')
WebUI.verifyElementVisible(addCandidatesModal)

WebUI.comment('Step 3: Click Cancel')
WebUI.click(cancelButton)

WebUI.comment('Step 5: Verify Close popup and do nothing')
WebUI.verifyElementNotPresent(addCandidatesModal, 5)

"
98,Add candidates to invite list via email ID,TC099,TC099_Verify UI on Invite Candidates page_P2,"On Invite Candidates page: Verify UI matches wireframe, Invite Expiry: Default value: No expiry. Values of expiry period: 1 day, 3 days, 5 days, 1 week, 2 weeks, 3 weeks.",,P2,Yes,
99,Add candidates to invite list via email ID,TC100,TC100_Verify UI on Add Candidate popup_P2,On Add Candidate popup: Verify UI matches wireframe,,P2,Yes,
100,Add candidates to invite list via email ID,TC101,TC101_Verify Add multiple Candidate popup_P3,"On Add Candidate popup: Verify Allow to add multiple candidates at a time (each candidate in a line), Email and Full name are separated by space.",,P3,Yes,
101,Take invite-only tests,TC102,TC102_Verify Can access Test from the link in email_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Test Link Invite"" has been created in the system
- Above draft test is added one multiple choice question
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, scrolldown to the bottom of the page 
3. Click ""Show more"" on the bottom of the page until you see your test card ""Test Link Invite""
3. Click to open the draft test which has been found
4. Hit button [Publish Test]
5. Click [OK] on Publish test dialog
6. Click on button ""Invite Candidates""
7. Click button [Add] to open Add Candidates dialog
8. Enter valid test email address into textbox
9. Hit spacebar
10. Enter the candidate name such as ""Link Test""
11. Clicck Add
12. Scrolldown to bottom and click button ""Invite""
13. Click OK on the Invidate candidates confirmation dialog
13. Check your testing email box
14. Open the invite link in the email

Expected result
- Link is opened successfully
- Button ""Enter Text"" is clickable
",P1,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp()
def setUp( ) {	
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Invite'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Invite Candidate With MCQ Question'), ['name':validNameUnique, 'email':validEmail,'inviteName':validName, 'duration':false , 'multipe': false ])
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
	'Delete the candidate and test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test'), ['testName': validNameUnique, 'email':validEmail])
}
def getTestUrl() {
	def url = StringBuilder.newInstance()
	url<<GlobalVariable.G_SiteURL
	url<<""/challenge""
	def query = ""SELECT assignment.id from assignment JOIN candidate on assignment.\""candidateId\"" = candidate.id where email = '${validEmail}';""
	def assignmentId = DB.execute(query).get(0).get(0)
	query = ""SELECT token from candidate where email = '${validEmail}';""
	def candidateToken = DB.execute(query).get(0).get(0)
	url<<""/${assignmentId}?token=${candidateToken}""
	println(url)
	return url.toString()
}
def url = getTestUrl()
WebUI.openBrowser(url)
WebUI.waitForPageLoad(15, FailureHandling.CONTINUE_ON_FAILURE)
WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Enter Test'), 0, FailureHandling.STOP_ON_FAILURE)"
102,Take invite-only tests,TC103,TC103_Verify Allow only 1 test session at a time_P2,Verify Allow only 1 test session at a time to handle the case when someone takes the test on behalf of the candidate.,,P2,Yes,
103,Take invite-only tests,TC104,TC104_Verify If the tab where candidate is doing the test is closed_P2,"Verify If the tab where candidate is doing the test is closed after the test is started, candidate can access the test again but the timer will continue from the last attempt.",,P2,Yes,
104,Take invite-only tests,TC105,TC105_Verify Webcame if the test requires_P2,"On Enter the test: Verify If the test requires taking snapshots, the system checks if the webcam can be accessed.",,P2,Yes,
105,Take invite-only tests,TC106,TC106_Verify Webcame the test don't require_P3,"On Enter the test: Verify If the test doesn't require taking snapshots, the system doesn't check if the webcam can be accessed.",,P3,Yes,
106,Take invite-only tests,TC107,TC105_Verify Start Test is available after 1 min_P3,On Read instructions: Verify Default time to read instructions: 1 min. > After 1 min: Start Test is available > Click “Start Test” > Solve questions is displayed,,P3,Yes,
107,Take invite-only tests,TC108,TC108_Verify Candidate test status change from Invited to Testing_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Invite Candidates button at top right of the page.
4. Click on Add button.
5. Input Email ID and Full Name to Candidate field
ex: hnguyen@gmail.com h nguyen
6. Click on Add button.
7. Tick on checkbox to select the candidate on Invite Candidates page.
8. Click on Invite button at the bottom of the page.
9. Click on Ok button to confirm.
10. Open the invited link from candidate's mailbox.
11. Click on Enter test button as candidate role.
12. Click on Start test button as candidate role.
13. Go to Ongoing Test again (""InviteTest"") as Admin role.
14. Click on Testing option under Candidates section.

Expected result
- The candidate hnguyen@gmail.com is displaying in Testing status.
- User receives a information email that the test is completed.",P1,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp()
def setUp( ) {	
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Invite'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Invite Candidate With MCQ Question'), ['name':validNameUnique, 'email':validEmail,'inviteName':validName, 'duration':false , 'multipe': false ])
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
	'Delete the candidate and test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test'), ['testName': validNameUnique, 'email':validEmail])
	
}
def getTestUrl() {
	def url = StringBuilder.newInstance()
	url<<GlobalVariable.G_SiteURL
	url<<""/challenge""
	def query = ""SELECT assignment.id from assignment JOIN candidate on assignment.\""candidateId\"" = candidate.id where email = '${validEmail}';""
	def assignmentId = DB.execute(query).get(0).get(0)
	query = ""SELECT token from candidate where email = '${validEmail}';""
	def candidateToken = DB.execute(query).get(0).get(0)
	url<<""/${assignmentId}?token=${candidateToken}""
	println(url.toString().getClass())
	return url.toString()
}

def url = getTestUrl()
WebUI.openBrowser(url)
WebUI.waitForPageLoad(15, FailureHandling.CONTINUE_ON_FAILURE)
WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Enter Test'), 10, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Enter Test'))

WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Start Test'), 65, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Start Test'))
WebUI.delay(10)
WebUI.openBrowser(GlobalVariable.G_SiteURL)

WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Navigate To Candidate'),['status':'Testing','testName':validNameUnique])

WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Email Cell',['email':validEmail]), 10, FailureHandling.STOP_ON_FAILURE)"
108,Take invite-only tests,TC109,TC109_Verify answers are auto saved during the test_P2,On Solve Problem: Verify My answers are auto saved during the test (save when there is a change),,P2,Yes,
109,Take invite-only tests,TC110,TC110_Verify Can reset answers_P3,On Solve Problem: Can reset answers,,P3,Yes,
110,Take invite-only tests,TC111,TC111_Verify Submit Test on time_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Test Submit Test"" has been created in the system
- Above draft test is added one multiple choice question
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, scrolldown to the bottom of the page 
3. Click ""Show more"" on the bottom of the page until you see your test card ""Test Submit Test""
3. Click to open the draft test which has been found
4. Hit button [Publish Test]
5. Click [OK] on Publish test dialog
6. Click on button ""Invite Candidates""
7. Click button [Add] to open Add Candidates dialog
8. Enter valid test email address into textbox
9. Hit spacebar
10. Enter the candidate name such as ""Link Test""
11. Click Add
12. Scrolldown to bottom and click button ""Invite""
13. Click OK on the Invite candidates confirmation dialog
14. Check your testing email box
15. Open the invite link in the email
16. Hit [Enter Test]
17. Click [Start Test]
18. Hit [Submit] button on the top right corner
19. Verify dialog Submit Test appears
20. Click [Submit]

Expected result
- Prompt text ""Are you sure you want to submit the test? You still have $time minutes left"" with $time is the remaining time user have
- After clicking Submit, you should be redirected to confirm page and you can submit Comment
",P1,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp()
def setUp( ) {	
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Invite'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Invite Candidate With MCQ Question'), ['name':validNameUnique, 'email':validEmail,'inviteName':validName, 'duration':false ])
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
	'Delete the candidate and test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test'), ['testName': validNameUnique, 'email':validEmail])
}
def getTestUrl() {
	def url = StringBuilder.newInstance()
	url<<GlobalVariable.G_SiteURL
	url<<""/challenge""
	def query = ""SELECT assignment.id from assignment JOIN candidate on assignment.\""candidateId\"" = candidate.id where email = '${validEmail}';""
	def assignmentId = DB.execute(query).get(0).get(0)
	query = ""SELECT token from candidate where email = '${validEmail}';""
	def candidateToken = DB.execute(query).get(0).get(0)
	url<<""/${assignmentId}?token=${candidateToken}""
	println(url.toString().getClass())
	return url.toString()
}

def url = getTestUrl()
WebUI.openBrowser(url)
WebUI.waitForPageLoad(15, FailureHandling.CONTINUE_ON_FAILURE)
WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Enter Test'), 10, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Enter Test'))

WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Start Test'), 65, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Start Test'))
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Submit Test'))
def message = WebUI.getText(findTestObject('Object Repository/Page_TakeTest/txt_Submit Test Message'))
WebUI.verifyMatch(message, '^Are you sure you want to submit the test?.*minutes left$', true, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Submit Test Ok'))
WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Sumitted Message'), 30, FailureHandling.STOP_ON_FAILURE)"
111,Take invite-only tests,TC112,TC111_Verify Cancel Submit Test_P2,On Solve Problem: Submit the test before the duration ends. > System shows confirmation message: “Are you sure you want to submit the test? You still have <no. of remaining minutes> minutes left and <no. of unanswered questions if > 0> unanswered questions.” > Cancel> close popup and stay on the current screen. ,,P2,Yes,
112,Take invite-only tests,TC113,TC113_Verify Test timed out_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Invite Candidates button at top right of the page.
4. Click on Add button.
5. Input Email ID and Full Name to Candidate field
ex: hnguyen@gmail.com h nguyen
6. Click on Add button.
7. Tick on checkbox to select the candidate on Invite Candidates page.
8. Click on Invite button at the bottom of the page.
9. Click on Ok button to confirm.
10. Open the invited link from candidate's mailbox.
11. Click on Enter test button as candidate role.
12. Click on Start test button as candidate role.
13. Waiting until the testing time is ended.

Expected result
- The warning popup displays with message: ""The test has timed out. Your test will be submitted with the answers saved so far.""",P1,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp()
def setUp( ) {	
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Invite'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Invite Candidate With MCQ Question'), ['name':validNameUnique, 'email':validEmail,'inviteName':validName, 'duration':true, 'multipe':false ])
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
	'Delete the candidate and test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test'), ['testName': validNameUnique, 'email':validEmail])
	
}
def getTestUrl() {
	def url = StringBuilder.newInstance()
	url<<GlobalVariable.G_SiteURL
	url<<""/challenge""
	def query = ""SELECT assignment.id from assignment JOIN candidate on assignment.\""candidateId\"" = candidate.id where email = '${validEmail}';""
	def assignmentId = DB.execute(query).get(0).get(0)
	query = ""SELECT token from candidate where email = '${validEmail}';""
	def candidateToken = DB.execute(query).get(0).get(0)
	url<<""/${assignmentId}?token=${candidateToken}""
	println(url.toString().getClass())
	return url.toString()
}

def url = getTestUrl()
WebUI.openBrowser(url)
WebUI.waitForPageLoad(15, FailureHandling.CONTINUE_ON_FAILURE)
WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Enter Test'), 10, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Enter Test'))

WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Start Test'), 65, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Start Test'))
WebUI.waitForElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Alert Message'), 70)
def message = WebUI.getText(findTestObject('Object Repository/Page_TakeTest/txt_Alert Message'))
WebUI.verifyMatch(message, 'The test has timed out. Your test will be submitted with the answers saved so far.', false, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Alert_Ok'))
WebUI.waitForElementNotPresent(findTestObject('Object Repository/Page_TakeTest/div_Alert_Modal'), 10)"
113,Take invite-only tests,TC114,TC114_Verify Random snapshot_P2,"On Solve questions: Verify If proctoring snapshots are enabled for the test, they will be taken at random intervals during the test. ",,P2,Yes,
114,Take invite-only tests,TC115,TC115_Verify View webcame_P3,On Solve questions: Verify can click the webcam icon on the screen to view the webcam.,,P3,Yes,
115,Take invite-only tests,TC116,TC116_Verify Candidate test status change from “Testing” to “Submitted”_P2,"If the test can NOT be auto scored > Verify When submit the test, my finish time is saved, and status of my candidate test is changed from “Testing” to “Submitted”",,P2,Yes,
116,Take invite-only tests,TC117,TC117_Verify Candidate test status change from “Testing” to “Scored”_P2,"If the test can be auto scored > Verify When submit the test, my finish time is saved, and status of my candidate test is changed from “Testing” to “Scored” > System checks if the answers are correct > If yes, result is “True”, grant awarded scores. If no, result is “False”, grant subtracted scores.",,P2,Yes,
117,Remove candidates from invite list,TC118,TC118_Verify Remove candidate from invite list successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Remove Invite Candidate"" has been created in the system
- Above draft test is added one multiple choice question
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, scrolldown to the bottom of the page 
3. Click ""Show more"" on the bottom of the page until you see your test card ""Remove Invite Candidate""
3. Click to open the draft test which has been found
4. Hit button [Publish Test]
5. Click [OK] on Publish test dialog
6. Click on button ""Invite Candidates""
7. Click button [Add] to open Add Candidates dialog
8. Enter valid test email address into textbox
9. Hit spacebar
10. Enter the candidate name such as ""Link Test""
11. Clicck Add
12. Click button [Remove]
13. Wait to dialog Remove candidates appear


Expected result
- Remove candidate dialog is closed
- Message ""Remove candidates successfully."" displays
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest273 TC1 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@gmail.com""
@Field String validName = ""Hoa Pham""
@Field String validEmailAndFullName = validEmail + "" "" + validName

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	def inviteCandidatesButton = findTestObject('Object Repository/Page_TestOverview/btn_Invite_Candidates')
	
	def addCandidatesButton = findTestObject('Object Repository/Page_InviteCandidates/btn_AddCandidates')
	def addCandidatesModal = findTestObject('Object Repository/Page_InviteCandidates/modal_AddCandidates')
	def inputAddCandidates = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/input_AddCandidates')
	def addButton = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/btn_Add')
	
	WebUI.comment('There is at least one ongoing test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
	
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	
	WebUI.comment('Click an ongoing test on the Tests listing page.')
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
	
	WebUI.comment('Click the Invite Candidates button')
	WebUI.click(inviteCandidatesButton)
	
	WebUI.comment('Create a new candidates')
	//Click Add button
	WebUI.click(addCandidatesButton)
	
	// Verify Add Candidate popup is displayed
	WebUI.verifyElementVisible(addCandidatesModal)
	
	//Enter valid candidate’s details (email and full name)
	WebUI.setText(inputAddCandidates, validEmailAndFullName)
	
	// Click Add
	WebUI.click(addButton)
	
}

@TearDown
def teardown() {
	WebUI.comment('Remove the ongoing tested test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
	WebUI.delay(3)
}

def removeButton = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/btn_Remove')
def confirmRemoveModal = findTestObject('Object Repository/Page_InviteCandidates/modal_ConfirmRemove')
def confirmButton = findTestObject('Object Repository/Page_InviteCandidates/Confirm Remove Modal/btn_OK')
def successToast = findTestObject('Object Repository/Module_Navigation/toast_Success')

WebUI.delay(10)

WebUI.comment('Step 1 Click the Remove button')
WebUI.waitForElementPresent(removeButton, 5)
WebUI.click(removeButton)

WebUI.comment('Step 2: Verify System shows a confirmation message')
WebUI.waitForElementVisible(confirmRemoveModal, 5)

WebUI.comment('Step 3: Click confirm')
WebUI.click(confirmButton)

WebUI.comment('Step 4: Verify System show successful message, close popup, remove candidate(s) from invite list (delete candidate test).')
if (true) {
	WebUI.comment('Verify System show successful message')
	def givenSuccessMessage = WebUI.getText(successToast)
	WebUI.verifyMatch(givenSuccessMessage, expectedSuccessMessage, false)
	
	WebUI.comment('Close popup')
	WebUI.waitForElementNotPresent(confirmRemoveModal, 5)
	
	WebUI.comment('remove candidate(s) from invite list (delete candidate test).')
	WebUI.waitForElementNotPresent(removeButton, 5)
}



"
118,Remove candidates from invite list,TC119,TC119_Verify Remove candidate from invite list unsuccessfully by Cancel_P2,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Invite Candidates button at top right of the page.
4. Click on Add button.
5. Input Email ID and Full Name to Candidate field
ex: hnguyen@gmail.com h nguyen
6. Click on Add button.
7. Tick on checkbox to select the candidate on Invite Candidates page.
8. Click on Invite button at the bottom of the page.
9. Click on Remove button.
10. Click on Cancel button on the Remove candidates dialog.

Expected result
- The dialog is closed.
- The Candidate hnugyen@gmail.com is still in the Invite List.",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@gmail.com""
@Field String validName = ""Hoa Pham""
@Field String validEmailAndFullName = validEmail + "" "" + validName

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	def inviteCandidatesButton = findTestObject('Object Repository/Page_TestOverview/btn_Invite_Candidates')
	
	def addCandidatesButton = findTestObject('Object Repository/Page_InviteCandidates/btn_AddCandidates')
	def addCandidatesModal = findTestObject('Object Repository/Page_InviteCandidates/modal_AddCandidates')
	def inputAddCandidates = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/input_AddCandidates')
	def addButton = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/btn_Add')
	
	WebUI.comment('There is at least one ongoing test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
	
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	
	WebUI.comment('Click an ongoing test on the Tests listing page.')
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
	
	WebUI.comment('Click the Invite Candidates button')
	WebUI.click(inviteCandidatesButton)
	
	WebUI.comment('Create a new candidates')
	//Click Add button
	WebUI.click(addCandidatesButton)
	
	// Verify Add Candidate popup is displayed
	WebUI.verifyElementVisible(addCandidatesModal)
	
	//Enter valid candidate’s details (email and full name)
	WebUI.setText(inputAddCandidates, validEmailAndFullName)
	
	// Click Add
	WebUI.click(addButton)
	
}

@TearDown
def teardown() {
	WebUI.comment('Remove all candidates')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Invite List/Delete All Candidates From Invite List'), null)
	
	WebUI.comment('Remove the ongoing tested test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
	WebUI.delay(3)
}

def removeButton = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/btn_Remove')
def confirmRemoveModal = findTestObject('Object Repository/Page_InviteCandidates/modal_ConfirmRemove')
def cancelButton = findTestObject('Object Repository/Page_InviteCandidates/Confirm Remove Modal/btn_Cancel')
def email = findTestObject('Object Repository/Page_InviteCandidates/td_EmailByLineNumber', [""lineNumber"": ""1""])
def name = findTestObject('Object Repository/Page_InviteCandidates/td_NameByLineNumber',  [""lineNumber"": ""1""])

WebUI.comment('Step 2: Click the Remove button')
WebUI.waitForElementPresent(removeButton, 5)
WebUI.click(removeButton)

WebUI.comment('Step 3: Verify System shows a confirmation message')
WebUI.waitForElementVisible(confirmRemoveModal, 5)

WebUI.comment('Step 4: Click Cancel')
WebUI.click(cancelButton)

WebUI.comment('Step 5: Verify Close popup, the candidate is still available in the invite list')
if (true) {
	WebUI.comment('Close popup')
	WebUI.waitForElementNotPresent(confirmRemoveModal, 5)
	
	WebUI.comment('The candidate is still available in the invite list')
	def givenEmail = WebUI.getText(email)
	def givenName = WebUI.getText(name)
	WebUI.verifyMatch(givenEmail, validEmail, false)
	WebUI.verifyMatch(givenName, validName, false)
}

"
119,Update invite email template when inviting candidates,TC120,TC120_Verify Update invite email template successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Update Invite Email Template"" has been created in the system
- Above draft test is added one multiple choice question
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, scrolldown to the bottom of the page 
3. Click ""Show more"" on the bottom of the page until you see your test card ""Update Invite Email Template""
3. Click to open the draft test which has been found
4. Hit button [Publish Test]
5. Click [OK] on Publish test dialog
6. Click on button ""Invite Candidates""
7. Click on the link ""Show subject and body"" at the bottom of page
8. Change the subject to new one ""Welcome to the test""
9. Change the email body to new one ""Please complete all the questions""
10. Click [Save]


Expected result
- Message ""Update invite email template successfully."" displays
",P1,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys

import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest284 TC1 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	
	WebUI.comment('There is at least one ongoing test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
	
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	
	WebUI.comment('Step 1: Click an ongoing test on the Tests listing page.')
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
}
@TearDown
def teardown() {
	WebUI.comment('Remove the ongoing tested test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
}
def inviteCandidatesButton = findTestObject('Object Repository/Page_TestOverview/btn_Invite_Candidates')
def breadcrumb = findTestObject('Object Repository/Module_Navigation/breadcrumb')
def btn_ReviewEmailTemplate = findTestObject('Object Repository/Page_InviteCandidates/Review Invite Email Template/btn_ReviewEmailTemplate')
def inputSubject = findTestObject('Object Repository/Page_InviteCandidates/Review Invite Email Template/input_Subjective')
def inputEmailbody = findTestObject('Object Repository/Page_InviteCandidates/Review Invite Email Template/input_EmailBody')
def btnSave = findTestObject('Object Repository/Page_InviteCandidates/Review Invite Email Template/btn_SaveEmailTemplate')
def successToast = findTestObject('Object Repository/Module_Navigation/toast_Success')

WebUI.comment('Step 1: Click the Invite Candidates button')
WebUI.scrollToElement(inviteCandidatesButton, 3)
WebUI.click(inviteCandidatesButton, FailureHandling.STOP_ON_FAILURE)

WebUI.comment('Step 2: Click Review subject and body')
WebUI.waitForElementVisible(btn_ReviewEmailTemplate,2)
WebUI.scrollToElement(btn_ReviewEmailTemplate, 5)
WebUI.delay(1)
WebUI.click(btn_ReviewEmailTemplate, FailureHandling.STOP_ON_FAILURE)
WebUI.delay(2)

WebUI.comment('Step 3: Enter valid new values')
WebUI.waitForElementVisible(inputSubject,1)
WebUI.scrollToElement(inputSubject, 1)
WebUI.setText(inputSubject, subjectTest, FailureHandling.STOP_ON_FAILURE)
WebUI.scrollToElement(btnSave, 3)
WebUI.sendKeys(inputEmailbody, Keys.chord(Keys.CONTROL, 'a'))
WebUI.sendKeys(inputEmailbody, emailBodyTest, FailureHandling.CONTINUE_ON_FAILURE)

WebUI.comment('Step 4: Save changes')
WebUI.scrollToElement(btnSave, 1)
WebUI.click(btnSave, FailureHandling.CONTINUE_ON_FAILURE)

WebUI.comment('Step 5: Show success message')
def givenMessage = WebUI.getText(successToast)
WebUI.verifyMatch(givenMessage, 'Update invite email template successfully.', false)
"
120,Update invite email template when inviting candidates,TC121,TC121_Verify Update invite email template unsuccessfully by Cancel_P2,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Scrolldown to the end of the page.
4. Click on ""Show Subject and body"" link under Email Template section.
5. Remove Subjective value.
6. Click on Save button to see the error message displays: ""This field is required"".
7. Input valid value to Subject value.
8. Click on Save button to see the error message about the limit of the allowed number of characters.
9. Click on Cancel button.

Expected result
- Message displays : ""Discard changes successfully""
- The email details does not change.",P2,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys

import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest284 TC1 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	
	WebUI.comment('There is at least one ongoing test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
	
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	
	WebUI.comment('Step 1: Click an ongoing test on the Tests listing page.')
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
}
@TearDown
def teardown() {
	WebUI.comment('Remove the ongoing tested test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
}
def inviteCandidatesButton = findTestObject('Object Repository/Page_TestOverview/btn_Invite_Candidates')
def breadcrumb = findTestObject('Object Repository/Module_Navigation/breadcrumb')
def btn_ReviewEmailTemplate = findTestObject('Object Repository/Page_InviteCandidates/Review Invite Email Template/btn_ReviewEmailTemplate')
def inputSubject = findTestObject('Object Repository/Page_InviteCandidates/Review Invite Email Template/input_Subjective')
def inputEmailbody = findTestObject('Object Repository/Page_InviteCandidates/Review Invite Email Template/input_EmailBody')
def btnSave = findTestObject('Object Repository/Page_InviteCandidates/Review Invite Email Template/btn_SaveEmailTemplate')
def btnCancel = findTestObject('Object Repository/Page_InviteCandidates/Review Invite Email Template/btn_DiscardChanges')
def successToast = findTestObject('Object Repository/Module_Navigation/toast_Success')

WebUI.comment('Step 1: Click the Invite Candidates button')
WebUI.scrollToElement(inviteCandidatesButton, 3)
WebUI.click(inviteCandidatesButton, FailureHandling.STOP_ON_FAILURE) 

WebUI.comment('Step 2: Click Review subject and body')
WebUI.waitForElementVisible(btn_ReviewEmailTemplate,2)
WebUI.scrollToElement(btn_ReviewEmailTemplate, 5)
WebUI.delay(1)
WebUI.click(btn_ReviewEmailTemplate, FailureHandling.STOP_ON_FAILURE)
WebUI.delay(2)
WebUI.waitForElementVisible(inputSubject,1)
WebUI.scrollToElement(inputSubject, 3)
def currentSubject = WebUI.getText(inputSubject)
def currentEmailBody = WebUI.getText(inputEmailbody)

WebUI.comment('Step 3: Set the value beyond the limit of the allowed number of characters')
WebUI.scrollToElement(inputSubject, 1)
WebUI.setText(inputSubject, subjectOverLimitTest, FailureHandling.STOP_ON_FAILURE)
WebUI.scrollToElement(inputEmailbody, 1)
WebUI.setText(inputEmailbody, subjectOverLimitTest, FailureHandling.STOP_ON_FAILURE)

WebUI.comment('Step 4: Save changes')
WebUI.scrollToElement(btnSave, 1)
WebUI.click(btnSave, FailureHandling.CONTINUE_ON_FAILURE)

WebUI.comment('Step 5: Verify error message when the value beyond the limit of the allowed number of characters')

def errorMessageSubjective = findTestObject('Object Repository/Page_InviteCandidates/Review Invite Email Template/errorMessage_Subjective')
def errorMessageEmailBody = findTestObject('Object Repository/Page_InviteCandidates/Review Invite Email Template/errorMessage_EmailBody')
def givenErrorSubjective = WebUI.getText(errorMessageSubjective)
def givenErrorMessageEmailBody = WebUI.getText(errorMessageEmailBody)

WebUI.verifyMatch(givenErrorSubjective, inValidSubjectiveOverLimit, false)
WebUI.verifyMatch(givenErrorMessageEmailBody, inValidEmailBodyOverLimit, false)

WebUI.comment('Step 6: Delete value')
WebUI.scrollToElement(inputSubject, 2)
WebUI.setText(inputSubject, subjectEmptyTest, FailureHandling.STOP_ON_FAILURE)

WebUI.scrollToElement(btnSave, 3)
WebUI.sendKeys(inputEmailbody, Keys.chord(Keys.CONTROL, 'a'))
WebUI.sendKeys(inputEmailbody, Keys.chord(Keys.DELETE))

WebUI.comment('Step 7: Save changes')
WebUI.scrollToElement(btnSave, 1)
WebUI.click(btnSave, FailureHandling.CONTINUE_ON_FAILURE)

WebUI.comment('Step 8: Verify error message: This field is required.')
givenErrorSubjective = WebUI.getText(errorMessageSubjective)
givenErrorMessageEmailBody = WebUI.getText(errorMessageEmailBody)

WebUI.verifyMatch(givenErrorSubjective, inValidSubjective, false)
WebUI.verifyMatch(givenErrorMessageEmailBody, inValidEmailBody, false)

WebUI.comment('Step 9: Discard changes')
WebUI.scrollToElement(btnCancel, 3)
WebUI.click(btnCancel)

def givenCurrentSubject = WebUI.getText(inputSubject)
def givenEmailBody = WebUI.getText(inputEmailbody)

WebUI.verifyMatch(givenCurrentSubject, currentSubject, false)
WebUI.verifyMatch(givenEmailBody, currentEmailBody, false)

"
121,Update invite email template when inviting candidates,TC122,TC122_Verify UI on Update invite email_P2,Login to the system and there is at least one ongoing test > Click Invite Candidates button > System navigates to Invite Candidates page > Click Review subject and body > Verify system expands email template with 2 fields: Subject and Email Body > validate value > click Hide subject and body to collapse the email template,,P2,Yes,
122,Invite candidates,TC123,TC123_Verify Candidate is invited to a Test successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Invite candidate successfully"" has been created in the system
- Above draft test is added one multiple choice question
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, scrolldown to the bottom of the page 
3. Click ""Show more"" on the bottom of the page until you see your test card ""Invite candidate successfully""
3. Click to open the draft test which has been found
4. Hit button [Publish Test]
5. Click [OK] on Publish test dialog
6. Click on button ""Invite Candidates""
7. Click button [Add] to open Add Candidates dialog
8. Enter valid test email address into textbox
9. Hit spacebar
10. Enter the candidate name such as ""Link Test""
11. Click Add
12. Scrolldown to bottom and click button ""Invite""
13. Click OK on the Invite candidates confirmation dialog
14. You should be redirect to the test and tab Invited is selected
15. Verify the status of invitation on the table on the right right

Expected result
- Email status is ""Delivered""
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest273 TC1 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = ""katalontestingontest@gmail.com""
@Field String validName = ""Hoa Pham""
@Field String validEmailAndFullName = validEmail + "" "" + validName

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	def inviteCandidatesButton = findTestObject('Object Repository/Page_TestOverview/btn_Invite_Candidates')
	def addCandidatesButton = findTestObject('Object Repository/Page_InviteCandidates/btn_AddCandidates')
	def addCandidatesModal = findTestObject('Object Repository/Page_InviteCandidates/modal_AddCandidates')
	def inputAddCandidates = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/input_AddCandidates')
	def addButton = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/btn_Add')
	
	WebUI.comment('Delete all email')
	CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.deleteAllEMails'(validEmail, '0865800354', 'Inbox')
	
	WebUI.comment('There is at least one candidate added to the invite list')
	if(true) {
		// Create an ongoing test
		WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
		
		// Add an candidate to invite list
		WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
		if (true) {
			WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
			try {
				WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
			}
			catch (Exception e) {
				WebDriver driver = DriverFactory.getWebDriver()
				WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
				JavascriptExecutor executor = ((driver) as JavascriptExecutor)
				executor.executeScript('arguments[0].click()', element)
			}
		}
		
		WebUI.click(inviteCandidatesButton)
		
		WebUI.click(addCandidatesButton)
		WebUI.verifyElementVisible(addCandidatesModal)
		WebUI.setText(inputAddCandidates, validEmailAndFullName)
		WebUI.click(addButton)
	}
}

@TearDown
def teardown() {
	WebUI.comment('Remove the ongoing tested test')
	if (true) {
		WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
		WebUI.delay(3)
	}
}

def inviteButton = findTestObject('Object Repository/Page_InviteCandidates/btn_Invite')
def confirmInviteModal = findTestObject('Object Repository/Page_InviteCandidates/modal_ConfirmInvite')
def confirmInviteButton = findTestObject('Object Repository/Page_InviteCandidates/Confirm Invite Modal/btn_OK')
def successToast = findTestObject('Object Repository/Module_Navigation/toast_Success')
def invitedTab = findTestObject('Object Repository/Page_TestOverview/tab_InvitedCandiaetes')
def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
def emailStatus = findTestObject('Object Repository/Page_TestInvited/td_EmailStatusByLineNumber', ['lineNumber': '1'])

WebUI.comment('Step 1: Click the Invite button')
if (true) {
	WebUI.scrollToElement(inviteButton, 3)
	WebUI.click(inviteButton)
}

WebUI.comment('Step 2: On the popup confirmation: Click OK')
if (true) {
	WebUI.waitForElementVisible(confirmInviteModal, 3)
	WebUI.click(confirmInviteButton)
}

WebUI.comment('Step 3: Verify System shows the successful message')
if (true) {
	WebUI.waitForElementVisible(successToast, 10)
	def givenSuccessMessage = WebUI.getText(successToast)
	WebUI.verifyMatch(givenSuccessMessage, expectedSuccessMessage, false)
}

WebUI.comment('Step 4: On Invited Candidates Listing: Verify email status change to:')
if (true) {
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	
	WebUI.comment('Click to this ongoing test')
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
	
	WebUI.comment('Click Invited tab')
	WebUI.click(invitedTab)
	
	def numberOfEmail = CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.getEmailsCount'(validEmail, '0865800354', 'Inbox')
	if (numberOfEmail.toString() == ""1"") {
		WebUI.comment('“Delivered” if send emails to candidates successfully.')
		def givenEmailStatus = WebUI.getText(emailStatus)
		WebUI.verifyMatch(givenEmailStatus, ""Delivered"", false)
	} else {
		WebUI.comment('“Undelivered” if fail to send emails to candidates')
		def givenEmailStatus = WebUI.getText(emailStatus)
		WebUI.verifyMatch(givenEmailStatus, ""Undelivered"", false)
	}
}


"
123,Invite candidates,TC124,TC124_Verify Candidate is invited to a Test unsuccessfully by Cancel_P2,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Invite Candidates button at top right of the page.
4. Click on Add button.
5. Input Email ID and Full Name to Candidate field
ex: hnguyen@gmail.com h nguyen
6. Click on Cancel button on ""Add Candidates"" dialog.

Expected result
- The dialog is closed.
- The Candidate hnugyen@gmail.com is not added to the Invite List.",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest273 TC1 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = ""katalontestingontest@gmail.com""
@Field String validName = ""Hoa Pham""
@Field String validEmailAndFullName = validEmail + "" "" + validName

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	def inviteCandidatesButton = findTestObject('Object Repository/Page_TestOverview/btn_Invite_Candidates')
	def addCandidatesButton = findTestObject('Object Repository/Page_InviteCandidates/btn_AddCandidates')
	def addCandidatesModal = findTestObject('Object Repository/Page_InviteCandidates/modal_AddCandidates')
	def inputAddCandidates = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/input_AddCandidates')
	def addButton = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/btn_Add')
	
	WebUI.comment('There is at least one candidate added to the invite list')
	if (true) {
		// Create an ongoing test
		WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
		
		// Add an candidate to invite list
		WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
		WebUI.comment('Click an ongoing test on the Tests listing page.')
		if (true) {
			WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
			try {
				WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
			}
			catch (Exception e) {
				WebDriver driver = DriverFactory.getWebDriver()
				WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
				JavascriptExecutor executor = ((driver) as JavascriptExecutor)
				executor.executeScript('arguments[0].click()', element)
			}
		}
		
		WebUI.click(inviteCandidatesButton)
		
		WebUI.click(addCandidatesButton)
		WebUI.verifyElementVisible(addCandidatesModal)
		WebUI.setText(inputAddCandidates, validEmailAndFullName)
		WebUI.click(addButton)
	}
}

@TearDown()
def teardown() {
	WebUI.comment('Remove the ongoing tested test')
	if (true) {
		WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
		WebUI.delay(3)
	}
}

def inviteButton = findTestObject('Object Repository/Page_InviteCandidates/btn_Invite')
def confirmInviteModal = findTestObject('Object Repository/Page_InviteCandidates/modal_ConfirmInvite')
def cancelButton = findTestObject('Object Repository/Page_InviteCandidates/Confirm Invite Modal/btn_Cancel')

WebUI.comment('Step 1: Click the Invite button ')
if (true) {
	WebUI.scrollToElement(inviteButton, 3)
	WebUI.click(inviteButton)
}

WebUI.comment('Step 2:  Verify the popup confirmation is displayed')
WebUI.waitForElementVisible(confirmInviteModal, 3)

WebUI.comment('Step 3: Click Cancel')
WebUI.click(cancelButton)

WebUI.comment('Step 4: Close popup and do nothing')
WebUI.waitForElementNotVisible(confirmInviteModal, 3)





"
124,Invite candidates,TC125,TC125_Verify Email status change to “Opened”_P2,On Invite Candidates page and there is at least one candidate in invite list > Set up email & settings > Click Invite button > Candidate opens the email > On system: Update email status to “Opened”. ,,P2,Yes,
125,Invite candidates,TC126,TC126_Verify access link with No expire status_P2,Verify Invite expiry: No expiry: test link is ALWAYS available. > Candidates access link successfully,,P2,Yes,
126,Invite candidates,TC127,TC127_Verify access link with expire status_P2,"Verify Invite expiry: 1 day, 3 days, 5 days > test link will expire after the configured period > Candidates access expired links > Error message: “The link has been expired. Please contact <OnTest support team’s email> for support.”",,P2,Yes,
127,Solve timed questions (Preview/ Practice/ Real test),TC128,TC128_Verify display for MCQ question_P2,On MCQ question > Cannot see the question before loading it.,,P2,Yes,
128,Solve timed questions (Preview/ Practice/ Real test),TC129,TC129_Verify time for MCQ question_P2,"On MCQ question > Click Load question > Verify the question is displayed > The timer starts, countdown and cannot stop",,P2,Yes,
129,Solve timed questions (Preview/ Practice/ Real test),TC130,TC130_Verify Select answer before the time ends_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. Select ""Questions"" on the left menu
4. Click button [Add new question] to open Add MCQ dialog
5. Fill in test data as below
 5.1 Question Type: Programing
 5.1 Problem Statement: ""Problem ABC""
 5.2 Suggest Answer: ""Problem ABC should be ABC""
 5.3 Choices: ""Single Choice""
 5.4 4 answers: 4, 3, 2, 1
 5.5 Correct answer (radio) 1
 5.6 Difficulty Level: Hard
 5.7 Awarded Score: 20
 5.8 Subtracted Score: 20
 5.9 Max time: 20
 5.10 Tags: 2, 1
6. Click [Add]
7. Click the eye icon on the top right menu of the test
8. Click button [Enter Test]
9. Click button [Start Test]
10. On the MCQ question, hit [Load Test] to see question in details
11. Select the 1st answer of MCQ
12. Click button NEXT

Expected result
- You should be able to go to the 2nd question of the test
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB

@SetUp
def setUp() {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Click questions in the left sidebar'
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
	
	'Add two mcqs'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create MCQ'), null)
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create MCQ'), null)
	
	'Click preview test'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'), 10)
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'))
	
	'Click Enter Test'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/btn_EnterTest'), 10)
	WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_EnterTest'))
	
	'Wait for 1mins'
	WebUI.delay(60)
	
	'Click Start Test'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/btn_StartTest'), 10)
	WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_StartTest'))
}

@TearDown
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_PreviewTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), ['id': id])
}

'Verify if ""Load Question"" button and the countdown is presented'
if (true) {
	WebUI.verifyElementPresent(findTestObject('Object Repository/Page_PreviewTest/btn_LoadQuestion'), 10)
	
	WebUI.verifyElementPresent(findTestObject('Object Repository/Page_PreviewTest/txt_QuestionCountdown', ['index': 1]), 10)
	def countdown = WebUI.getText(findTestObject('Object Repository/Page_PreviewTest/txt_QuestionCountdown', ['index': 1]))
	WebUI.verifyMatch('00:30', countdown, false)
}

'Take screenshot'
WebUI.takeScreenshot()

'Click on ""Load Question""'
WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/btn_LoadQuestion'), 10)
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_LoadQuestion'))

'Choose an answer'
WebUI.scrollToElement(findTestObject('Page_PreviewTest/radio_MCQ', ['order': 1]), 10)
WebUI.click(findTestObject('Page_PreviewTest/radio_MCQ', ['order': 1]))

'Click Next'
WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/btn_Next'), 10)
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_Next'))

'Verify if the next question is presented'
if (true) {
	WebUI.verifyElementPresent(findTestObject('Object Repository/Page_PreviewTest/txt_QuestionIndex'), 10)
	
	def questionIndex=  WebUI.getText(findTestObject('Object Repository/Page_PreviewTest/txt_QuestionIndex'))
	WebUI.verifyMatch(questionIndex, 'Question: 2', false)
}
"
130,Solve timed questions (Preview/ Practice/ Real test),TC131,TC131_Verify Change answer before the time ends_P2,On MCQ question > Click Load question > Select answer before the time ends > can move to another question and cann't back to change the answer if the question is timed out,,P2,Yes,
131,Solve timed questions (Preview/ Practice/ Real test),TC132,TC132_Verify Question is timed out_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.

Steps:
1. Click on the Tests link from left menu.
2. Click on the ""Create Test"" button.
3. Click on Questions option below the Test section.
4. Click on Add New Question button.
5. Input valid value to the ""Add MCQ"" dialog:
 ex: Problem Statement: question 1, Multiple choice, input values to choices, Max Time: 5s
6. Click on Add button.
7. Repeat step 4 to step 6 to create a second question to the Test.
8. Click on Preview button (eye icon) on the page.
9. Click on Enter Test button.
10. Click on the Start Test button.
11. Click on Load Question button on Question 1 page.
12. Wait until the Timed question counts down to 00:00

Expected result
- User cannot select the answer anymore.
- All selections are disabled.",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB

@SetUp
def setUp() {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Click questions in the left sidebar'
	WebUI.click(findTestObject('Page_TestQuestions/btn_TestQuestion'))
	
	'Add two mcqs'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create MCQ'), null)
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create MCQ'), null)
	
	'Click preview test'
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_PreviewTest'))
	
	'Click Enter Test'
	WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_EnterTest'))
	
	'Wait for 1mins'
	WebUI.delay(60)
	
	'Click Start Test'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/btn_StartTest'), 10)
	WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_StartTest'))
}

@TearDown
def tearDown() {
	'Delete the test Test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_PreviewTest/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), ['id': id])
}

'Click on ""Load Question""'
WebUI.scrollToElement(findTestObject('Object Repository/Page_PreviewTest/btn_LoadQuestion'), 10)
WebUI.click(findTestObject('Object Repository/Page_PreviewTest/btn_LoadQuestion'))

'Wait for 30s'
WebUI.delay(30)

'Verify if answer is not clickable'
if (true) {
	WebUI.verifyElementNotClickable(findTestObject('Page_PreviewTest/radio_MCQ', ['order': 1]), 10)
}"
132,Search invited candidate tests,TC133,TC133_Verify navigation on Invited in Candidates submenu_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, scrolldown to the bottom of the page 
3. Click ""Show more"" on the bottom of the page until you see your test card ""Invite candidate successfully""
3. Click to open the draft test which has been found
4. Hit button [Publish Test]
5. Click [OK] on Publish test dialog
6. On draft test page, select tab ""Invited"" on the left side

Expected result
- The title of the page should be ""Title""
- Button [Cancel Invites] is visible
- Button [Remind Candidates] is visible
- Invitation table displays following info
+ column "" S/N""
+ column ""Full Name""
+ column ""Email""
+ column ""Invited At""
+ column ""Expiry Date""
+ column ""Email Status""
+ column ""Actions""

",P2,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB

'Set up'
@SetUp
def setUp() {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Publish test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Publish Test'), null)
	
	'Click Invited'
	WebUI.click(findTestObject('Object Repository/Page_Candidates/btn_InvitedCandidate'))
}

@TearDown
def tearDown() {
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), [id: id])
}

'Verify title'
def title = WebUI.getText(findTestObject('Object Repository/Page_Candidates/txt_CandidateTitle'))
WebUI.verifyMatch(title, 'Invited', false)

'Verify if remind and cancel button present'
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/btn_bulkCancel'), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/btn_bulkRemind'), 0)

'Verify if headers present'
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""S/N""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Full Name""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Email""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Invited At""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Expiry Date""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Email Status""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Actions""]), 0)
"
133,Search invited candidate tests,TC134,TC134_Search invited candidate tests by keyword_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Invite Candidates button at top right of the page.
4. Click on Add button.
5. Input 2 Email ID and Full Name to Candidate field
ex: hnguyen@gmail.com h nguyen
 johna@gmail.com john a
6. Click on Add button.
7. Tick on checkbox to select 2 added candidates on Invite Candidates page.
8. Click on Invite button at the bottom of the page.
9. Click on OK button to confirm.
10. Input full name of a candidate to Search field.
ex: h nguyen
11. Click on Search icon on the Search field.

Expected result
- There is 1 correct row displayed.
- The Candidate ""hnguyen@gmail.com h nguyen"" is displayed in the result.",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB
import groovy.transform.Field

@Field def candidateName1 = 'Example1'
@Field def candidateEmail1 = 'example1' + System.currentTimeMillis() + '@mail.com'

@Field def candidateName2 = 'Example2'
@Field def candidateEmail2 = 'example2' + System.currentTimeMillis() + '@mail.com'

@SetUp
def setUp() {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Publish test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Publish Test'), null)
	
	'Invite 2 candidates'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Invite Candidate'), [name: candidateName1, mail: candidateEmail1 ])
	
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/nav_TestName'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/nav_TestName'))
	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Invite Candidate'), [name: candidateName2, mail: candidateEmail2 ])
	
	'Back to test overview'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/nav_TestName'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/nav_TestName'))
	
	'Click Invited'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/btn_InvitedCandidate'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/btn_InvitedCandidate'))
}

@TearDown
def tearDown() {
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), [id: id])
}

'Enter candidate fullname as keyword'
WebUI.setText(findTestObject('Object Repository/Page_Candidates/tbx_SearchCandidate'), candidateName1)

'Click search'
WebUI.click(findTestObject('Object Repository/Page_Candidates/btn_SearchButton'))

'Verify if there is only one result'
if (true) {
	'Verify the number of row, header included'
	def numOfRow = WebUI.findWebElements(findTestObject('Object Repository/Page_Candidates/tr_TableRow'), 5).size()
	WebUI.verifyMatch(numOfRow.toString(), '2', false)
	
	'Verify the informative text is displayed correctly'
	def information = WebUI.getText(findTestObject('Object Repository/Page_Candidates/txt_InformativeText'))
	WebUI.verifyMatch(information, '1 result(s) found', false)
}
"
134,Search invited candidate tests,TC135,TC135_Search invited candidate tests by Email status_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Invite candidate successfully"" has been created in the system
- User has logged in to OnTest successfully (refer TC-001)
- Go to Tests page, search and open above draft test

Steps
1. Hit button [Publish Test]
2. Click [OK] on Publish test dialog
3. Click on button ""Invite Candidates""
4. Click button [Add] to open Add Candidates dialog
5. Enter valid test email address into textbox
6. Hit spacebar
7. Enter the candidate name such as ""Link Test""
8. Click Add
9. Scrolldown to bottom and click button ""Invite""
10. Click OK on the Invite candidates confirmation dialog
11. You should be redirect to the test and tab Invited is selected
12. Repeat test 3 to 10 one time again to create the 2nd invitation (with different email address of invite candidate)
13. On the invited page, click on the status filter dropdown
14. Select status ""Undelivered""
15. Click search icon next to the filter 

Expected result
- There is only the header displays for the table of invitation info
- There is 0 result found for the status Undelivered 
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB
import groovy.transform.Field

@Field def candidateEmail1 = 'example1' + System.currentTimeMillis() + '@mail.com'
@Field def candidateName1 = 'Example1'

@Field def candidateEmail2 = 'example2' + System.currentTimeMillis() + '@mail.com'
@Field def candidateName2 = 'Example2'

'Set up'
if (true) {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Publish test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Publish Test'), null)
	
	'Invite 2 candidates'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Invite Candidate'), [name: candidateName1, mail: candidateEmail1 ])
	
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/nav_TestName'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/nav_TestName'))
	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Invite Candidate'), [name: candidateName2, mail: candidateEmail2 ])
	
	'Back to test overview'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/nav_TestName'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/nav_TestName'))
	
	'Click Invited'
	WebUI.click(findTestObject('Object Repository/Page_Candidates/btn_InvitedCandidate'))
}

@TearDown
def tearDown() {
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), [id: id])
}

'Search by ""Undelivered"" status'
WebUI.selectOptionByValue(findTestObject('Object Repository/Page_Candidates/select_EmailStatus'), 'Undelivered', false)

'Click search'
WebUI.click(findTestObject('Object Repository/Page_Candidates/btn_SearchButton'))

'Verify if there is only one result'
if (true) {
	'Verify the number of row, header included'
	def numOfRow = WebUI.findWebElements(findTestObject('Object Repository/Page_Candidates/tr_TableRow'), 5).size()
	WebUI.verifyMatch(numOfRow.toString(), '1', false)
	
	'Verify the informative text is displayed correctly'
	def information = WebUI.getText(findTestObject('Object Repository/Page_Candidates/txt_InformativeText'))
	WebUI.verifyMatch(information, '0 result(s) found', false)
}
"
135,Search invited candidate tests,TC136,TC136_Search all invited candidate tests_P3,"On Invited Candidate Tests listing page > Search by keywords or filter > “Clear filters” is displayed > Click Clear filters to clear all applied criteria, system displays search results that match the default search criteria, which is search all.",,P3,Yes,
136,Search invited candidate tests,TC137,TC137_Verify UI on Invited Candidate Tests listing page_P2,On Invited Candidate Tests listing page > Verify UI,,P2,Yes,
137,Search invited candidate tests,TC138,TC138_Verify Pagination on Invited Candidate Tests listing page_P2,On Invited Candidate Tests listing page > Verify Pagination,,P2,Yes,
138,Search invited candidate tests,TC139,TC139_Verify Sort on Invited Candidate Tests listing page_P2,"On Invited Candidate Tests listing page > Verify Sorting: all columns are sortable except for S/N and Actions. Default sort: Full Name (sort alphabetically, ascending order)",,P2,Yes,
139,Search invited candidate tests,TC140,TC140_Verify navigation on New in Candidates submenu_P1,Verify login successfully with valid credentials,"""Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Invite Candidates button at top right of the page.
4. Click on Add button.
5. Input 2 Email ID and Full Name to Candidate field
ex: hnguyen@gmail.com h nguyen
 johna@gmail.com john a
6. Click on Add button.
7. Click on Tests link from left menu to back to Tests page.
8. Select the ""Invite Test"" again.
9. Select New option under Candidates section.

Expected result
- Invite Candidates page displays 
- Added candidates display on Invite List section.
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

@SetUp
def setUp() {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Publish test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Publish Test'), null)
}

@TearDown
def tearDown() {
	'Back to test overview'
	WebUI.click(findTestObject('Object Repository/Page_Candidates/nav_TestName'))
	
	'Delete test'
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), [id: id])
}

'Click ""New""'
WebUI.click(findTestObject('Object Repository/Page_Candidates/btn-NewCandidate'))

'Verify title'
if (true) {
	def title = WebUI.getText(findTestObject('Object Repository/Page_InviteCandidates/title_HeadingTitle'))
	WebUI.verifyMatch(title, 'Invite Candidates', false)
}"
140,Manually remind candidates to take tests,TC141,TC141_Verify Remind Candidate successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Invite candidate successfully"" has been created in the system
- Above draft test is added one multiple choice question
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, scrolldown to the bottom of the page 
3. Click ""Show more"" on the bottom of the page until you see your test card ""Invite candidate successfully""
3. Click to open the draft test which has been found
4. Hit button [Publish Test]
5. Click [OK] on Publish test dialog
6. Click on button ""Invite Candidates""
7. Click button [Add] to open Add Candidates dialog
8. Enter valid test email address into textbox
9. Hit spacebar
10. Enter the candidate name such as ""Link Test""
11. Click Add
12. Scrolldown to bottom and click button ""Invite""
13. Click OK on the Invite candidates confirmation dialog
14. You should be redirect to the test and tab Invited is selected
15. On the invitation email table, check the first row to select the invitation which is sent to ""Link Test""
15. Click button [Remnd Candidates]
16. Click [OK]

Expected result
- Remind Candidates displays text ""Are you sure you want to remind the selected candidates to take the test?""
- Toast message displays after remind candidate action has been successful :""Remind candidate successfully.""",P1,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp()
def setUp( ) {
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Invite'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Invite Candidate With MCQ Question'), ['name':validNameUnique, 'email':validEmail,'inviteName':validName, 'duration':false , 'multipe': false ])
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
	'Delete the candidate and test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test'), ['testName': validNameUnique, 'email':validEmail])
	
}

WebUI.waitForElementVisible(findTestObject('Object Repository/Page_TakeTest/txt_Candidate Item',['status':'Invited']), 10)
//Click to Candidate status
WebUI.click(findTestObject('Object Repository/Page_TakeTest/txt_Candidate Item',['status':'Invited']))

WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Email Cell',['email':validEmail]), 10, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_Remind Candidate/btn_Remind',['email':validEmail]))

def message = WebUI.getText(findTestObject('Object Repository/Page_Remind Candidate/txt_Remind_Message'))
WebUI.verifyMatch(message, 'Are you sure you want to remind this candidate to take the test?', false, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_Remind Candidate/btn_Remind_Confirm_OK'))

WebUI.waitForElementPresent(findTestObject('Object Repository/Page_AddTest/successToast'), 30)
message = WebUI.getText(findTestObject('Object Repository/Page_AddTest/successToast'))
WebUI.verifyMatch(message, 'Remind candidate successfully.', false, FailureHandling.STOP_ON_FAILURE)

"
141,Manually remind candidates to take tests,TC142,TC142_Verify Remind Candidate unsuccessfully by Cancel_P2,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Invite Candidates button at top right of the page.
4. Click on Add button.
5. Input 2 Email ID and Full Name to Candidate field
ex: hnguyen@gmail.com h nguyen
 johna@gmail.com	john a
6. Click on Add button.
7. Tick on checkbox to select 2 added candidates on Invite Candidates page.
8. Click on Invite button at the bottom of the page.
9. Click on OK button to confirm.
10. Tick on a checkbox to select a candidate from the Invited list.
ex: hnguyen@gmail.com h nguyen
11. Click on the Remind Candidates button.
12. Click on Cancel button on Remind Candidates dialog.

Expected result
- The dialog is closed.
- The Candidate ""hnguyen@gmail.com h nguyen"" does not receive the remind email.",P2,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp()
def setUp( ) {
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Invite'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Invite Candidate With MCQ Question'), ['name':validNameUnique, 'email':validEmail,'inviteName':validName, 'duration':false , 'multipe': false ])
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
	'Delete the candidate and test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test'), ['testName': validNameUnique, 'email':validEmail])
	
}

WebUI.waitForElementVisible(findTestObject('Object Repository/Page_TakeTest/txt_Candidate Item',['status':'Invited']), 10)
//Click to Candidate status
WebUI.click(findTestObject('Object Repository/Page_TakeTest/txt_Candidate Item',['status':'Invited']))

WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Email Cell',['email':validEmail]), 10, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_Remind Candidate/btn_Remind',['email':validEmail]))

def message = WebUI.getText(findTestObject('Object Repository/Page_Remind Candidate/txt_Remind_Message'))
WebUI.verifyMatch(message, 'Are you sure you want to remind this candidate to take the test?', false, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_Remind Candidate/btn_Remind_Cancel'))

WebUI.verifyElementNotPresent(findTestObject('Object Repository/Page_Remind Candidate/cpn_Remind Modal'), 10)
"
142,Manually remind candidates to take tests,TC143,TC143_Verify Remind Candidate Email_P2,Login to the system and there is at least one invited candidate test > Select at least one candidate > Click Remind Candidates button > Confirm > Verify email received,,P2,Yes,
143,Manually remind candidates to take tests,TC144,TC144_Verify Remind multiple Candidate Email_P2,Login to the system and there is at least one invited candidate test > Select at least one candidate > Click Remind Candidates button > System shows confirmation message > Click OK,,P2,Yes,
144,Manually remind candidates to take tests,TC145,TC145_Verify Remind Candidate Email with no selected candidates_P3,Login to the system and there is at least one invited candidate test > Do not select any candidates > Click Remind Candidates button > System shows message “Please select at least one candidate.”,,P2,Yes,
145,Give feedback after taking a test,TC146,TC146_Verify Submit feedback successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Submit Feedback"" has been created in the system
- Above draft test is added one multiple choice question
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, scrolldown to the bottom of the page 
3. Click ""Show more"" on the bottom of the page until you see your test card ""Submit Feedback""
3. Click to open the draft test which has been found
4. Hit button [Publish Test]
5. Click [OK] on Publish test dialog
6. Click on button ""Invite Candidates""
7. Click button [Add] to open Add Candidates dialog
8. Enter valid test email address into textbox
9. Hit spacebar
10. Enter the candidate name such as ""Link Test""
11. Click Add
12. Scrolldown to bottom and click button ""Invite""
13. Click OK on the Invite candidates confirmation dialog
14. Check your testing email box
15. Open the invite link in the email
16. Hit [Enter Test]
17. Click [Start Test]
18. Hit [Submit] button on the top right corner
19. On the comment page, add comment as below
 19.1 Clarity of question: 3 stars
 19.2 Usability of test interface: 3 stars
 19.3 Fairness of skill assessment; 3 stars
 19.4 Comment: ""This is a good test""
20. Submit your feedback
21. Go back to OnTest site and log in as Admin
22. Search for the test ""Submit Feedback""
23. Open the test in details
24. Select tab ""Candidate Feedback"" at the bottom of left menu
25. Swich to tab ""Details""

Expected result
- Feedback is displayed in Details section ""This is a good test""
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field
import internal.GlobalVariable

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp
def setup() {
	WebUI.comment('Step 1: Check the test link in the invite email and submit test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Submit Test On Time'), [""validNameUnique"": validNameUnique, ""validEmail"": validEmail, ""validName"": validName])
}

@TearDown()
def tearDown() {
	WebUI.comment('Delete the tested test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test'), ['testName': validNameUnique, 'email':validEmail])
}

def clarityVoting = findTestObject('Object Repository/Page_SendFeedback/star_ClarityVoting')
def usabilityVoting = findTestObject('Object Repository/Page_SendFeedback/star_UsabilityVoting')
def fairnessVoting = findTestObject('Object Repository/Page_SendFeedback/star_FairnessVoting')
def textareaFeedback = findTestObject('Object Repository/Page_SendFeedback/textarea_Feedback')
def submitButton = findTestObject('Object Repository/Page_SendFeedback/btn_SubmitFeedback')

WebUI.comment('Step 2: Verify Navigation to the Feedback page')
WebUI.verifyElementVisible(clarityVoting)

WebUI.comment('Step 3: Enter feedback')
if (true) {
	WebUI.click(clarityVoting)
	WebUI.click(usabilityVoting)
	WebUI.click(fairnessVoting)
	WebUI.setText(textareaFeedback, ""This is a good test!"")
}

WebUI.comment('Step 4: Click Submit')
if (true) {
	WebUI.scrollToElement(submitButton, 3)
	WebUI.click(submitButton)
	WebUI.delay(2)
}

def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
def feedbackTab = findTestObject('Object Repository/Page_TestFeedback/nav_CandiateFeedback')
def detailsTab = findTestObject('Object Repository/Page_TestFeedback/nav_DetailsTab')
def emptyMessage = findTestObject('Object Repository/Page_TestFeedback/text_EmptyMessage')

WebUI.comment('Step 6: Verify feedback is saved')
if (true) {
	WebUI.openBrowser(GlobalVariable.G_SiteURL)
	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'), null)
	
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
	
	WebUI.scrollToElement(feedbackTab, 3)
	WebUI.click(feedbackTab)
	
	WebUI.scrollToElement(detailsTab, 3)
	WebUI.click(detailsTab)
	
	WebUI.verifyElementNotPresent(emptyMessage, 3)
}"
146,Give feedback after taking a test,TC147,TC147_Verify UI feedback_P3,Email is invited to take a test > Click the test link in invite email > Complete test > Navigates me to Feedback page > Verify UI,,P3,Yes,
147,Get acknowledgement of test completion,TC148,TC148_Verify Receive a thank you email when completed test_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Invite Candidates button at top right of the page.
4. Click on Add button.
5. Input Email ID and Full Name to Candidate field
ex: hnguyen@gmail.com h nguyen
6. Click on Add button.
7. Tick on checkbox to select the candidate on Invite Candidates page.
8. Click on Invite button at the bottom of the page.
9. Click on Ok button to confirm.
10. Open the invited link from candidate's mailbox.
11. Click on Enter test button as candidate role.
12. Click on Start test button as candidate role.
13. Click on Submit button.
14. Click on OK button on the Submit Test dialog.

Expected result
- Successfull message displays as ""Your test has been submitted successfully"".
- User receives a information email with tittle ""Your submission for [TestName] has been received"".",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.database.Database as DB
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field
import internal.GlobalVariable

@Field String validNameUnique = ""Ontest273 TC1 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = ""katalontestingontest@gmail.com""
@Field String validName = ""Hoa Pham""
@Field String validEmailAndFullName = validEmail + "" "" + validName

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	def inviteCandidatesButton = findTestObject('Object Repository/Page_TestOverview/btn_Invite_Candidates')
	def addCandidatesButton = findTestObject('Object Repository/Page_InviteCandidates/btn_AddCandidates')
	def addCandidatesModal = findTestObject('Object Repository/Page_InviteCandidates/modal_AddCandidates')
	def inputAddCandidates = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/input_AddCandidates')
	def addButton = findTestObject('Object Repository/Page_InviteCandidates/Add Candidates Modal/btn_Add')
	def inviteButton = findTestObject('Object Repository/Page_InviteCandidates/btn_Invite')
	def confirmInviteModal = findTestObject('Object Repository/Page_InviteCandidates/modal_ConfirmInvite')
	def confirmInviteButton = findTestObject('Object Repository/Page_InviteCandidates/Confirm Invite Modal/btn_OK')
	def successToast = findTestObject('Object Repository/Module_Navigation/toast_Success')
	
	WebUI.comment('Delete all email')
	CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.deleteAllEMails'(validEmail, '0865800354', 'Inbox')
	
	WebUI.comment('There is at least one candidate added to the invite list')
	if(true) {
		// Create an ongoing test
		WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
		
		// Add an candidate to invite list
		WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
		if (true) {
			WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
			try {
				WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
			}
			catch (Exception e) {
				WebDriver driver = DriverFactory.getWebDriver()
				WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
				JavascriptExecutor executor = ((driver) as JavascriptExecutor)
				executor.executeScript('arguments[0].click()', element)
			}
		}
		
		WebUI.scrollToElement(inviteCandidatesButton, 3)
		WebUI.click(inviteCandidatesButton)
		WebUI.delay(2)
		
		WebUI.click(addCandidatesButton)
		WebUI.verifyElementVisible(addCandidatesModal)
		WebUI.setText(inputAddCandidates, validEmailAndFullName)
		WebUI.click(addButton)
		WebUI.delay(5)
		
		WebUI.scrollToElement(inviteButton, 3)
		WebUI.click(inviteButton)
		
		WebUI.waitForElementVisible(confirmInviteModal, 3)
		WebUI.click(confirmInviteButton)
		
		WebUI.waitForElementVisible(successToast, 10)
	}
	
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}

def getTestUrl() {
	def url = StringBuilder.newInstance()
	url<<GlobalVariable.G_SiteURL
	url<<""/challenge""
	def query = ""SELECT assignment.id from assignment JOIN candidate on assignment.\""candidateId\"" = candidate.id where email = '${validEmail}';""
	def assignmentId = DB.execute(query).get(0).get(0)
	query = ""SELECT token from candidate where email = '${validEmail}';""
	def candidateToken = DB.execute(query).get(0).get(0)
	url<<""/${assignmentId}?token=${candidateToken}""
	println(url)
	return url.toString()
}

def url = getTestUrl()
printf url

WebUI.openBrowser(url)

WebUI.waitForPageLoad(15)
WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Enter Test'), 0)







"
148,Search testing candidate test,TC149,TC149_Verify navigation on Testing in Candidates submenu_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. On draft test, hit button [Publish Test]
4. Click [OK] on Publish test dialog
5. Select submenu ""Testing"" on the left

Expected result
- Testing info page displays on the right
- A table of testing infor show following details
+ column S/N
+ column ""Full Name""
+ column ""Email""
+ column ""Started At""
+ column ""Actions""
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

WebUI.comment('Click Testing on the submenu')
WebUI.click(findTestObject('Object Repository/Page_TestCandidates/btn_TestingCandidates'), FailureHandling.STOP_ON_FAILURE)

WebUI.comment('Verify System navigates to Testing Candidate Tests listing page')
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TestCandidates/txt_CandidateStatus'), 5)

WebUI.comment('Verify title name, Menu, List of fields')
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TestCandidates/table_Candidates'), 5)

@SetUp
def setup() {
    WebUI.comment('User must be logged in to the system successfully')
    WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), [:], FailureHandling.STOP_ON_FAILURE)

    WebUI.comment('There is at least one ongoing test')
	
	'Create test'
	WebUI.waitForElementPresent(findTestObject('Object Repository/Module_Navigation/nav_item_tests'), 5)
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
    WebUI.callTestCase(findTestCase('Common Test Cases/Test/Add Test'), [:], FailureHandling.STOP_ON_FAILURE)
	
	'Publish test'
    WebUI.callTestCase(findTestCase('Common Test Cases/Test/Publish Test'), [:], FailureHandling.STOP_ON_FAILURE)
	
	test_name = WebUI.getText(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), FailureHandling.STOP_ON_FAILURE)
}

@TearDown
def teardown() {
    WebUI.comment('Remove the ongoing tested test')
    WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), [('testName') : test_name])
}

"
149,Search testing candidate test,TC150,TC150_Search testing candidate tests by keyword_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Invite Candidates button at top right of the page.
4. Click on Add button.
5. Input 2 Email ID and Full Name to Candidate field
ex: hnguyen@gmail.com h nguyen
 johna@gmail.com john a
6. Click on Add button.
7. Tick on checkboxes to select all candidates on Invite Candidates page.
8. Click on Invite button at the bottom of the page.
9. Click on Ok button to confirm.
10. Open the invited link from candidate's mailbox.
11. Click on Enter test button as candidate role.
12. Click on Start test button as candidate role.
13. Login to Ontest site as Admin role.
14. Navigate to Tests page.
15. Open the ""Invite Test"" again.
16. Click on Testing option under Candidates section.
17. Input full name of candidate to Search field.
ex: h nguyen
18. Click on Search icon on Search field.

Expected result
- There is 1 correct row displayed.
- The Candidate ""hnguyen@gmail.com h nguyen"" is displayed in the result.",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

WebUI.comment('Click Testing on the submenu')
WebUI.click(findTestObject('Page_TestCandidates/btn_TestingCandidates'), FailureHandling.STOP_ON_FAILURE)

WebUI.comment('On Testing Candidate Tests listing page: Search tests by candidate’s full name or email (search by KEYWORD)')
WebUI.setText(findTestObject('Page_TestCandidates/input_SearchCandidate'), query)

WebUI.comment('Click search')
WebUI.click(findTestObject('Page_TestCandidates/btn_SearchCandidate'))

WebUI.comment('Verify Display the number of results found. Ex: 1 result(s) found.')
//WebUI.waitForElementPresent(findTestObject('Object Repository/Module_Navigation/nav_item_tests'), 5)
WebUI.verifyElementPresent(findTestObject('Page_TestCandidates/txt_SearchResult'), 5)

@SetUp
def setup() {
	WebUI.comment('User must be logged in to the system successfully')
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), [:], FailureHandling.STOP_ON_FAILURE)

	WebUI.comment('There is at least one ongoing test')
	
	'Create test'
	WebUI.waitForElementPresent(findTestObject('Object Repository/Module_Navigation/nav_item_tests'), 5)
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Add Test'), [:], FailureHandling.STOP_ON_FAILURE)
	
	'Publish test'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Publish Test'), [:], FailureHandling.STOP_ON_FAILURE)
	
	test_name = WebUI.getText(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), FailureHandling.STOP_ON_FAILURE)
}

@TearDown
def teardown() {
	WebUI.comment('Remove the ongoing tested test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), [('testName') : test_name])
}

"
150,Search testing candidate test,TC151,TC151_Search All testing candidate tests_P2,"On Testing Candidate Tests listing page > already search by keywords > “Clear filters” is displayed > Click Clear filters > system displays search results that match the default search criteria, which is search all.",,P2,Yes,
151,Search testing candidate test,TC152,"TC152_Verify Pagination, Sort on Testing Candidate Tests listing page_P2","On Testing Candidate Tests listing page > Verify Pagination, Sorting",,P2,Yes,
152,View candidates' feedback,TC153,TC153_View Candidate Feedback page on overall tab_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Verify Feedback"" has been created in the system
- Above draft test is added one multiple choice question
- Publish above test and send an invitation to 1 candidate
- Finish above on-going test by candidate and submit the feedback to the test as below
 + Clarity of question: 3 stars
 + Usability of test interface: 3 stars
 + Fairness of skill assessment; 3 stars
 + Comment: ""This is a good test""
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, scrolldown to the bottom of the page 
3. Click ""Show more"" on the bottom of the page until you see your test card ""Submit Feedback""
3. Click to open the on-going test ""Verify Feedback"" which has been found
4. Select tab ""Candidate Feedback"" at the bottom of left menu


Expected result
- Overall page displays below info that is submited from candidate 
 + Clarity of question: 3 stars
 + Usability of test interface: 3 stars
 + Fairness of skill assessment; 3 stars
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field
import internal.GlobalVariable as GlobalVariable

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp
def setup() {
	WebUI.comment('There is at least one feedback candidate test')
	def createATestWithFeedback = findTestCase('Test Cases/Common Test Cases/Test/Create A Test With Feedback')
	WebUI.callTestCase(createATestWithFeedback, [""validNameUnique"": validNameUnique, ""validEmail"": validEmail, ""validName"": validName])
}

@TearDown
def teardown() {
	WebUI.comment('Remove the tested test')
	def removeTheTestedTestTestCase = findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test')
	WebUI.callTestCase(removeTheTestedTestTestCase, ['testName': validNameUnique, 'email':validEmail])
}

def candidiateFeedbackTab = findTestObject('Object Repository/Page_TestFeedback/nav_CandiateFeedback')
def pageTitle = findTestObject('Object Repository/Page_TestFeedback/title_PageTitle')

WebUI.comment('Step 1: Click Tests')
if (true) {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
}

WebUI.comment('Step 2: On Analytics: Click Candidate Feedback')
WebUI.scrollToElement(candidiateFeedbackTab, 3)
WebUI.click(candidiateFeedbackTab)

WebUI.comment('Step 3: Verify System navigates to the Candidate Feedback page')
WebUI.verifyElementVisible(pageTitle)

WebUI.comment('Step 4: Verify Average rating for 3 categories')
if (true) {
	def averageClarity = findTestObject('Object Repository/Page_TestFeedback/text_AverageClarity')
	def averageFairness = findTestObject('Object Repository/Page_TestFeedback/text_AverageFairness')
	def averageUsability = findTestObject('Object Repository/Page_TestFeedback/text_AverageUsability')
	
	WebUI.comment('Clarity of questions')
	def givenAverateClarity = WebUI.getText(averageClarity)
	WebUI.verifyMatch(givenAverateClarity, ""1"", false)
	
	WebUI.comment('Usability of test interface')
	def givenAverageFairness = WebUI.getText(averageFairness)
	WebUI.verifyMatch(givenAverageFairness, ""1"", false)
	
	WebUI.comment('Fairness of skill assessment')
	def givenAverateUsability = WebUI.getText(averageUsability)
	WebUI.verifyMatch(givenAverateUsability, ""1"", false)
}

"
153,View candidates' feedback,TC154,TC154_Verify Clarify of questions_P2,"On Candidate Feedback page, Overall tab > Verify Clarify of questions: Average rating, Totals ratings, Totals reviews, Total/Percent for each star type",,P2,Yes,
154,View candidates' feedback,TC155,TC155_Verify Usability of test interface_P2,"On Candidate Feedback page, Overall tab > Verify Usability of test interface: Average rating, Totals ratings, Totals reviews, Total/Percent for each star type",,P2,Yes,
155,View candidates' feedback,TC156,TC156_Verify Fairness of skill assessment_P2,"On Candidate Feedback page, Overall tab > Verify Fairness of skill assessment: Average rating, Totals ratings, Totals reviews, Total/Percent for each star type",,P2,Yes,
156,View candidates' feedback,TC157,TC157_View Candidate Feedback page on detail tab_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Invite Candidates button at top right of the page.
4. Click on Add button.
5. Input Email ID and Full Name to Candidate field
ex: hnguyen@gmail.com h nguyen
6. Click on Add button.
7. Tick on checkboxes to select all candidates on Invite Candidates page.
8. Click on Invite button at the bottom of the page.
9. Click on Ok button to confirm.
10. Open the invited link from candidate's mailbox.
11. Click on Enter test button as candidate role.
12. Click on Start test button as candidate role.
13. Click on submit button.
14. Click on OK button to confirm.
15. Select rating on the Rating page.
ex: Clarity of question: 3
 Usability of test interface: 4
 Fairness of skill assessment: 5
16. Input a commnet to Additional comments field
ex: Feedback
17. click on Submit button to send the feedback.
18. Login to Ontest site as Admin role.
19. Navigate to Tests page.
20. click on ""Candidate Feedback"" button under the Analytics section.
21. Click on Details tab.


Expected result
- Candidate name displays as ""h nguyen"".
- The feedback comment displays as ""Feedback"".
- Rating numbers for Clarity, Usability, Fairness display as 3/5, 4/5, 5/5.",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field
import internal.GlobalVariable as GlobalVariable

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp
def setup() {
	WebUI.comment('There is at least one feedback candidate test')
	def createATestWithFeedback = findTestCase('Test Cases/Common Test Cases/Test/Create A Test With Feedback')
	WebUI.callTestCase(createATestWithFeedback, [""validNameUnique"": validNameUnique, ""validEmail"": validEmail, ""validName"": validName])
}

@TearDown
def teardown() {
	WebUI.comment('Remove the tested test')
	def removeTheTestedTestTestCase = findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test')
	WebUI.callTestCase(removeTheTestedTestTestCase, ['testName': validNameUnique, 'email':validEmail])
}

def candidiateFeedbackTab = findTestObject('Object Repository/Page_TestFeedback/nav_CandiateFeedback')
def pageTitle = findTestObject('Object Repository/Page_TestFeedback/title_PageTitle')
def detailsTab = findTestObject('Object Repository/Page_TestFeedback/nav_DetailsTab')

WebUI.comment('Step 1: Click Tests')
if (true) {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
}

WebUI.comment('Step 2: On Analytics: Click Candidate Feedback')
WebUI.scrollToElement(candidiateFeedbackTab, 3)
WebUI.click(candidiateFeedbackTab)

WebUI.comment('Step 3: Verify System navigates to the Candidate Feedback page')
WebUI.verifyElementVisible(pageTitle)

WebUI.comment('Step 4: Click on the detail tab')
WebUI.scrollToElement(detailsTab, 3)
WebUI.click(detailsTab)

def candiateName = findTestObject('Object Repository/Page_TestFeedback/DetailPane/text_CandidateName')
def candidateComment = findTestObject('Object Repository/Page_TestFeedback/DetailPane/text_Comment')
def numberStarOfClarity = findTestObject('Object Repository/Page_TestFeedback/DetailPane/text_ClarityNumber')
def numberStarOfFairness = findTestObject('Object Repository/Page_TestFeedback/DetailPane/text_FairnessNumber')
def numberStarOfUsability = findTestObject('Object Repository/Page_TestFeedback/DetailPane/text_UsabilityNumber')

WebUI.comment('Step 5: Verify Candidate name, feedback Content, number of stars for each category')
if (true) {
	WebUI.comment('Verify Name')
	def givenName = WebUI.getText(candiateName)
	WebUI.verifyMatch(givenName, validName, false)
	
	WebUI.comment('Verify Comment')
	def givenComment = WebUI.getText(candidateComment)
	WebUI.verifyMatch(givenComment, ""This is a good test!"", false)
	
	WebUI.comment('Verify number of clarity star')
	def givenClarity = WebUI.getText(numberStarOfClarity)
	WebUI.verifyMatch(givenClarity, ""1/5"", false)
	
	WebUI.comment('Verify number of fairness star')
	def givenFairness = WebUI.getText(numberStarOfFairness)
	WebUI.verifyMatch(givenFairness, ""1/5"", false)
	
	WebUI.comment('Verifu number of usablity star')
	def givenUsability = WebUI.getText(numberStarOfUsability)
	WebUI.verifyMatch(givenUsability, ""1/5"", false)
}


"
157,View candidates' feedback,TC158,TC158_Verify Sort on detail tab_P2,"On Candidate Feedback page, Detail tab > Verify list feedback: Sort by feedback time, latest to oldest.",,P2,Yes,
158,Search submitted candidate tests,TC159,TC159_Verify navigation on Submitted in Candidates submenu_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. On draft test, hit button [Publish Test]
4. Click [OK] on Publish test dialog
5. Select submenu ""Submitted"" on the left

Expected result
- Submitted testing info page displays on the right
- Title of the page ""Submitted""
- 2 button on the top right
 + Review Test
 + Reset Test
- A table of submitted testing infor show following details
+ column S/N
+ column ""Full Name""
+ column ""Email""
+ column ""Submitted at""
+ column ""Duration""
+ column ""Snapshots""
+ column ""Actions""
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB

'Set up'
@SetUp
def setUp() {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Publish test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Publish Test'), null)
	
	'Click Submitted'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/btn_SubmittedCandidate'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/btn_SubmittedCandidate'))
}

@TearDown
def tearDown() {
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), [id: id])
}

'Verify title'
def title = WebUI.getText(findTestObject('Object Repository/Page_Candidates/txt_CandidateTitle'))
WebUI.verifyMatch(title, 'Submitted', false)

'Verify if review and reset button present'
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/btn_bulkReview'), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/btn_bulkReset'), 0)

'Verify if headers present'
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""S/N""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Full Name""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Email""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Submitted At""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Duration""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Snapshots""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Actions""]), 0)
"
159,Search submitted candidate tests,TC160,TC160_Search Submitted candidate tests by keyword_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Invite Candidates button at top right of the page.
4. Click on Add button.
5. Input Email ID and Full Name to Candidate field
ex: hnguyen@gmail.com h nguyen
6. Click on Add button.
7. Tick on checkboxes to select all candidates on Invite Candidates page.
8. Click on Invite button at the bottom of the page.
9. Click on Ok button to confirm.
10. Open the invited link from candidate's mailbox.
11. Click on Enter test button as candidate role.
12. Click on Start test button as candidate role.
13. Click on submit button.
14. Click on OK button to confirm.
15. Select rating on the Rating page.
ex: Clarity of question: 3
 Usability of test interface: 4
 Fairness of skill assessment: 5
16. Input a commnet to Additional comments field
ex: Feedback
17. Click on Submit button to send the feedback.
18. Login to Ontest site as Admin role.
19. Navigate to Tests page.
20. Click on Submitted option under Candidates section
21. Input full name of candidate to Search field. (ex: h nguyen)
22. Click on Search icon.

Expected result
- There is 1 correct row displayed.
- The Candidate ""hnguyen@gmail.com h nguyen"" is displayed in the result.",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB
import groovy.transform.Field

@Field def candidateName1 = 'Example1'
@Field def candidateEmail1 = 'example1' + System.currentTimeMillis() + '@mail.com'

@Field def candidateName2 = 'Example2'
@Field def candidateEmail2 = 'example2' + System.currentTimeMillis() + '@mail.com'

@SetUp
def setUp() {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Publish test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Publish Test'), null)
	
	'Invite 2 candidates'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Invite Candidate'), [name: candidateName1, mail: candidateEmail1 ])
	
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/nav_TestName'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/nav_TestName'))
	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Invite Candidate'), [name: candidateName2, mail: candidateEmail2 ])
	
	'Back to test overview'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/nav_TestName'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/nav_TestName'))
	
	'Make 2 candidates submitted candidates'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Candidates/Make Candidate Submitted'), [email: candidateEmail1])
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Candidates/Make Candidate Submitted'), [email: candidateEmail2])
	
	'Click Submitted'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/btn_SubmittedCandidate'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/btn_SubmittedCandidate'))
}

@TearDown
def tearDown() {
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), [id: id])
}

'Enter candidate fullname as keyword'
WebUI.setText(findTestObject('Object Repository/Page_Candidates/tbx_SearchCandidate'), candidateName1)

'Click search'
WebUI.click(findTestObject('Object Repository/Page_Candidates/btn_SearchButton'))

'Verify if there is only one result'
if (true) {
	'Verify the number of row, header included'
	def numOfRow = WebUI.findWebElements(findTestObject('Object Repository/Page_Candidates/tr_TableRow'), 5).size()
	WebUI.verifyMatch(numOfRow.toString(), '2', false)
	
	'Verify the informative text is displayed correctly'
	def information = WebUI.getText(findTestObject('Object Repository/Page_Candidates/txt_InformativeText'))
	WebUI.verifyMatch(information, '1 result(s) found', false)
}
"
160,Search submitted candidate tests,TC161,TC161_Search All submiited candidate tests_P2,"On Submitted Candidate Tests listing page > already search by keywords > “Clear filters” is displayed > Click Clear filters > system displays search results that match the default search criteria, which is search all.",,P2,Yes,
161,Search submitted candidate tests,TC162,"TC162_Verify Pagination, Sort on Submitted Candidate Tests listing page_P3","On Submitted Candidate Tests listing page > Verify Pagination, Sorting > Sorting: all columns are sortable except for S/N and Actions. Default sort: Full Name (sort alphabetically, ascending order)",,P3,Yes,
162,Search scored candidate tests,TC163,TC163_Verify navigation on Scored in Candidates submenu_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. Click button [Create Test]
3. On draft test, hit button [Publish Test]
4. Click [OK] on Publish test dialog
5. Select submenu ""Scored"" on the left

Expected result
- Score info page displays on the right
- Title of the page ""Scored""
- Button ""Reset Tests"" is placed on the top right
- A table of score infor show following details
+ column S/N
+ column ""Full Name""
+ column ""Email""
+ column ""Score""
+ column ""Scored At""
+ column ""Scored By""
+ column ""Snapshots""
+ column ""Actions""
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB

'Set up'
@SetUp
def setUp() {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Publish test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Publish Test'), null)
	
	'Click Scored'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/btn_ScoredCandidate'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/btn_ScoredCandidate'))
}

@TearDown
def tearDown() {
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), [id: id])
}

'Verify title'
def title = WebUI.getText(findTestObject('Object Repository/Page_Candidates/txt_CandidateTitle'))
WebUI.verifyMatch(title, 'Scored', false)

'Verify if bulk reset button is presented'
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/btn_bulkReset'), 0)

'Verify if headers present'
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""S/N""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Full Name""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Email""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Score""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Scored At""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Scored By""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Snapshots""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Actions""]), 0)
"
163,Search scored candidate tests,TC164,TC164_Search Scored candidate tests by keyword_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").
- There are 2 candidates already done the Test (TC150).

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Submitted option under Candidates section.
4. Select all submitted Candidates on the list.
5. Click on Review Tests button.
6. Select a Reviewer from Reviewer dropdown.
7. Click on Review button.
8. Click on Reviewing option under Candidates section.
9. Click on Score icon on the Candidate row.
10. Input score values to all questions.
11. Click on Score button.
12. Click on Scored option under the Candidates section.
13. Input full name of Candidate to the Search field.
14. Click on Search icon.

Expected result
- There is 1 correct row displayed.
- The Candidate ""hnguyen@gmail.com h nguyen"" is displayed in the result.""",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB
import groovy.transform.Field

@Field def candidateName1 = 'Example1'
@Field def candidateEmail1 = 'example1' + System.currentTimeMillis() + '@mail.com'

@Field def candidateName2 = 'Example2'
@Field def candidateEmail2 = 'example2' + System.currentTimeMillis() + '@mail.com'

@SetUp
def setUp() {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Publish test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Publish Test'), null)
	
	'Invite 2 candidates'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Invite Candidate'), [name: candidateName1, mail: candidateEmail1 ])
	
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/nav_TestName'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/nav_TestName'))
	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Invite Candidate'), [name: candidateName2, mail: candidateEmail2 ])
	
	'Back to test overview'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/nav_TestName'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/nav_TestName'))
	
	'Make 2 candidates scored candidates'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Candidates/Make Candidate Scored'), [email: candidateEmail1])
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Candidates/Make Candidate Scored'), [email: candidateEmail2])
	
	'Click Scored'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/btn_ScoredCandidate'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/btn_ScoredCandidate'))
}

@TearDown
def tearDown() {
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), [id: id])
}

'Enter candidate fullname as keyword'
WebUI.setText(findTestObject('Object Repository/Page_Candidates/tbx_SearchCandidate'), candidateName1)

'Click search'
WebUI.click(findTestObject('Object Repository/Page_Candidates/btn_SearchButton'))

'Verify if there is only one result'
if (true) {
	'Verify the number of row, header included'
	def numOfRow = WebUI.findWebElements(findTestObject('Object Repository/Page_Candidates/tr_TableRow'), 5).size()
	WebUI.verifyMatch(numOfRow.toString(), '2', false)
	
	'Verify the informative text is displayed correctly'
	def information = WebUI.getText(findTestObject('Object Repository/Page_Candidates/txt_InformativeText'))
	WebUI.verifyMatch(information, '1 result(s) found', false)
}
"
164,Search scored candidate tests,TC165,TC165_Search Scored candidate tests by filter_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Scored Test"" has been created in the system
- Above draft test is added 
 + one multiple choice question
 + one subjective question
- Publish above test and send an invitation to 2 candidates A and B
- Finish above on-going test by all candidates A and B
- A user named ""Review Scored Test"" has been created and assign role as Reviewer
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, search for the test ""Scored Test""
3. Click to open the on-going test ""Scored Test""
4. Select tab ""Submitted"", you should see 2 submitted tests from A & B
5. Tick the checkbox of the test which is from A and B
6. Click on the email icon at column ""Actions"" 
7. On the dialog Review Test, select reviewer ""Review Scored Test"" for the test
8. Click Review
9. Log in to system as the reviewer ""Review Scored Test""
10. Search and open the test
11. Select tab Reviewing from the submenu on the left
12. Click on the Score icon for the test from A



Expected result
- Score page result displays
- There is info of Overview including
 + Start Time
 + Submitted Time
 + Duration
 + Submitted At
 + Reviewed At
 + Reviewed By
- The section of anwser info called ""Detailed Answers""
 + Show questions of the test in table with info as below
 ++ S/N
 ++ Question
 ++ Score
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB
import groovy.transform.Field

@Field def candidateName1 = 'Example1'
@Field def candidateEmail1 = 'example1' + System.currentTimeMillis() + '@mail.com'

@Field def candidateName2 = 'Example2'
@Field def candidateEmail2 = 'example2' + System.currentTimeMillis() + '@mail.com'

@SetUp
def setUp() {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Publish test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Publish Test'), null)
	
	'Invite 2 candidates'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Invite Candidate'), [name: candidateName1, mail: candidateEmail1 ])
	
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/nav_TestName'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/nav_TestName'))
	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Invite Candidate'), [name: candidateName2, mail: candidateEmail2 ])
	
	'Back to test overview'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/nav_TestName'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/nav_TestName'))
	
	'Make 2 candidates scored candidates'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Candidates/Make Candidate Scored'), [email: candidateEmail1])
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Candidates/Make Candidate Scored'), [email: candidateEmail2])
	
	'Click Scored'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/btn_ScoredCandidate'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/btn_ScoredCandidate'))
	
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}

@TearDown
def tearDown() {
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), [id: id])
	
	DB.close()
}

'Choose reviewer'
def adminId = DB.execute('select id from public.user where name=\'Ontest Admin\'')[0][0]
WebUI.selectOptionByValue(findTestObject('Object Repository/Page_Candidates/select_ScoredBy'), adminId.toString(), false)

'Verify if there are 2 results'
if (true) {
	'Verify the number of row, header included'
	def numOfRow = WebUI.findWebElements(findTestObject('Object Repository/Page_Candidates/tr_TableRow'), 5).size()
	WebUI.verifyMatch(numOfRow.toString(), '3', false)
	
	'Verify the informative text is displayed correctly'
	def information = WebUI.getText(findTestObject('Object Repository/Page_Candidates/txt_InformativeText'))
	WebUI.verifyMatch(information, '2 result(s) found', false)
}
"
165,Search scored candidate tests,TC166,TC166_Search All Scored candidate tests_P2,"On Scored Candidate Tests listing page > already search by keywords > “Clear filters” is displayed > Click Clear filters > system displays search results that match the default search criteria, which is search all.",,P2,Yes,
166,Search scored candidate tests,TC167,"TC167_Verify Pagination, Sort on Scored Candidate Tests listing page_P3","On Scored Candidate Tests listing page > Verify Pagination, Sorting > Sorting: all columns are sortable except for S/N and Actions. Default sort: Full Name (sort alphabetically, ascending order)",,P3,Yes,
167,Search cancelled candidate tests,TC168,TC168_Verify navigation on Cancelled in Candidates submenu_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Cancelled option under Candidates section.
4. Verify the details of the page.

Expected result
- Page tittle is Cancelled.
- There are 5 columns with titlle: S/N, Full Name, Email, Invited At, Cancelled At",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB

'Set up'
@SetUp
def setUp() {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Publish test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Publish Test'), null)
	
	'Click Cancelled'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/btn_CancelledCandidate'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/btn_CancelledCandidate'))
}

@TearDown
def tearDown() {
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), [id: id])
}

'Verify title'
def title = WebUI.getText(findTestObject('Object Repository/Page_Candidates/txt_CandidateTitle'))
WebUI.verifyMatch(title, 'Cancelled', false)

'Verify if headers present'
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""S/N""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Full Name""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Email""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Invited At""]), 0)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_Candidates/th_Headers', [text: ""Cancelled At""]), 0)


"
168,Search cancelled candidate tests,TC169,TC169_Search Cancelled candidate tests by keyword_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Cancelled Test"" has been created in the system
- Above draft test is added 
 + one multiple choice question
 + one subjective question
- Publish above test and send an invitation to 2 candidates with full name as ""Test A"" and ""Test B""
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, search for the test ""Canclled Test""
3. Click to open the on-going test ""Canclled Test""
4. Select submenu ""Invited""
5. Check all the checkbox for invitation of user A & B
6. Hit [Cancel Invites] button on the top right
7. Confirm the cancel invitation by click OK on cancel dialog
8. Select submenu Cancelled
9. Search for A by entering text ""Test A"" to search box and click search icon
10. Do the same search for user B



Expected result
- User Test A is found in the cancelled test section
- User Test B is found in the cancelled test section
",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import com.database.Database as DB
import groovy.transform.Field

@Field def candidateName1 = 'Example1'
@Field def candidateEmail1 = 'example1' + System.currentTimeMillis() + '@mail.com'

@Field def candidateName2 = 'Example2'
@Field def candidateEmail2 = 'example2' + System.currentTimeMillis() + '@mail.com'

@SetUp
def setUp() {
	'Login'
	WebUI.callTestCase(findTestCase('Common Test Cases/Login/Login'), null)
	
	'Click test in navigation sidebar'
	WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_item_tests'))
	
	'Create Test for test'
	WebDriver driver = DriverFactory.getWebDriver()
	def empty = driver.findElements(By.xpath(""(//*[contains(text(),'You have no tests yet.')])"")).size()
	
	if(empty != 0){
		WebUI.click(findTestObject('Page_AddTest/EmptyPage/btn_CreateTest-Empty'))
	} else {
		WebUI.click(findTestObject('Object Repository/Page_AddTest/btn_CreateTest'))
	}
	
	'Publish test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Publish Test'), null)
	
	'Invite 2 candidates'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Invite Candidate'), [name: candidateName1, mail: candidateEmail1 ])
	
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/nav_TestName'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/nav_TestName'))
	
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Invite Candidate'), [name: candidateName2, mail: candidateEmail2 ])
	
	'Back to test overview'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/nav_TestName'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/nav_TestName'))
	
	'Make 2 candidates cancelled candidates'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Candidates/Make Candidate Cancelled'), [email: candidateEmail1])
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Candidates/Make Candidate Cancelled'), [email: candidateEmail2])
	
	'Click Cancelled'
	WebUI.scrollToElement(findTestObject('Object Repository/Page_Candidates/btn_CancelledCandidate'), 10)
	WebUI.click(findTestObject('Object Repository/Page_Candidates/btn_CancelledCandidate'))
}

@TearDown
def tearDown() {
	def id = WebUI.getAttribute(findTestObject('Object Repository/Page_TestOverview/txt_TestName'), 'data-id')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Delete Test By ID'), [id: id])
}

'Enter candidate fullname as keyword'
WebUI.setText(findTestObject('Object Repository/Page_Candidates/tbx_SearchCandidate'), candidateName1)

'Click search'
WebUI.click(findTestObject('Object Repository/Page_Candidates/btn_SearchButton'))

'Verify if there is only one result'
if (true) {
	'Verify the number of row, header included'
	def numOfRow = WebUI.findWebElements(findTestObject('Object Repository/Page_Candidates/tr_TableRow'), 5).size()
	WebUI.verifyMatch(numOfRow.toString(), '2', false)
	
	'Verify the informative text is displayed correctly'
	def information = WebUI.getText(findTestObject('Object Repository/Page_Candidates/txt_InformativeText'))
	WebUI.verifyMatch(information, '1 result(s) found', false)
}
"
169,Search cancelled candidate tests,TC170,TC170_Search All submiited candidate tests_P2,"On Cancelled Candidate Tests listing page > already search by keywords > “Clear filters” is displayed > Click Clear filters > system displays search results that match the default search criteria, which is search all.",,P2,Yes,
170,Search cancelled candidate tests,TC171,"TC171_Verify Pagination, Sort on Submitted Candidate Tests listing page_P3","On Cancelled Candidate Tests listing page > Verify Pagination, Sorting > Sorting: all columns are sortable except for S/N and Actions. Default sort: Full Name (sort alphabetically, ascending order)",,P3,Yes,
171,Cancel invites,TC172,TC172_Verify Cancel invites successfully from Invited Candidate Tests listing page_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").
- There is at least 1 invited Candidates on the Test (TC134)

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Invited option under Candidates section.
4. Select a Candidate from the invited list.
5. Click on Cancel Invites button.
6. Click on Ok button on Canel Candidates dialog.

Expected result
- User is cancelled successfully.
- Successful message displays as "" Cancel Candidate successfully."".
- Cancelled Candidate does not display on Invited page anymore.",P1,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = ""katalontestingontest@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp()
def setUp( ) {
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Invite'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Invite Candidate With MCQ Question'), ['name':validNameUnique, 'email':validEmail,'inviteName':validName, 'duration':false , 'multipe': false ])
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
	'Delete the candidate and test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test'), ['testName': validNameUnique, 'email':validEmail])
	
}
WebUI.comment('Delete all email')
CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.deleteAllEMails'(validEmail, '0865800354', 'Inbox')

WebUI.waitForElementVisible(findTestObject('Object Repository/Page_TakeTest/txt_Candidate Item',['status':'Invited']), 10)
//Click to Candidate status
WebUI.click(findTestObject('Object Repository/Page_TakeTest/txt_Candidate Item',['status':'Invited']))

WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Email Cell',['email':validEmail]), 10, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_TestInvited/btn_Cancel Candidate',['email':validEmail]))

def message = WebUI.getText(findTestObject('Object Repository/Page_TestInvited/txt_Cancel_Message'))
WebUI.verifyMatch(message, 'Are you sure you want to cancel this candidate to take the test?', false, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_TestInvited/btn_Cancel_Confirm_OK'))

WebUI.waitForElementPresent(findTestObject('Object Repository/Page_AddTest/successToast'), 30)
message = WebUI.getText(findTestObject('Object Repository/Page_AddTest/successToast'))
WebUI.verifyMatch(message, 'Cancel candidate successfully.', false, FailureHandling.STOP_ON_FAILURE)

def numberOfEmail = CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.getEmailsCount'(validEmail, '0865800354', 'Inbox')
WebUI.verifyMatch(numberOfEmail.toString(), '1', false, FailureHandling.STOP_ON_FAILURE)"
172,Cancel invites,TC173,TC173_Verify Cancel invites unsuccessfully by Cancel_P2,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Cancelled Test"" has been created in the system
- Above draft test is added 
 + one multiple choice question
- Publish above test and send an invitation to candidate A with full name ""Test A""
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, search for the test ""Cancelled Test""
3. Click to open the on-going test ""Canclled Test""
4. Select submenu ""Invited""
5. Check the checkbox for invitation of user A
6. Hit [Cancel Invites] button on the top right
7. On the confirmation dialog ""Cancel Candidates"", click Cancel


Expected result
- Cancel Candidate dialog message: ""Are you sure you want to cancel this candidate to take the test?""
- Cancel Candidates popup is closed
- The test for user A is NOT cancel successfully
",P2,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = ""katalontestingontest@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp()
def setUp( ) {
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Invite'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Invite Candidate With MCQ Question'), ['name':validNameUnique, 'email':validEmail,'inviteName':validName, 'duration':false , 'multipe': false ])
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
	'Delete the candidate and test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test'), ['testName': validNameUnique, 'email':validEmail])
	
}
WebUI.comment('Delete all email')
CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.deleteAllEMails'(validEmail, '0865800354', 'Inbox')

WebUI.waitForElementVisible(findTestObject('Object Repository/Page_TakeTest/txt_Candidate Item',['status':'Invited']), 10)
//Click to Candidate status
WebUI.click(findTestObject('Object Repository/Page_TakeTest/txt_Candidate Item',['status':'Invited']))

WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Email Cell',['email':validEmail]), 10, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_TestInvited/btn_Cancel Candidate',['email':validEmail]))

def message = WebUI.getText(findTestObject('Object Repository/Page_TestInvited/txt_Cancel_Message'))
WebUI.verifyMatch(message, 'Are you sure you want to cancel this candidate to take the test?', false, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_TestInvited/btn_Cancel_Cancel'))

WebUI.verifyElementNotPresent(findTestObject('Object Repository/Page_TestInvited/cpn_Cancel_Modal'), 10)

def numberOfEmail = CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.getEmailsCount'(validEmail, '0865800354', 'Inbox')
WebUI.verifyMatch(numberOfEmail.toString(), '0', false, FailureHandling.STOP_ON_FAILURE)"
173,Cancel invites,TC174,TC174_Verify Cancel multiple invites successfully_P2,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").
- There is at least 2 invited Candidates on the Test (TC134)

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Invited option under Candidates section.
4. Select 2 Candidates from the invited list.
5. Click on Cancel Invites button.
6. Click on Ok button on Canel Candidates dialog.

Expected result
- All selected Candidates are cancelled successfully.
- Successful message displays as "" Cancel Candidate successfully."".
- Cancelled Candidates are not displayed on Invited page anymore.""",P2,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = ""katalontestingontest@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp()
def setUp( ) {
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Invite'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Invite Candidate With MCQ Question'), ['name':validNameUnique, 'email':validEmail,'inviteName':validName, 'duration':false,'multipe':true  ])
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
	'Delete the candidate and test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test'), ['testName': validNameUnique, 'email':validEmail])
	
}
WebUI.comment('Delete all email')
CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.deleteAllEMails'(validEmail, '0865800354', 'Inbox')

WebUI.waitForElementVisible(findTestObject('Object Repository/Page_TakeTest/txt_Candidate Item',['status':'Invited']), 10)
//Click to Candidate status
WebUI.click(findTestObject('Object Repository/Page_TakeTest/txt_Candidate Item',['status':'Invited']))

WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Email Cell',['email':validEmail]), 10, FailureHandling.STOP_ON_FAILURE)

WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Email Cell',['email':""second.""+validEmail]), 10, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_TestInvited/cbx_Select All'))

WebUI.click(findTestObject('Object Repository/Page_TestInvited/btn_Bulk Cancel'))

def message = WebUI.getText(findTestObject('Object Repository/Page_TestInvited/txt_Cancel_Message'))
WebUI.verifyMatch(message, 'Are you sure you want to cancel the selected candidates to take the test?', false, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_TestInvited/btn_Bulk Cancel Ok'))

WebUI.waitForElementPresent(findTestObject('Object Repository/Page_AddTest/successToast'), 30)
message = WebUI.getText(findTestObject('Object Repository/Page_AddTest/successToast'))
WebUI.verifyMatch(message, 'Cancel candidate successfully.', false, FailureHandling.STOP_ON_FAILURE)

def numberOfEmail = CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.getEmailsCount'(validEmail, '0865800354', 'Inbox')
WebUI.verifyMatch(numberOfEmail.toString(), '1', false, FailureHandling.STOP_ON_FAILURE)"
174,Cancel invites,TC175,TC175_Verify Cancel mutilple invites unsuccessfully by Cancel_P4,"On Invited Candidate Tests listing page: Select at least one candidate > Click Cancel Candidates button > System shows confirmation message > Click Cancel > Close popup, do nothing",,P3,Yes,
175,Cancel invites,TC176,TC176_Verify Cancel invites without select candidate_P3,On Invited Candidate Tests listing page: Do not select any candidates > Click Cancel Candidates button > System shows message “Please select at least one candidate.”,,P3,Yes,
176,Cancel invites,TC177,TC176_Verify Test link after Cancelled_P4,"Verify After cancelled, test link is not valid any more. (message: “Your test has been cancelled. Please contact <Recruitment team’s email> if you need more information.”).",,P2,Yes,
177,Cancel invites,TC178,TC178_Verify Cancel invites successfully from Testing Candidate Tests listing page_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Cancelled Test"" has been created in the system
- Above draft test is added 
 + one multiple choice question
- Publish above test and send an invitation to candidate A with full name ""Test A""
- Open the invitation link from user A email and take the test but not Submit yet
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, search for the test ""Cancelled Test""
3. Click to open the on-going test ""Canclled Test""
4. Select submenu ""Testing""
5. Check the checkbox for the test which is being taken by user A
6. Hit [Cancel Invites] button on the top right
7. On the confirmation dialog ""Cancel Candidates"", click OK


Expected result
- Cancel Candidate dialog message: ""Are you sure you want to cancel this candidate to take the test?""
- Cancel Candidates popup is closed
- The test for user A is cancel successfully
",P1,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = ""katalontestingontest@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp()
def setUp( ) {
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Invite'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Invite Candidate With MCQ Question'), ['name':validNameUnique, 'email':validEmail,'inviteName':validName, 'duration':false , 'multipe': false ])
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
	'Delete the candidate and test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test'), ['testName': validNameUnique, 'email':validEmail])
	
}
def getTestUrl() {
	def url = StringBuilder.newInstance()
	url<<GlobalVariable.G_SiteURL
	url<<""/challenge""
	def query = ""SELECT assignment.id from assignment JOIN candidate on assignment.\""candidateId\"" = candidate.id where email = '${validEmail}';""
	def assignmentId = DB.execute(query).get(0).get(0)
	query = ""SELECT token from candidate where email = '${validEmail}';""
	def candidateToken = DB.execute(query).get(0).get(0)
	url<<""/${assignmentId}?token=${candidateToken}""
	println(url.toString().getClass())
	return url.toString()
}
WebUI.comment('Delete all email')
CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.deleteAllEMails'(validEmail, '0865800354', 'Inbox')
def url = getTestUrl()
WebUI.openBrowser(url)
WebUI.waitForPageLoad(15, FailureHandling.CONTINUE_ON_FAILURE)
//Add scrollToElement
WebUI.scrollToElement(findTestObject('Object Repository/Page_TakeTest/btn_Enter Test'), 3)
//WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Enter Test'), 10, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Enter Test'))

WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Start Test'), 65, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Start Test'))
WebUI.delay(10)
WebUI.openBrowser(GlobalVariable.G_SiteURL)

WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Navigate To Candidate'),['status':'Testing','testName':validNameUnique])

WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Email Cell',['email':validEmail]), 10, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_TestInvited/btn_Cancel Candidate',['email':validEmail]))

def message = WebUI.getText(findTestObject('Object Repository/Page_TestInvited/txt_Cancel_Message'))
WebUI.verifyMatch(message, 'Are you sure you want to cancel this candidate to take the test?', false, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_TestInvited/btn_Cancel_Confirm_OK'))

WebUI.waitForElementPresent(findTestObject('Object Repository/Page_AddTest/successToast'), 30)
message = WebUI.getText(findTestObject('Object Repository/Page_AddTest/successToast'))
WebUI.verifyMatch(message, 'Cancel candidate successfully.', false, FailureHandling.STOP_ON_FAILURE)

def numberOfEmail = CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.getEmailsCount'(validEmail, '0865800354', 'Inbox')
WebUI.verifyMatch(numberOfEmail.toString(), '1', false, FailureHandling.STOP_ON_FAILURE)"
178,View candidates' snapshots taken during the test,TC179,TC179_View candidates' snapshots on Submitted Candidate Tests listing page_P1,"Login to the system and there is at least one completed candidate tests > Click Submitted on the sub menu > System navigates to Submitted Candidate Tests listing page > Click View Snapshots > Verify Candidate full name, Test submitted at",,P1,Yes,
179,View candidates' snapshots taken during the test,TC180,TC180_View candidates' snapshots on Scored Candidate Tests listing page_P2,"Login to the system and there is at least one completed candidate tests > Click Scored on the sub menu > System navigates to Scored Candidate Tests listing page > Click View Snapshots > Verify Candidate full name, Test submitted at",,P1,Yes,
180,Reset candidate tests,TC181,TC181_Verify Reset candidate tests successfully from Submitted Candidate Tests listing page_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").
- There is at least 1 submitted Candidate on the Test (TC160)

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Submitted option under Candidates section.
4. Select a Candidate from the invited list.
5. Click on Reset Test button.
6. Click on Ok button on Reset Candidates dialog.

Expected result
- The Candidate displays on the Invited page.
- Successful message displays as ""Reset Candidate successfully."".
- The Candidates is not displayed on Submitted page anymore.",P1,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = ""katalontestingontest@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp()
def setUp( ) {
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Invite'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Invite Candidate With Other Question'), ['name':validNameUnique, 'email':validEmail,'inviteName':validName, 'duration':true , 'multipe': false ])
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
	'Delete the candidate and test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test'), ['testName': validNameUnique, 'email':validEmail])
	
}
def getTestUrl() {
	def url = StringBuilder.newInstance()
	url<<GlobalVariable.G_SiteURL
	url<<""/challenge""
	def query = ""SELECT assignment.id from assignment JOIN candidate on assignment.\""candidateId\"" = candidate.id where email = '${validEmail}';""
	def assignmentId = DB.execute(query).get(0).get(0)
	query = ""SELECT token from candidate where email = '${validEmail}';""
	def candidateToken = DB.execute(query).get(0).get(0)
	url<<""/${assignmentId}?token=${candidateToken}""
	println(url.toString().getClass())
	return url.toString()
}

def url = getTestUrl()
WebUI.openBrowser(url)
WebUI.waitForPageLoad(15, FailureHandling.CONTINUE_ON_FAILURE)
//Add scrollToElement
WebUI.scrollToElement(findTestObject('Object Repository/Page_TakeTest/btn_Enter Test'), 3)
//WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Enter Test'), 10, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Enter Test'))

WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Start Test'), 65, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Start Test'))

//For MCQ question
//WebUI.waitForElementClickable(findTestObject('Object Repository/Page_TakeTest/btn_Load Question'), 30)
//WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Load Question'))

//No answer and submit test
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Submit Test'))

WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Submit Test Ok'))

//Add 'Enter feedback'
WebUI.click(findTestObject('Object Repository/Page_SendFeedback/star_ClarityVoting'))
WebUI.click(findTestObject('Object Repository/Page_SendFeedback/star_UsabilityVoting'))
WebUI.click(findTestObject('Object Repository/Page_SendFeedback/star_FairnessVoting'))
WebUI.setText(findTestObject('Object Repository/Page_SendFeedback/textarea_Feedback'), ""This is a good test!"")
WebUI.scrollToElement(findTestObject('Object Repository/Page_SendFeedback/btn_SubmitFeedback'), 3)
WebUI.click(findTestObject('Object Repository/Page_SendFeedback/btn_SubmitFeedback'))

WebUI.delay(5)
WebUI.openBrowser(GlobalVariable.G_SiteURL)

WebUI.maximizeWindow()

WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Navigate To Candidate'),['status':'Submitted','testName':validNameUnique])

WebUI.scrollToElement(findTestObject('Object Repository/Page_TakeTest/txt_Email Cell',['email':validEmail]), 3)
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Email Cell',['email':validEmail]), 10, FailureHandling.STOP_ON_FAILURE)

WebUI.scrollToElement(findTestObject('Object Repository/Page_Test Submitted/btn_Reset Test',['email':validEmail]), 3)
WebUI.click(findTestObject('Object Repository/Page_Test Submitted/btn_Reset Test',['email':validEmail]))

WebUI.comment('Delete all email')
CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.deleteAllEMails'(validEmail, '0865800354', 'Inbox')

def message = WebUI.getText(findTestObject('Object Repository/Page_Test Submitted/txt_Reset_Message'))
WebUI.verifyMatch(message, 'Are you sure you want to reset this candidate to take the test?', false, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_Test Submitted/btn_Reset_Confirm_OK'))

WebUI.waitForElementPresent(findTestObject('Object Repository/Page_AddTest/successToast'), 30)
message = WebUI.getText(findTestObject('Object Repository/Page_AddTest/successToast'))
WebUI.verifyMatch(message, 'Reset candidate successfully.', false, FailureHandling.STOP_ON_FAILURE)


WebUI.click(findTestObject('Object Repository/Page_TakeTest/txt_Candidate Item',['status':'Invited']))
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Email Cell',['email':validEmail]), 10, FailureHandling.STOP_ON_FAILURE)

def numberOfEmail = CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.getEmailsCount'(validEmail, '0865800354', 'Inbox')
WebUI.verifyMatch(numberOfEmail.toString(), '1', false, FailureHandling.STOP_ON_FAILURE)

"
181,Reset candidate tests,TC182,TC182_Verify Reset candidate tests unsuccessfully by Cancel_P2,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Reset Test"" has been created in the system
- Above draft test is added 
 + one multiple choice question
- Publish above test and send an invitation to candidate A with full name ""Test A""
- Open the invitation link from user A email , start and submit the test without any questions answered
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, search for the test ""Rest Test""
3. Click to open the on-going test ""Reset Test""
4. Select submenu ""Submitted""
5. Check the checkbox for submitted test from user A
6. Hit [Reset Test] button on the top right or the Reset icon on the current row
7. On the confirmation dialog ""ResetCandidates"", click Cancel


Expected result
- Cancel Candidate dialog message: ""Are you sure you want to reset the selected candidates to take the test?""
- Reset Candidates popup is closed
- The test for user A is NOT cancelled successfully
",P2,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = ""katalontestingontest@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp()
def setUp( ) {
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Invite'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Invite Candidate With Other Question'), ['name':validNameUnique, 'email':validEmail,'inviteName':validName, 'duration':true , 'multipe': false ])
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
	'Delete the candidate and test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test'), ['testName': validNameUnique, 'email':validEmail])
	
}
def getTestUrl() {
	def url = StringBuilder.newInstance()
	url<<GlobalVariable.G_SiteURL
	url<<""/challenge""
	def query = ""SELECT assignment.id from assignment JOIN candidate on assignment.\""candidateId\"" = candidate.id where email = '${validEmail}';""
	def assignmentId = DB.execute(query).get(0).get(0)
	query = ""SELECT token from candidate where email = '${validEmail}';""
	def candidateToken = DB.execute(query).get(0).get(0)
	url<<""/${assignmentId}?token=${candidateToken}""
	println(url.toString().getClass())
	return url.toString()
}

def url = getTestUrl()
WebUI.openBrowser(url)
WebUI.waitForPageLoad(15, FailureHandling.CONTINUE_ON_FAILURE)
//Add scrollToElement
WebUI.scrollToElement(findTestObject('Object Repository/Page_TakeTest/btn_Enter Test'), 3)
//WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Enter Test'), 10, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Enter Test'))

WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Start Test'), 65, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Start Test'))

//For MCQ question
//WebUI.waitForElementClickable(findTestObject('Object Repository/Page_TakeTest/btn_Load Question'), 30)
//WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Load Question'))

//No answer and submit test
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Submit Test'))
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Submit Test Ok'))

//Add 'Enter feedback'
WebUI.click(findTestObject('Object Repository/Page_SendFeedback/star_ClarityVoting'))
WebUI.click(findTestObject('Object Repository/Page_SendFeedback/star_UsabilityVoting'))
WebUI.click(findTestObject('Object Repository/Page_SendFeedback/star_FairnessVoting'))
WebUI.scrollToElement(findTestObject('Object Repository/Page_SendFeedback/btn_SubmitFeedback'), 3)
WebUI.click(findTestObject('Object Repository/Page_SendFeedback/btn_SubmitFeedback'))

WebUI.delay(5)
WebUI.openBrowser(GlobalVariable.G_SiteURL)

WebUI.maximizeWindow()

WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Navigate To Candidate'),['status':'Submitted','testName':validNameUnique])

WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Email Cell',['email':validEmail]), 10, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_Test Submitted/btn_Reset Test',['email':validEmail]))

def message = WebUI.getText(findTestObject('Object Repository/Page_Test Submitted/txt_Reset_Message'))
WebUI.verifyMatch(message, 'Are you sure you want to reset this candidate to take the test?', false, FailureHandling.STOP_ON_FAILURE)


WebUI.click(findTestObject('Object Repository/Page_Test Submitted/btn_Reset_Cancel'))

WebUI.verifyElementNotPresent(findTestObject('Object Repository/Page_Test Submitted/cpn_Reset Modal'), 10)"
182,Reset candidate tests,TC183,TC183_Verify Reset candidate tests without select candidate_P3,On Submitted Candidate Tests listing page: Do not select any candidates > Click Reset Test button > System shows message “Please select at least one candidate.”,,P3,Yes,
183,Reset candidate tests,TC184,TC184_Verify Reset multiple candidate tests successfully from Submitted Candidate Tests listing page_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully
- There is at least 1 Ongoing Test on the system (Test name: ""InviteTest"").
- There is at least 2 submitted Candidates on the Test (TC160)

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on the Submitted option under Candidates section.
4. Select 2 Candidates from the invited list.
5. Click on Reset Test button.
6. Click on Ok button on Reset Candidates dialog.

Expected result
- All selected Candidates are displayed on the Invited page.
- Successful message displays as ""Reset Candidate successfully."".
- All selected Candidates are not displayed on Submitted page anymore.",P1,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = ""katalontestingontest@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp()
def setUp( ) {
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Invite'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Invite Candidate With Other Question'), ['name':validNameUnique, 'email':validEmail,'inviteName':validName, 'duration':true , 'multipe': true ])
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
	'Delete the candidate and test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test'), ['testName': validNameUnique, 'email':validEmail])
	
}
def getTestUrl() {
	def url = StringBuilder.newInstance()
	url<<GlobalVariable.G_SiteURL
	url<<""/challenge""
	def query = ""SELECT assignment.id from assignment JOIN candidate on assignment.\""candidateId\"" = candidate.id where email = '${validEmail}';""
	def assignmentId = DB.execute(query).get(0).get(0)
	query = ""SELECT token from candidate where email = '${validEmail}';""
	def candidateToken = DB.execute(query).get(0).get(0)
	url<<""/${assignmentId}?token=${candidateToken}""
	println(url.toString().getClass())
	return url.toString()
}

def url = getTestUrl()
WebUI.openBrowser(url)
WebUI.waitForPageLoad(15, FailureHandling.CONTINUE_ON_FAILURE)
//Add scrollToElement
WebUI.scrollToElement(findTestObject('Object Repository/Page_TakeTest/btn_Enter Test'), 3)
//WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Enter Test'), 10, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Enter Test'))

WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Start Test'), 65, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Start Test'))

//No answer and submit test
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Submit Test'))
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Submit Test Ok'))

//Add 'Enter feedback'
WebUI.click(findTestObject('Object Repository/Page_SendFeedback/star_ClarityVoting'))
WebUI.click(findTestObject('Object Repository/Page_SendFeedback/star_UsabilityVoting'))
WebUI.click(findTestObject('Object Repository/Page_SendFeedback/star_FairnessVoting'))
WebUI.scrollToElement(findTestObject('Object Repository/Page_SendFeedback/btn_SubmitFeedback'), 3)
WebUI.click(findTestObject('Object Repository/Page_SendFeedback/btn_SubmitFeedback'))

WebUI.delay(5)
WebUI.openBrowser(GlobalVariable.G_SiteURL)

WebUI.maximizeWindow()

WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Navigate To Candidate'),['status':'Submitted','testName':validNameUnique])

WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Email Cell',['email':validEmail]), 10, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_TestInvited/cbx_Select All'))

//Add scrollToElement
WebUI.scrollToElement(findTestObject('Object Repository/Page_Test Submitted/btn_Bulk Reset'), 3)

WebUI.click(findTestObject('Object Repository/Page_Test Submitted/btn_Bulk Reset'))

def message = WebUI.getText(findTestObject('Object Repository/Page_Test Submitted/txt_Reset_Message'))
WebUI.verifyMatch(message, 'Are you sure you want to reset the selected candidates to take the test?', false, FailureHandling.STOP_ON_FAILURE)

WebUI.comment('Delete all email')
CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.deleteAllEMails'(validEmail, '0865800354', 'Inbox')

WebUI.click(findTestObject('Object Repository/Page_Test Submitted/btn_Bulk Reset Ok'))

WebUI.waitForElementPresent(findTestObject('Object Repository/Page_AddTest/successToast'), 30)
message = WebUI.getText(findTestObject('Object Repository/Page_AddTest/successToast'))
WebUI.verifyMatch(message, 'Reset candidate successfully.', false, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_TakeTest/txt_Candidate Item',['status':'Invited']))
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Email Cell',['email':validEmail]), 10, FailureHandling.STOP_ON_FAILURE)

def numberOfEmail = CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.getEmailsCount'(validEmail, '0865800354', 'Inbox')
WebUI.verifyMatch(numberOfEmail.toString(), '1', false, FailureHandling.STOP_ON_FAILURE)
"
184,Reset candidate tests,TC185,TC185_Verify Reset candidate tests successfully from Scored Candidate Tests listing page_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Reset Test"" has been created in the system
- Above draft test is added 
 + one multiple choice question
- Publish above test and send an invitation to candidate A with full name ""Test A""
- Open the invitation link from user A email
 ++ A starts the test and answer MCQ question
 ++ A gives feedback and voting for the test
 ++ A submits the test and the feedback
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, search for the test ""Rest Test""
3. Click to open the on-going test ""Reset Test""
4. Select submenu ""Submitted""
5. Check the checkbox for submitted test from user A
6. Hit [Reset Test] button on the top right or the Reset icon on the current row
7. On the confirmation dialog ""ResetCandidates"", click OK


Expected result
- Cancel Candidate dialog message: ""Are you sure you want to reset the selected candidates to take the test?""
- Reset Candidates popup is closed
- Toast message displays ""Reset candidate successfully"".
- The test for user A is cancelled successfully",P1,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest283 TC2 "" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())
@Field String validEmail = ""katalontestingontest@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp()
def setUp( ) {
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Invite'
	WebUI.callTestCase(findTestCase('Common Test Cases/Test/Invite Candidate With MCQ Question'), ['name':validNameUnique, 'email':validEmail,'inviteName':validName, 'duration':false , 'multipe': false ])
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
	'Delete the candidate and test'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Challenge Test'), ['testName': validNameUnique, 'email':validEmail])
	
}
def getTestUrl() {
	def url = StringBuilder.newInstance()
	url<<GlobalVariable.G_SiteURL
	url<<""/challenge""
	def query = ""SELECT assignment.id from assignment JOIN candidate on assignment.\""candidateId\"" = candidate.id where email = '${validEmail}';""
	def assignmentId = DB.execute(query).get(0).get(0)
	query = ""SELECT token from candidate where email = '${validEmail}';""
	def candidateToken = DB.execute(query).get(0).get(0)
	url<<""/${assignmentId}?token=${candidateToken}""
	println(url.toString().getClass())
	return url.toString()
}

def url = getTestUrl()
WebUI.openBrowser(url)
WebUI.waitForPageLoad(15, FailureHandling.CONTINUE_ON_FAILURE)
//Add scrollToElement
WebUI.scrollToElement(findTestObject('Object Repository/Page_TakeTest/btn_Enter Test'), 3)
//WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Enter Test'), 10, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Enter Test'))

WebUI.waitForElementClickable(findTestObject('Page_TakeTest/btn_Start Test'), 65, FailureHandling.STOP_ON_FAILURE)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Start Test'))

WebUI.waitForElementClickable(findTestObject('Object Repository/Page_TakeTest/btn_Load Question'), 30)
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Load Question'))

WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Submit Test'))
WebUI.click(findTestObject('Object Repository/Page_TakeTest/btn_Submit Test Ok'))

//Add 'Enter feedback'
WebUI.click(findTestObject('Object Repository/Page_SendFeedback/star_ClarityVoting'))
WebUI.click(findTestObject('Object Repository/Page_SendFeedback/star_UsabilityVoting'))
WebUI.click(findTestObject('Object Repository/Page_SendFeedback/star_FairnessVoting'))
WebUI.scrollToElement(findTestObject('Object Repository/Page_SendFeedback/btn_SubmitFeedback'), 3)
WebUI.click(findTestObject('Object Repository/Page_SendFeedback/btn_SubmitFeedback'))
WebUI.delay(5)


WebUI.openBrowser(GlobalVariable.G_SiteURL)

WebUI.maximizeWindow()

WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Navigate To Candidate'),['status':'Scored','testName':validNameUnique])

WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Email Cell',['email':validEmail]), 10, FailureHandling.STOP_ON_FAILURE)

WebUI.scrollToElement(findTestObject('Object Repository/Page_Test Submitted/btn_Reset Test',['email':validEmail]), 3)
WebUI.click(findTestObject('Object Repository/Page_Test Submitted/btn_Reset Test',['email':validEmail]))

WebUI.comment('Delete all email')
CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.deleteAllEMails'(validEmail, '0865800354', 'Inbox')

def message = WebUI.getText(findTestObject('Object Repository/Page_Test Submitted/txt_Reset_Message'))
WebUI.verifyMatch(message, 'Are you sure you want to reset this candidate to take the test?', false, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_Test Submitted/btn_Reset_Confirm_OK'))

WebUI.waitForElementPresent(findTestObject('Object Repository/Page_AddTest/successToast'), 30)
message = WebUI.getText(findTestObject('Object Repository/Page_AddTest/successToast'))
WebUI.verifyMatch(message, 'Reset candidate successfully.', false, FailureHandling.STOP_ON_FAILURE)

WebUI.click(findTestObject('Object Repository/Page_TakeTest/txt_Candidate Item',['status':'Invited']))
WebUI.verifyElementPresent(findTestObject('Object Repository/Page_TakeTest/txt_Email Cell',['email':validEmail]), 10, FailureHandling.STOP_ON_FAILURE)

def numberOfEmail = CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.getEmailsCount'(validEmail, '0865800354', 'Inbox')
WebUI.verifyMatch(numberOfEmail.toString(), '1', false, FailureHandling.STOP_ON_FAILURE)
"
185,Update email templates in invite-only test,TC186,TC186_Verify Update Invite email successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system with Test Access is OFF (Test name: ""InviteTest"").

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on Email Templates option under Test section.
4. Update Subjective value to new valid value (ex: ""New subject"".
5. Update Email body with a valid value (ex: ""new body"").
6. Click on Save button.

Expected result
- Email template is updated successfully.
- Successful message displays as ""Update invite email template successfully."".
- New value displays on the Email template.",P1,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys

import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest"" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	
	WebUI.comment('There is at least one ongoing test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
	
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	
	WebUI.comment('Step 1: Click an ongoing test on the Tests listing page.')
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
	WebUI.delay(5)
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/switch_TestAccessible'))
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Ok_Toggle_Accessible'))
}
@TearDown
def teardown() {
	WebUI.comment('Remove the ongoing tested test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
}

WebUI.comment('Step 1: Click the Invite Email Template button')
WebUI.scrollToElement(findTestObject('Page_EmailTemplates/btn_email_Template'), 3)
WebUI.click(findTestObject('Page_EmailTemplates/btn_email_Template'), FailureHandling.STOP_ON_FAILURE)

//WebUI.comment('Step 2: Click Email Type')
//WebUI.click(findTestObject('Page_EmailTemplates/btn_Email Type',['order':1]))

WebUI.comment('Step 3: Enter valid new values')
WebUI.waitForElementVisible(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']),1)
WebUI.scrollToElement(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']), 1)
WebUI.click(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']))
WebUI.setText(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']), subjectTest, FailureHandling.STOP_ON_FAILURE)


WebUI.sendKeys(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']), Keys.chord(Keys.TAB), FailureHandling.STOP_ON_FAILURE)
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'invite']), Keys.chord(Keys.CONTROL, 'a'))
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'invite']), emailBodyTest, FailureHandling.CONTINUE_ON_FAILURE)
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'invite']), Keys.chord(Keys.TAB), FailureHandling.STOP_ON_FAILURE)

WebUI.comment('Step 4: Save changes')
WebUI.sendKeys(findTestObject('Page_EmailTemplates/btn_Submit'),Keys.chord(Keys.ENTER), FailureHandling.CONTINUE_ON_FAILURE)

WebUI.comment('Step 5: Show success message')
def givenMessage = WebUI.getText(findTestObject('Object Repository/Module_Navigation/toast_Success'))
WebUI.verifyMatch(givenMessage, 'Update Invite email template successfully.', false)

def afterReset = WebUI.getText(findTestObject('Page_EmailTemplates/ta_body',['type':'invite']))
WebUI.verifyMatch(emailBodyTest, afterReset, false)"
186,Update email templates in invite-only test,TC187,TC187_Verify Update Invite email unsuccessfully by invalid input_P2,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Update Email Template"" has been created in the system
- Above draft test is added one multiple choice question
- Above test has been published successfully with status ""On-going""
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, scrolldown to the bottom of the page 
3. Click ""Show more"" on the bottom of the page until you see your test card ""Update Email Template""
3. Click to open the on-going test
4. Select menu Overview on the submenu
5. Toggle ""Test Access"" to Off
6. Click OK to close Update accessibility popup
7. Open submenu ""Email Templates""
8. Select tab Invite Email
9. Enter more than 100 characters to the email subject
10. Verify error displays ""Test Name must be at most 100 characters.""
11. Update Email Body to have more than 1500 characters
12. Verify error displays ""Email Body must be at most 1500 characters.""
13. Reset to subject to empty
14. Verify error displays ""This field is required.""
15. Clear all the text within email body
16. Veify error displays ""This field is required""
17. Click [Save]

Expected result
- Email template is not Save successfully

",P2,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys

import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest"" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	
	WebUI.comment('There is at least one ongoing test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
	
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	
	WebUI.comment('Step 1: Click an ongoing test on the Tests listing page.')
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
	WebUI.delay(5)
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/switch_TestAccessible'))
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Ok_Toggle_Accessible'))
}
@TearDown
def teardown() {
	WebUI.comment('Remove the ongoing tested test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
}

WebUI.comment('Step 1: Click the Invite Email Template button')
WebUI.scrollToElement(findTestObject('Page_EmailTemplates/btn_email_Template'), 3)
WebUI.click(findTestObject('Page_EmailTemplates/btn_email_Template'), FailureHandling.STOP_ON_FAILURE)

//WebUI.comment('Step 2: Click Email Type')
//WebUI.click(findTestObject('Page_EmailTemplates/btn_Email Type',['order':1]))

WebUI.comment('Step 3: Enter valid new values')
WebUI.waitForElementVisible(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']),1)
WebUI.scrollToElement(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']), 1)
WebUI.click(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']))
WebUI.setText(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']), subjectTest, FailureHandling.STOP_ON_FAILURE)


WebUI.sendKeys(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']), Keys.chord(Keys.TAB), FailureHandling.STOP_ON_FAILURE)
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'invite']), Keys.chord(Keys.CONTROL, 'a'))
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'invite']), emailBodyTest, FailureHandling.CONTINUE_ON_FAILURE)
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'invite']), Keys.chord(Keys.TAB), FailureHandling.STOP_ON_FAILURE)
WebUI.comment('Step 4: Save changes')
WebUI.sendKeys(findTestObject('Page_EmailTemplates/btn_Submit'),Keys.chord(Keys.ENTER), FailureHandling.CONTINUE_ON_FAILURE)


WebUI.comment('Step 5: Verify error message when the value beyond the limit of the allowed number of characters')

def errorMessageSubjective = findTestObject('Object Repository/Page_InviteCandidates/Review Invite Email Template/errorMessage_Subjective')
def errorMessageEmailBody = findTestObject('Object Repository/Page_InviteCandidates/Review Invite Email Template/errorMessage_EmailBody')
def givenErrorSubjective = WebUI.getText(errorMessageSubjective)
def givenErrorMessageEmailBody = WebUI.getText(errorMessageEmailBody)

WebUI.verifyMatch(givenErrorSubjective, inValidSubjectiveOverLimit, false)
WebUI.verifyMatch(givenErrorMessageEmailBody, inValidEmailBodyOverLimit, false)

WebUI.comment('Step 6: Delete value')
WebUI.waitForElementVisible(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']),1)
WebUI.scrollToElement(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']), 1)
WebUI.click(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']))
WebUI.setText(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']), '', FailureHandling.STOP_ON_FAILURE)


WebUI.sendKeys(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']), Keys.chord(Keys.TAB), FailureHandling.STOP_ON_FAILURE)
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'invite']), Keys.chord(Keys.CONTROL, 'a'))
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'invite']), Keys.chord(Keys.DELETE), FailureHandling.CONTINUE_ON_FAILURE)
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'invite']), Keys.chord(Keys.TAB), FailureHandling.STOP_ON_FAILURE)
WebUI.comment('Step 4: Save changes')
WebUI.sendKeys(findTestObject('Page_EmailTemplates/btn_Submit'),Keys.chord(Keys.ENTER), FailureHandling.CONTINUE_ON_FAILURE)

WebUI.comment('Step 8: Verify error message: This field is required.')
givenErrorSubjective = WebUI.getText(errorMessageSubjective)
givenErrorMessageEmailBody = WebUI.getText(errorMessageEmailBody)

WebUI.verifyMatch(givenErrorSubjective, inValidSubjective, false)
WebUI.verifyMatch(givenErrorMessageEmailBody, inValidEmailBody, false)"
187,Update email templates in invite-only test,TC188,TC188_Verify Reset to get default email template_P3,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system with Test Access is OFF (Test name: ""InviteTest"").
- The Email template is updated different with default value (TC186).

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on Email Templates option under Test section.
4. Click on Reset to template button.
5. Update Email body with a valid value.
6. Click on Save button.

Expected result
- Email template is reset to default value successfully.
- Subjective value displays as [[KMS Technology] Invitation for {@TestName}]",P3,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys

import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest"" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	
	WebUI.comment('There is at least one ongoing test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
	
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	
	WebUI.comment('Step 1: Click an ongoing test on the Tests listing page.')
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
	WebUI.delay(5)
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/switch_TestAccessible'))
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Ok_Toggle_Accessible'))
}
@TearDown
def teardown() {
	WebUI.comment('Remove the ongoing tested test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
}

WebUI.comment('Step 1: Click the Invite Email Template button')
WebUI.scrollToElement(findTestObject('Page_EmailTemplates/btn_email_Template'), 3)
WebUI.click(findTestObject('Page_EmailTemplates/btn_email_Template'), FailureHandling.STOP_ON_FAILURE)

//WebUI.comment('Step 2: Click Email Type')
//WebUI.click(findTestObject('Page_EmailTemplates/btn_Email Type',['order':1]))

WebUI.comment('Step 3: Enter valid new values')
WebUI.waitForElementVisible(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']),1)
WebUI.scrollToElement(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']), 1)
WebUI.click(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']))
WebUI.setText(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']), subjectTest, FailureHandling.STOP_ON_FAILURE)


WebUI.sendKeys(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'invite']), Keys.chord(Keys.TAB), FailureHandling.STOP_ON_FAILURE)

def defaultTemplate = WebUI.getText(findTestObject('Page_EmailTemplates/ta_body',['type':'invite']))

WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'invite']), Keys.chord(Keys.CONTROL, 'a'))
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'invite']), emailBodyTest, FailureHandling.CONTINUE_ON_FAILURE)
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'invite']), Keys.chord(Keys.TAB), FailureHandling.STOP_ON_FAILURE)

WebUI.comment('Step 4: Save changes')
WebUI.sendKeys(findTestObject('Page_EmailTemplates/btn_Submit'),Keys.chord(Keys.ENTER), FailureHandling.CONTINUE_ON_FAILURE)

WebUI.comment('Step 5: Show success message')
def givenMessage = WebUI.getText(findTestObject('Object Repository/Module_Navigation/toast_Success'))
WebUI.verifyMatch(givenMessage, 'Update invite email template successfully.', false)

WebUI.comment('Step 6: Click reset and validate')
WebUI.click(findTestObject('Object Repository/Page_EmailTemplates/txt_Reset to Template'))

def afterReset = WebUI.getText(findTestObject('Page_EmailTemplates/ta_body',['type':'invite']))
WebUI.verifyMatch(defaultTemplate, afterReset, false)
"
188,Update email templates in invite-only test,TC189,TC189_Verify Update Reminder email successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Reminder Email Template"" has been created in the system
- Above draft test is added one multiple choice question
- Above test has been published successfully with status ""On-going""
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, scrolldown to the bottom of the page 
3. Click ""Show more"" on the bottom of the page until you see your test card ""Reminder Email Template""
3. Click to open the on-going test
4. Select menu Overview on the submenu
5. Toggle ""Test Access"" to Off
6. Click OK to close Update accessibility popup
7. Open submenu ""Email Templates""
8. Select tab Reminder Email
9. Update email Subject to ""Please take the test""
10. Update email body to ""This test is important""
11. Click [Save]

Expected result
- Email template is save successfully
- Toast message displays ""Update reminder email template successfully.""

",P1,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys

import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest"" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	
	WebUI.comment('There is at least one ongoing test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
	
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	
	WebUI.comment('Step 1: Click an ongoing test on the Tests listing page.')
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
	WebUI.delay(5)
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/switch_TestAccessible'))
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Ok_Toggle_Accessible'))
}
@TearDown
def teardown() {
	WebUI.comment('Remove the ongoing tested test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
}

WebUI.comment('Step 1: Click the remind Email Template button')
//WebUI.scrollToElement(findTestObject('Page_EmailTemplates/btn_email_Template'), 3)
WebUI.click(findTestObject('Page_EmailTemplates/btn_email_Template'), FailureHandling.STOP_ON_FAILURE)

WebUI.comment('Step 2: Click Email Type')
WebUI.click(findTestObject('Object Repository/Page_EmailTemplates/tab_Reminder_Email'))

WebUI.comment('Step 3: Enter valid new values')
WebUI.waitForElementVisible(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'reminder']),1)
WebUI.scrollToElement(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'reminder']), 1)
WebUI.click(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'reminder']))
WebUI.setText(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'reminder']), subjectTest, FailureHandling.STOP_ON_FAILURE)


WebUI.sendKeys(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'reminder']), Keys.chord(Keys.TAB), FailureHandling.STOP_ON_FAILURE)
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'reminder']), Keys.chord(Keys.CONTROL, 'a'))
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'reminder']), emailBodyTest, FailureHandling.CONTINUE_ON_FAILURE)
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'reminder']), Keys.chord(Keys.TAB), FailureHandling.STOP_ON_FAILURE)

WebUI.comment('Step 4: Save changes')
def submit = findTestObject('Page_EmailTemplates/btn_Submit')
if (true) {
	WebUI.scrollToElement(submit, 3, FailureHandling.CONTINUE_ON_FAILURE)
	try {
		WebUI.click(submit, FailureHandling.STOP_ON_FAILURE)
	}
	catch (Exception e) {
		WebDriver driver = DriverFactory.getWebDriver()
		WebElement element = WebUiCommonHelper.findWebElement(submit, 5)
		JavascriptExecutor executor = ((driver) as JavascriptExecutor)
		executor.executeScript('arguments[0].click()', element)
	}
}

WebUI.comment('Step 5: Show success message')
def givenMessage = WebUI.getText(findTestObject('Object Repository/Module_Navigation/toast_Success'))
WebUI.verifyMatch(givenMessage, 'Update Reminder email template successfully.', false)

def afterReset = WebUI.getText(findTestObject('Page_EmailTemplates/ta_body',['type':'reminder']))
WebUI.verifyMatch(emailBodyTest, afterReset, false)"
189,Update email templates in invite-only test,TC190,TC190_Verify Update Invite Cancelled email successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.
- There is at least 1 Ongoing Test on the system with Test Access is OFF (Test name: ""InviteTest"").

Steps:
1. Click on the Tests link from left menu.
2. Click on the Ongoing Test on the page (""InviteTest"").
3. Click on Email Templates option under Test section.
4. Select the Invite Cancelled Email tab.
5. Update Subjective value to new valid value (ex: ""New subject"".
6. Update Email body with a valid value (ex: ""new body"").
7. Click on Save button.

Expected result
- Email template is updated successfully.
- Successful message displays as ""Update invite cancelled email template successfully."".
- New value displays on the Email template.""",P1,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys

import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest"" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	
	WebUI.comment('There is at least one ongoing test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
	
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	
	WebUI.comment('Step 1: Click an ongoing test on the Tests listing page.')
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
	WebUI.delay(5)
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/switch_TestAccessible'))
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Ok_Toggle_Accessible'))
}
@TearDown
def teardown() {
	WebUI.comment('Remove the ongoing tested test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
}

WebUI.comment('Step 1: Click the remind Email Template button')
//WebUI.scrollToElement(findTestObject('Page_EmailTemplates/btn_email_Template'), 3)
WebUI.click(findTestObject('Page_EmailTemplates/btn_email_Template'), FailureHandling.STOP_ON_FAILURE)

WebUI.comment('Step 2: Click Email Type')
WebUI.click(findTestObject('Object Repository/Page_EmailTemplates/tab_Cancelled_Email'))

WebUI.comment('Step 3: Enter valid new values')
WebUI.waitForElementVisible(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'cancelled']),1)
WebUI.scrollToElement(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'cancelled']), 1)
WebUI.click(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'cancelled']))
WebUI.setText(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'cancelled']), subjectTest, FailureHandling.STOP_ON_FAILURE)


WebUI.sendKeys(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'cancelled']), Keys.chord(Keys.TAB), FailureHandling.STOP_ON_FAILURE)
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'cancelled']), Keys.chord(Keys.CONTROL, 'a'))
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'cancelled']), emailBodyTest, FailureHandling.CONTINUE_ON_FAILURE)
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'cancelled']), Keys.chord(Keys.TAB), FailureHandling.STOP_ON_FAILURE)

WebUI.comment('Step 4: Save changes')
def submit = findTestObject('Page_EmailTemplates/btn_Submit')
if (true) {
	WebUI.scrollToElement(submit, 3, FailureHandling.CONTINUE_ON_FAILURE)
	try {
		WebUI.click(submit, FailureHandling.STOP_ON_FAILURE)
	}
	catch (Exception e) {
		WebDriver driver = DriverFactory.getWebDriver()
		WebElement element = WebUiCommonHelper.findWebElement(submit, 5)
		JavascriptExecutor executor = ((driver) as JavascriptExecutor)
		executor.executeScript('arguments[0].click()', element)
	}
}

WebUI.comment('Step 5: Show success message')
def givenMessage = WebUI.getText(findTestObject('Object Repository/Module_Navigation/toast_Success'))
WebUI.verifyMatch(givenMessage, 'Update Invite Cancelled email template successfully.', false)

def afterReset = WebUI.getText(findTestObject('Page_EmailTemplates/ta_body',['type':'cancelled']))
WebUI.verifyMatch(emailBodyTest, afterReset, false)"
190,Update email templates in invite-only test,TC191,TC191_Verify Update Thank You email successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- There is one draft test named ""Thank You Email Template"" has been created in the system
- Above draft test is added one multiple choice question
- Above test has been published successfully with status ""On-going""
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, click Tests
2. On the overview page, scrolldown to the bottom of the page 
3. Click ""Show more"" on the bottom of the page until you see your test card ""Thank You Email Template""
3. Click to open the on-going test
4. Select menu Overview on the submenu
5. Toggle ""Test Access"" to Off
6. Click OK to close Update accessibility popup
7. Open submenu ""Email Templates""
8. Select tab Thank You Email
9. Update email Subject to ""Thanks for taking the test""
10. Update email body to ""Very apprecicate""
11. Click [Save]

Expected result
- Email template is save successfully
- Toast message displays ""Update thank email template successfully.""",P1,Yes,"import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys

import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.common.WebUiCommonHelper
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field

@Field String validNameUnique = ""Ontest"" + DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp
def setup() {
	def testsNavItem = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
	def testNameSpan = findTestObject('Object Repository/Page_SearchTests/span_Ongoing_TestName', ['testName': validNameUnique])
	def testItemByName = findTestObject('Object Repository/Page_SearchTests/item_Ongoing_Test_By_Name', ['testName': validNameUnique])
	
	WebUI.comment('There is at least one ongoing test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test'), ['testName': validNameUnique])
	
	WebUI.comment('Back to the onogoing test list')
	WebUI.click(testsNavItem, FailureHandling.STOP_ON_FAILURE)
	
	WebUI.comment('Step 1: Click an ongoing test on the Tests listing page.')
	if (true) {
		WebUI.scrollToElement(testNameSpan, 3, FailureHandling.CONTINUE_ON_FAILURE)
		try {
			WebUI.click(testItemByName, FailureHandling.STOP_ON_FAILURE)
		}
		catch (Exception e) {
			WebDriver driver = DriverFactory.getWebDriver()
			WebElement element = WebUiCommonHelper.findWebElement(testItemByName, 5)
			JavascriptExecutor executor = ((driver) as JavascriptExecutor)
			executor.executeScript('arguments[0].click()', element)
		}
	}
	WebUI.delay(5)
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/switch_TestAccessible'))
	WebUI.click(findTestObject('Object Repository/Page_TestOverview/btn_Ok_Toggle_Accessible'))
}
@TearDown
def teardown() {
	WebUI.comment('Remove the ongoing tested test')
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test'), ['testName': validNameUnique])
}

WebUI.comment('Step 1: Click the remind Email Template button')
//WebUI.scrollToElement(findTestObject('Page_EmailTemplates/btn_email_Template'), 3)
WebUI.click(findTestObject('Page_EmailTemplates/btn_email_Template'), FailureHandling.STOP_ON_FAILURE)

WebUI.comment('Step 2: Click Email Type')
WebUI.click(findTestObject('Object Repository/Page_EmailTemplates/tab_Thanks_Email'))

WebUI.comment('Step 3: Enter valid new values')
WebUI.waitForElementVisible(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'thank']),1)
WebUI.scrollToElement(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'thank']), 1)
WebUI.click(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'thank']))
WebUI.setText(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'thank']), subjectTest, FailureHandling.STOP_ON_FAILURE)


WebUI.sendKeys(findTestObject('Page_EmailTemplates/ipn_Subjective',['type':'thank']), Keys.chord(Keys.TAB), FailureHandling.STOP_ON_FAILURE)
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'thank']), Keys.chord(Keys.CONTROL, 'a'))
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'thank']), emailBodyTest, FailureHandling.CONTINUE_ON_FAILURE)
WebUI.sendKeys(findTestObject('Page_EmailTemplates/ta_body',['type':'thank']), Keys.chord(Keys.TAB), FailureHandling.STOP_ON_FAILURE)

WebUI.comment('Step 4: Save changes')
def submit = findTestObject('Page_EmailTemplates/btn_Submit')
if (true) {
	WebUI.scrollToElement(submit, 3, FailureHandling.CONTINUE_ON_FAILURE)
	try {
		WebUI.click(submit, FailureHandling.STOP_ON_FAILURE)
	}
	catch (Exception e) {
		WebDriver driver = DriverFactory.getWebDriver()
		WebElement element = WebUiCommonHelper.findWebElement(submit, 5)
		JavascriptExecutor executor = ((driver) as JavascriptExecutor)
		executor.executeScript('arguments[0].click()', element)
	}
}

WebUI.comment('Step 5: Show success message')
def givenMessage = WebUI.getText(findTestObject('Object Repository/Module_Navigation/toast_Success'))
WebUI.verifyMatch(givenMessage, 'Update Thank you email template successfully.', false)

def afterReset = WebUI.getText(findTestObject('Page_EmailTemplates/ta_body',['type':'thank']))
WebUI.verifyMatch(emailBodyTest, afterReset, false)"
191,Create member,TC192,TC192_Verify Navigation to Members_P2,Login to the system > On Settings: Click Members > Verify Members page is displayed > Verify menu,,P3,Yes,
192,Create member,TC193,TC193_Verify Create member successfully_P1,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully.

Steps:
1. Navigate to Members page (Settings -> Members).
2. Click on Create Member button.
3. Input all required fields.
 ex: Full Name: h nguyen
 Email:hnguyen@gmail.com
 Role: Super Admin
4. Click on Create button.

Expected result
- Added member displays on the list.
- Successful message displays as ""Create member successfully."".",P1,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validEmail = ""katalontestingontest@gmail.com""
@Field String validName = ""Hoa Pham""

@SetUp()
def setUp( ) {	
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Login'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'),null)
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
	'delete user'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Members/Tear Down Member'), ['email': validEmail ])
}

WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_Members'))

WebUI.click(findTestObject('Object Repository/Page_Create Member/btn_Create Member'))

WebUI.setText(findTestObject('Object Repository/Page_Create Member/inp_Email'), validEmail)

WebUI.setText(findTestObject('Object Repository/Page_Create Member/inp_Full Name'), validName)

WebUI.click(findTestObject('Object Repository/Page_Create Member/select_Role'))

WebUI.click(findTestObject('Object Repository/Page_Create Member/txt_Role',['role':'Super Admin']))

WebUI.comment('Delete all email')
CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.deleteAllEMails'(validEmail, '0865800354', 'Inbox')

WebUI.click(findTestObject('Object Repository/Page_Create Member/btn_modal_add'))

def givenMessage = WebUI.getText(findTestObject('Object Repository/Module_Navigation/toast_Success'))
WebUI.verifyMatch(givenMessage, 'Create member successfully.', false)

def numberOfEmail = CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.getEmailsCount'(validEmail, '0865800354', 'Inbox')
WebUI.verifyMatch(numberOfEmail.toString(), '1', false, FailureHandling.STOP_ON_FAILURE)"
193,Create member,TC194,TC194_Verify Create member unsuccessfully by Cancel_P2,Verify login successfully with valid credentials,"Pre-condition
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, open menu Settings
2. Select option Members under Settings menu
3. Click button [Create Member] on the top right 
4. Verify Create Member dialog opens
5. Enter more than 100 character to Full Name
6. Verify error message ""Full Name must be at most 100 characters.""
7. Enter invalid email address to Email ""testemail.com""
8. Verify error message ""Please enter a valid email address.""
9. Clear out the Full Name
10. Verify error message ""Full Name is required""
11. Fill in email address ""admin@mail.com""
12. Verify error message ""Email already exists.""
13. Reset email field to empty
14. Verify error message ""Email is required.""
15. Hit button ""Create""


Expected result
- Create member is NOT successfull due to error",P2,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validEmail = ""loremipsumdolorsitametvelsumoetiamtinciduntexdicuntlaboramuseuhas,etiamhabemustemporibususuad.meisdolorumestnovimconguetationreprehenduntne@gmail.com""
@Field String validName = ""Lorem ipsum dolor sit amet, vel sumo etiam tincidunt ex, dicunt laboramus eu has, etiam habemus temporibus usu ad. Meis dolorum est no, vim congue tation reprehendunt ne. Sea cu movet sensibus. Commune antiopam duo ne, ex saepe bonorum has.""

@SetUp()
def setUp( ) {
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Login'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'),null)
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
}

def checkErrors(email, fullname, expects) {
	WebUI.setText(findTestObject('Object Repository/Page_Create Member/inp_Email'), email)
	
	WebUI.setText(findTestObject('Object Repository/Page_Create Member/inp_Full Name'), fullname)
	
	WebUI.click(findTestObject('Object Repository/Page_Create Member/select_Role'))
	
	WebUI.click(findTestObject('Object Repository/Page_Create Member/txt_Role',['role':'Super Admin']))
	
	List errors = WebUI.findWebElements(findTestObject('Object Repository/Page_Create Member/txt_Invalid Message'),30)
	
	int errorsCount = errors.size()
	
	
	if (errorsCount > 0) {
		for (int i = 0; i < errorsCount; i++) {
			WebUI.verifyMatch(errors.get(i).getText(),expects[i], false)
		}
	}
}

WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_Members'))

WebUI.click(findTestObject('Object Repository/Page_Create Member/btn_Create Member'))

checkErrors(validEmail, validName, [""Full Name must be at most 100 characters."",""Email must be at most 100 characters.""])
checkErrors('','', [""Full Name is required."",""Email is required.""])
checkErrors('admin@mail.com','', [""Full Name is required."",""Email already exists.""])"
194,Create member,TC195,TC195_Verify Login successfully after Create member_P1,Verify login successfully with valid credentials,"Pre-condition
- A new user is created by Admin (TC193)

Steps:
1. Open mailbox as created member (hnguyen@gmail.com).
2. Click on Create Passwork link in the ""Set password"" email.
3. Input a valid password to New password and Confirm Password fields on Create Password page.
4. Click on Create password button.
5. Input email and password to Login page.
6. Click on Login button.

Expected result
- New user can login to Ontest site successfully.",P1,Yes,"import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import internal.GlobalVariable as GlobalVariable
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.database.Database as DB
import generator.DynamicGenerator
import groovy.transform.Field

@Field String validEmail = ""katalontestingontest@gmail.com""
@Field String validName = ""Hoa Pham""
@Field String password = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@a1""

@SetUp()
def setUp( ) {	
	WebDriver driver = DriverFactory.getWebDriver()
	
	'Login'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login'),null)
	'Connect DB'
	DB.connect(GlobalVariable.G_DB_HOST, GlobalVariable.G_DB_NAME, GlobalVariable.G_DB_PORT, GlobalVariable.G_DB_USERNAME,
		GlobalVariable.G_DB_PASSWORD)
}
@TearDown()
def tearDown() {
	'delete user'
	WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Members/Tear Down Member'), ['email': validEmail ])
}

def getSetPasswordUrl() {
	def url = StringBuilder.newInstance()
	url<<GlobalVariable.G_SiteURL
	url<<""/create-password?token=""
	def query = ""SELECT reset_password_token from \""user\"" where email = '${validEmail}';""
	def userToken = DB.execute(query).get(0).get(0)
	url<<""${userToken}""
	println(url)
	return url.toString()
}


WebUI.click(findTestObject('Object Repository/Module_Navigation/nav_Members'))

WebUI.click(findTestObject('Object Repository/Page_Create Member/btn_Create Member'))

WebUI.setText(findTestObject('Object Repository/Page_Create Member/inp_Email'), validEmail)

WebUI.setText(findTestObject('Object Repository/Page_Create Member/inp_Full Name'), validName)

WebUI.click(findTestObject('Object Repository/Page_Create Member/select_Role'))

WebUI.click(findTestObject('Object Repository/Page_Create Member/txt_Role',['role':'Super Admin']))

WebUI.comment('Delete all email')
CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.deleteAllEMails'(validEmail, '0865800354', 'Inbox')

WebUI.click(findTestObject('Object Repository/Page_Create Member/btn_modal_add'))

def givenMessage = WebUI.getText(findTestObject('Object Repository/Module_Navigation/toast_Success'))
WebUI.verifyMatch(givenMessage, 'Create member successfully.', false)

def numberOfEmail = CustomKeywords.'com.testwithhari.katalon.plugins.Gmail.getEmailsCount'(validEmail, '0865800354', 'Inbox')
WebUI.verifyMatch(numberOfEmail.toString(), '1', false, FailureHandling.STOP_ON_FAILURE)

def url = getSetPasswordUrl()
WebUI.openBrowser(url)
WebUI.waitForPageLoad(15, FailureHandling.CONTINUE_ON_FAILURE)

WebUI.setText(findTestObject('Object Repository/Page_Set Password/txt_Password'), password)
WebUI.setText(findTestObject('Object Repository/Page_Set Password/txt_Repassword'), password)
WebUI.click(findTestObject('Object Repository/Page_Set Password/btn_Set Password'))

WebUI.callTestCase(findTestCase('Test Cases/Common Test Cases/Login/Login With Password And Username'), ['username':validEmail,'password':password])"
195,Log in with granted permission,TC196,TC196_Verify permission for Super Admin role_P1,Verify login successfully with valid credentials,"Pre-condition
- There is a test ""Admin permission checks"" has been published in the system successfully
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, open menu Settings
2. Select option Members under Settings menu
3. Click button [Create Member] on the top right 
4. Verify Create Member dialog opens
5. Fill in Full Name as ""Admin Role Test""
6. Key in Email Address as ""adminTest@mail.com""
7. Select role as ""Super Admin""
8. Click [Create] and user should be created successfully
9. Open the email from Admin Role Test mail box
10. Set a password for user and complete the form
11. Log in to OnTest as Admin Role Test

Expected result
- Admin can log in to system susscessfully
- Admin can access menu Librabry
- Admin can access menu Tests
- Admin can access on-going test ""Admin permission checks""
- Admin can access submenu ""Reviewing""
- Admin can access submenu ""Scored""
- Admin can go to Settings -> Members on the nav side bar
- Admin can navigate to Settings -> Integration from the global nav",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field
import internal.GlobalVariable

@Field String memberEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()).toString().toLowerCase() + ""@gmail.com""
@Field String memberName = ""Hoa Pham""
@Field String memberPassword = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@a1""
@Field String role = ""Super Admin""
@Field String testName = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp
def setup() {
	WebUI.comment('Create a super admin member')
	if (true) {
		def createMemberTestCase = findTestCase('Test Cases/Common Test Cases/Members/Create A Member')
		WebUI.callTestCase(createMemberTestCase, [""role"": role, ""email"": memberEmail, ""name"": memberName, ""password"": memberPassword])
	}
}

@TearDown
def teardown() {
	WebUI.comment('Remove the tested member')
	if (true) {
		def removeMemberTestCase = findTestCase('Test Cases/Common Test Cases/Members/Tear Down Member')
		WebUI.callTestCase(removeMemberTestCase, ['email': memberEmail ])
	}
	
	WebUI.comment('Remove the tested test')
	if (true) {
		def removeTheTestedTestTestCase = findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test')
		WebUI.callTestCase(removeTheTestedTestTestCase, ['testName': testName])
	}
}

WebUI.comment('Step 1: Log in to the system with the Super Admin role')
if (true) {
	def loginTestCase = findTestCase('Test Cases/Common Test Cases/Login/Login With Password And Username')
	WebUI.callTestCase(loginTestCase, ['username': memberEmail,'password': memberPassword])
}

WebUI.comment('Step 2: Verify can see and take actions on all modules: Libraries, Tests, Candidate Tests, Settings')
if (true) {
	WebUI.comment('Libraries')
	if (true) {
		def libraryNav = findTestObject('Object Repository/Module_Navigation/btn_Libraries')
		WebUI.verifyElementVisible(libraryNav)
		WebUI.verifyElementClickable(libraryNav)
	}
	
	
	WebUI.comment('Tests')
	if (true) {
		def testNav = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
		WebUI.verifyElementVisible(testNav)
		WebUI.verifyElementClickable(testNav)
	}
	
	WebUI.comment('Candidate Tests')
	if (true) {
		def createAnOngoingTest = findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test')
		def openAnOngoingTestByNameTestCase = findTestCase('Test Cases/Common Test Cases/Test/Open An Ongoing Test By Test Name')
		WebUI.callTestCase(createAnOngoingTest, [""testName"": testName, ""hasLogin"": true])
		WebUI.callTestCase(openAnOngoingTestByNameTestCase, [""testName"": testName])
		
		def reviewingTab = findTestObject('Object Repository/Ongoing Test Sidebar/tab_ReviewingCandidates')
		WebUI.verifyElementVisible(reviewingTab)
		WebUI.verifyElementClickable(reviewingTab)
		
		def scoredTab = findTestObject('Object Repository/Ongoing Test Sidebar/tab_ScoredCandidates')
		WebUI.verifyElementVisible(scoredTab)
		WebUI.verifyElementClickable(scoredTab)
	}
	
	WebUI.comment('Setting > Members')
	if (true) {
		def memberNav = findTestObject('Object Repository/Module_Navigation/nav_Members')
		WebUI.verifyElementVisible(memberNav)
		WebUI.verifyElementClickable(memberNav)
	}
	
	WebUI.comment('Setting > Intergration')
	if (true) {
		def integrationsNav = findTestObject('Object Repository/Module_Navigation/nav_Integrations')
		WebUI.verifyElementVisible(integrationsNav)
		WebUI.verifyElementClickable(integrationsNav)
	}
}

"
196,Log in with granted permission,TC197,TC197_Verify permission for Library Admin role_P1,Verify login successfully with valid credentials,"Pre-condition
- Add a user with role Library Admin to the system (TC193).
- Active the Library Admin account (TC194).

Steps:
1. Login to the System as Library Admin.
2. Verify the Navigation left menu.

Expected result:
- Libraries tab displays on left menu.
- The Tests, Setting tabs are not displayed to this user role.",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import com.github.kklisura.cdt.protocol.commands.Log
import com.google.common.base.Verify
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field
import internal.GlobalVariable as GlobalVariable

@Field String memberEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()).toString().toLowerCase() + ""@gmail.com""
@Field String memberName = ""Hoa Pham""
@Field String memberPassword = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@a1""
@Field String role = ""Library Admin""
@Field String testName = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp
def setup() {
	WebUI.comment('Create a library admin member')
	if (true) {
		def createMemberTestCase = findTestCase('Test Cases/Common Test Cases/Members/Create A Member')
		WebUI.callTestCase(createMemberTestCase, [""role"": role, ""email"": memberEmail, ""name"": memberName, ""password"": memberPassword])
	}
}

@TearDown
def teardown() {
	WebUI.comment('Remove the tested member')
	if (true) {
		def removeMemberTestCase = findTestCase('Test Cases/Common Test Cases/Members/Tear Down Member')
		WebUI.callTestCase(removeMemberTestCase, ['email': memberEmail ])
	}
	
	WebUI.comment('Remove the tested test')
	if (true) {
		def removeTheTestedTestTestCase = findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test')
		WebUI.callTestCase(removeTheTestedTestTestCase, ['testName': testName])
	}
}

WebUI.comment('Step 1: Log in to the system with the Super Admin role')
if (true) {
	def loginTestCase = findTestCase('Test Cases/Common Test Cases/Login/Login With Password And Username')
	WebUI.callTestCase(loginTestCase, ['username': memberEmail,'password': memberPassword])
}

WebUI.comment('Step 2: Verify can ONLY see and take actions on the module: Libraries')
if (true) {
	WebUI.comment('Libraries')
	if (true) {
		def libraryNav = findTestObject('Object Repository/Module_Navigation/btn_Libraries')
		WebUI.verifyElementVisible(libraryNav)
		WebUI.verifyElementClickable(libraryNav)
	}
	
	WebUI.comment('Can not see Tests')
	if (true) {
		def testNav = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
		WebUI.verifyElementNotPresent(testNav, 3)
	}
	
	WebUI.comment('Can not see Setting > Members')
	if (true) {
		def memberNav = findTestObject('Object Repository/Module_Navigation/nav_Members')
		WebUI.verifyElementNotPresent(memberNav, 3)
	}
	
	WebUI.comment('Can not see Setting > Intergration')
	if (true) {
		def integrationsNav = findTestObject('Object Repository/Module_Navigation/nav_Integrations')
		WebUI.verifyElementNotPresent(integrationsNav, 3)
	}
}
"
197,Log in with granted permission,TC198,TC198_Verify permission for Test Admin role_P1,Verify login successfully with valid credentials,"Pre-condition
- There is a test ""Test Admin permission checks"" has been published in the system successfully
- User has logged in to OnTest successfully (refer TC-001)

Steps
1. From the navigation bar on the left site, open menu Settings
2. Select option Members under Settings menu
3. Click button [Create Member] on the top right 
4. Verify Create Member dialog opens
5. Fill in Full Name as ""Test Admin Role Test""
6. Key in Email Address as ""adminTest@mail.com""
7. Select role as ""Test Admin""
8. Click [Create] and user should be created successfully
9. Open the email from Test Admin Role Test mail box
10. Set a password for user and complete the form
11. Log in to OnTest asTest Admin Role Test

Expected result
- Admin can log in to system susscessfully
- Admin CANNOT access menu Librabry
- Admin can access menu Tests
- Admin can access on-going test ""Admin permission checks""
- Admin can access submenu ""Reviewing""
- Admin can access submenu ""Scored""
- Admin CANNOT go to Settings -> Members on the nav side bar
- Admin CANNOT navigate to Settings -> Integration from the global nav",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field
import internal.GlobalVariable as GlobalVariable

@Field String memberEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()).toString().toLowerCase() + ""@gmail.com""
@Field String memberName = ""Hoa Pham""
@Field String memberPassword = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@a1""
@Field String role = ""Test Admin""
@Field String testName = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp
def setup() {
	WebUI.comment('Create a test admin member')
	if (true) {
		def createMemberTestCase = findTestCase('Test Cases/Common Test Cases/Members/Create A Member')
		WebUI.callTestCase(createMemberTestCase, [""role"": role, ""email"": memberEmail, ""name"": memberName, ""password"": memberPassword])
	}
}

@TearDown
def teardown() {
	WebUI.comment('Remove the tested member')
	if (true) {
		def removeMemberTestCase = findTestCase('Test Cases/Common Test Cases/Members/Tear Down Member')
		WebUI.callTestCase(removeMemberTestCase, ['email': memberEmail ])
	}
	
	WebUI.comment('Remove the tested test')
	if (true) {
		def removeTheTestedTestTestCase = findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test')
		WebUI.callTestCase(removeTheTestedTestTestCase, ['testName': testName])
	}
}

WebUI.comment('Step 1: Log in to the system with the Super Admin role')
if (true) {
	def loginTestCase = findTestCase('Test Cases/Common Test Cases/Login/Login With Password And Username')
	WebUI.callTestCase(loginTestCase, ['username': memberEmail,'password': memberPassword])
}

WebUI.comment('Step 2: Verify can ONLY see and take actions on the module: Tests, Candidate Tests')
if (true) {
	WebUI.comment('Can not see Libraries')
	if (true) {
		def libraryNav = findTestObject('Object Repository/Module_Navigation/btn_Libraries')
		WebUI.verifyElementNotPresent(libraryNav, 3)
	}
	
	WebUI.comment('Tests')
	if (true) {
		def testNav = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
		WebUI.verifyElementVisible(testNav)
		WebUI.verifyElementClickable(testNav)
	}
	
	WebUI.comment('Candidates Tests')
	if (true) {
		def createAnOngoingTest = findTestCase('Test Cases/Common Test Cases/Test/Create An Ongoing Test')
		def openAnOngoingTestByNameTestCase = findTestCase('Test Cases/Common Test Cases/Test/Open An Ongoing Test By Test Name')
		WebUI.callTestCase(createAnOngoingTest, [""testName"": testName, ""hasLogin"": true])
		WebUI.callTestCase(openAnOngoingTestByNameTestCase, [""testName"": testName])
		
		def reviewingTab = findTestObject('Object Repository/Ongoing Test Sidebar/tab_ReviewingCandidates')
		WebUI.verifyElementVisible(reviewingTab)
		WebUI.verifyElementClickable(reviewingTab)
		
		def scoredTab = findTestObject('Object Repository/Ongoing Test Sidebar/tab_ScoredCandidates')
		WebUI.verifyElementVisible(scoredTab)
		WebUI.verifyElementClickable(scoredTab)
	}
	
	WebUI.comment('Can not see Setting > Members')
	if (true) {
		def memberNav = findTestObject('Object Repository/Module_Navigation/nav_Members')
		WebUI.verifyElementNotPresent(memberNav, 3)
	}
	
	WebUI.comment('Can not see Setting > Intergration')
	if (true) {
		def integrationsNav = findTestObject('Object Repository/Module_Navigation/nav_Integrations')
		WebUI.verifyElementNotPresent(integrationsNav, 3)
	}
}

"
198,Log in with granted permission,TC199,TC199_Verify permission for Reviewer role_P1,Verify login successfully with valid credentials,"Pre-condition
- Add a user with role Reviewer to the system (TC193).
- Active the Reviewer account (TC194).

Steps:
1. Login to the System as Reviewer.
2. Verify the Navigation left menu.

Expected result:
- Tests tab displays on left menu.
- The Libraries, Setting tabs are not displayed to this user role.",P1,Yes,"import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject

import com.github.kklisura.cdt.protocol.commands.Log
import com.google.common.base.Verify
import com.kms.katalon.core.annotation.SetUp
import com.kms.katalon.core.annotation.TearDown
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI

import generator.DynamicGenerator
import groovy.transform.Field
import internal.GlobalVariable as GlobalVariable

@Field String memberEmail = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()).toString().toLowerCase() + ""@gmail.com""
@Field String memberName = ""Hoa Pham""
@Field String memberPassword = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass()) + ""@a1""
@Field String role = ""Reviewer""
@Field String testName = DynamicGenerator.getInstance().getDynamicVariableByClassName(getClass())

@SetUp
def setup() {
	WebUI.comment('Create a reviewer member')
	if (true) {
		def createMemberTestCase = findTestCase('Test Cases/Common Test Cases/Members/Create A Member')
		WebUI.callTestCase(createMemberTestCase, [""role"": role, ""email"": memberEmail, ""name"": memberName, ""password"": memberPassword])
	}
}

@TearDown
def teardown() {
	WebUI.comment('Remove the tested member')
	if (true) {
		def removeMemberTestCase = findTestCase('Test Cases/Common Test Cases/Members/Tear Down Member')
		WebUI.callTestCase(removeMemberTestCase, ['email': memberEmail ])
	}
	
	WebUI.comment('Remove the tested test')
	if (true) {
		def removeTheTestedTestTestCase = findTestCase('Test Cases/Common Test Cases/Test/Tear Down Test')
		WebUI.callTestCase(removeTheTestedTestTestCase, ['testName': testName])
	}
}

WebUI.comment('Step 1: Log in to the system with the Super Admin role')
if (true) {
	def loginTestCase = findTestCase('Test Cases/Common Test Cases/Login/Login With Password And Username')
	WebUI.callTestCase(loginTestCase, ['username': memberEmail,'password': memberPassword])
}

WebUI.comment('Step 2: Verify can ONLY see and take actions on the module: Candidate Tests')
if (true) {
	WebUI.comment('Can not see Libraries')
	if (true) {
		def libraryNav = findTestObject('Object Repository/Module_Navigation/btn_Libraries')
		WebUI.verifyElementNotPresent(libraryNav, 3)
	}
	
	WebUI.comment('Tests')
	if (true) {
		def testNav = findTestObject('Object Repository/Module_Navigation/nav_item_tests')
		WebUI.verifyElementVisible(testNav)
		WebUI.verifyElementClickable(testNav)
	}
	
	WebUI.comment('Candidates Tests')
	if (true) {
		// Because the assign reviewer feature has not developed yet, so this assert will be update later.
	}
	
	WebUI.comment('Can not see Setting > Members')
	if (true) {
		def memberNav = findTestObject('Object Repository/Module_Navigation/nav_Members')
		WebUI.verifyElementNotPresent(memberNav, 3)
	}
	
	WebUI.comment('Can not see Setting > Intergration')
	if (true) {
		def integrationsNav = findTestObject('Object Repository/Module_Navigation/nav_Integrations')
		WebUI.verifyElementNotPresent(integrationsNav, 3)
	}
}
"
199,Log in with granted permission,TC200,TC200_Verify permission for Combine role (Super Admin + other)_P2,Login to the system with Combine role (Super Admin + other)> user can ONLY see and take actions they are allowed,,P2,Yes,
200,Log in with granted permission,TC201,TC201_Verify permission for Combine role (other + other)_P2,Login to the system with Combine role (other + other)> user can ONLY see and take actions they are allowed,,P2,Yes,
201,Search members,TC202,TC202_Verify fields on Members_P1,"Login to the system and there is at least one created member > Click Settings on the sub menu > Click Members >System navigates to Members listing page > Verify title name, Menu, List of fields (S/N, Full Name, 
Email, Role, Status, Actions: Edit, Delete)",,P1,Yes,
202,Search members,TC203,TC203_Search Members by keyword_P1,On Scored Candidate Tests listing page > Search tests by candidate’s full name or email (search by KEYWORD) > Click Search > Display the number of results found. Ex: 1 result(s) found.,,P1,Yes,
203,Search members,TC204,TC204_Search Members by Role_P1,On Members listing page > filter by Role > Click Search > Display the number of results found. Ex: 1 result(s) found.,,P1,Yes,
204,Search members,TC205,TC205_Search Members by Status_P1,On Members listing page > filter by Status > Click Search > Display the number of results found. Ex: 1 result(s) found.,,P1,Yes,
205,Search members,TC206,TC206_Search All Members_P2,"On Members listing page > already search by keywords > “Clear filters” is displayed > Click Clear filters > system displays search results that match the default search criteria, which is search all.",,P2,Yes,
206,Search members,TC207,"TC207_Search Pagination, Sorting_P3","On Members listing page > Verify Pagination, Sorting > Sorting: all columns are sortable except for S/N and Actions. Default sort: Full Name (sort alphabetically, ascending order)",,P3,Yes,
207,Update member,TC208,TC208_Verify Update member to inactive successfully_P1,Login to the system and there is at least one active member > On Members listing page > Click Edit member > Update Member popup is displayed > Edit Status to inactive > click Update > system shows Activate/ Deactivate confirmation message. > Click confirm > login with deactivated account > Show error message “Your account has been deactivated. Please contact the administrator for support.” ,,P1,Yes,
208,Update member,TC209,TC209_Verify Update member to inactive unsuccessfully by Cancel_P2,Login to the system and there is at least one active member > On Members listing page > Click Edit member > Update Member popup is displayed > Edit Status to inactive > clicks Update > system shows Activate/ Deactivate confirmation message. > Click Cancel > Login successfully > Verify user can see and take actions they are allowed,,P2,Yes,
209,Update member,TC210,TC210_Verify Update member to active successfully_P1,Login to the system and there is at least one inactive member > On Members listing page > Click Edit member > Update Member popup is displayed >Edit Status to active > clicks Update > system shows Activate/ Deactivate confirmation message. > Click confirm > login with actived account > Login successfully > Verify user can see and take actions they are allowed,,P1,Yes,
210,Update member,TC211,TC211_Verify Update member to active unsuccessfully by Cancel_P2,Login to the system and there is at least one inactive member >On Members listing page > Click Edit member > Update Member popup is displayed >Edit Status to active > clicks Update > system shows Activate/ Deactivate confirmation message. > Click Cancel > login with inactived account > Show error message “Your account has been deactivated. Please contact the administrator for support.”,,P2,Yes,
211,Update member,TC212,TC212_Verify Update member role successfully_P1,"Login to the system and there is at least one active member >On Members listing page > Click Edit member > Update Member popup is displayed > Verify Not allow to edit email > Edit Full Name, Role with valid data > Click Update > Update Member successfully > Login with updated account > Login successfully > Verify user can see and take actions they are allowed",,P1,Yes,
212,Update member,TC213,TC213_Verify Update member role unsuccessfully by Cancel_P2,"Login to the system and there is at least one active member > On Members listing page > Click Edit member > Update Member popup is displayed > Veriffy Not allow to edit email > Edit Full Name, Rule with invalid data> Click Update > Verify error message > Click Cancel ",,P2,Yes,
213,Delete member,TC214,TC214_Verify Delete member successfully_P1, Log in to the system and there is at least one active member who hasn't been invited to review a test > On Members listing page > Click Delete member > show confirmation message > Click confirm > Delete member successfully,,P1,Yes,
214,Delete member,TC215,TC215_Verify Delete member unsuccessfully by Cancel_P2,"Login to the system and there is at least one active member > On Members listing page > Click Delete member > show confirmation message > Click cancel> close popup, do nothing",,P2,Yes,
215,Delete member,TC216,TC216_Verify Delete member unsuccessfully by Invited reviewer role_P1,Login to the system and there is at least one active member with role reviewer (is invited to score tests)> On Members listing page > Click Delete member > Show message “Cannot delete the account as it is being used in the system.”,,P1,Yes,
216,Review candidate tests,TC217,TC217_Verify add Reviewer successfully from Submitted page_P1,"Login to the system and there is at least one submitted candidate test > Click Submitted on the sub menu > System navigates to Submitted Candidate Tests listing page > Click ReviewTests at the end of the line > System shows Review Test popup > Select Reviewer > Click Review > Close popup, show successful message > Update Candidate test status, Send Invite email to the selected reviewer",,P1,Yes,
217,Review candidate tests,TC218,TC218_Verify add Reviewer unsuccessfully from Submitted page by Cancel_P2,"Login to the system and there is at least one submitted candidate test > Click Submitted on the sub menu > System navigates to Submitted Candidate Tests listing page > Click ReviewTests at the end of the line > System shows Review Test popup > Select Reviewer > Click Cancel > Close popup, do nothing",,P2,Yes,
218,Review candidate tests,TC219,TC219_Verify add Reviewer successfully from Reviewing page and kept the previous score review_P1,Login to the system and there is at least one reviewing candidate test (Test is being reviewed (not scored yet))> Click Reviewing the sub menu > System navigates to Reviewing Candidate Tests listing page > On 1 candidate test (Test is being reviewed (not scored yet)): Click ReviewTests > System shows Review Test popup > Select another Reviewer > Click Review > Show pop up to prompt user: “The test may have been partially scored. The assessment data can be either kept or reset.” > Click Clear Score and Review > Verify add reviewer successfully,,P1,Yes,
219,Review candidate tests,TC220,TC220_Verify add Reviewer successfully from Reviewing page and reset the previous score review_P1,Login to the system and there is at least one reviewing candidate test (Test is being reviewed (not scored yet))> Click Reviewing the sub menu > System navigates to Reviewing Candidate Tests listing page > On 1 candidate test (Test is being reviewed (not scored yet)): Click ReviewTests > System shows Review Test popup > Select another Reviewer > Click Review > Show pop up to prompt user: “The test may have been partially scored. The assessment data can be either kept or reset.” > Click Keep Score and Review > Verify add reviewer successfully,,P1,Yes,
220,Review candidate tests,TC221,TC221_Verify add Reviewer unsuccessfully from Reviewing page by Cancel_P2,"Login to the system and there is at least one reviewing candidate test (Test is being reviewed (not scored yet))> Click Reviewing the sub menu > System navigates to Reviewing Candidate Tests listing page > On 1 candidate test (Test is being reviewed (not scored yet)): Click ReviewTests > System shows Review Test popup > Select another Reviewer > Click Review > Show pop up to prompt user: “The test may have been partially scored. The assessment data can be either kept or reset.” > Click Cancel > Close popup, do nothing",,P2,Yes,
221,Review candidate tests,TC222,TC222_Verify add Reviewer successfully when test review has been partially scored_P1,Login to the system and there is at least one reviewing candidate test (Test is being reviewed (partially scored))> Click Reviewing the sub menu > System navigates to Reviewing Candidate Tests listing page > On 1 candidate test (Test is being reviewed (partially scored)): Click ReviewTests > System shows Review Test popup > Select another Reviewer > Click Review > Show pop up to prompt user: “The test may have been partially scored. The assessment data can be either kept or reset.” > Click Clear Score and Review > Verify add reviewer successfully,,P2,Yes,
222,Review candidate tests,TC223,TC223_Verify add multiple Reviewer successfully from Submitted page_P1,"Login to the system and there is at least one submitted candidate test > Click Submitted the sub menu > System navigates to Submitted Candidate Tests listing page > Select multiple candidate test (Test is not being reviewed) Click ReviewTests > System shows Review Test popup > Select Reviewer > Click Review > Close popup, show successful message > Update Candidate test status, Send Invite email to the selected reviewer",,P1,Yes,
223,Review candidate tests,TC224,TC224_Verify add multiple Reviewer successfully from Reviewing page_P1,Login to the system and there is at least one reviewing candidate test > Click Reviewing the sub menu > System navigates to Reviewing Candidate Tests listing page > Select multiple candidate test (Test is being reviewed): Click ReviewTests > System shows Review Test popup > Select another Reviewer > Click Review > Show pop up to prompt user: “The test may have been partially scored. The assessment data can be either kept or reset.” > Click Clear Score and Review > Verify add reviewer successfully,,P1,Yes,
224,Review candidate tests,TC225,TC225_Verify list the users with role “Reviewer”_P2,Verify list the users with role “Reviewer”,,P2,Yes,
225,Review candidate tests,TC226,TC226_Verify only invite a single reviewer at a time_P2,Verify only invite a single reviewer at a time,,P2,Yes,
226,Review candidate tests,TC227,TC227_Verify content Invite email to the selected reviewer_P3,Verify content Invite email to the selected reviewer,,P3,Yes,
227,Review candidate tests,TC228,TC228_Verify Reviewer can only see the tests they are invited to_P3,Verify Reviewer can only see the tests they are invited to,,P3,Yes,
228,Review candidate tests,TC229,TC229_Verify Score after add another Reviewer_P2,Verify Score after add another Reviewer,,P2,Yes,
229,Search reviewing candidate tests,TC230,TC230_Verify navigation on Reviewing in Candidates submenu_P1,"Login to the system and there is at least one reviewing candidate tests > Click Reviewing on the sub menu > System navigates to Reviewing Candidate Tests listing page > Verify title name, Menu, List of fields (S/N, Full Name, 
Email, Reviewed At, Reviewed By, Snapshots, Actions: Review test, Reset test, Score test)",,P1,Yes,
230,Search reviewing candidate tests,TC231,TC231_Search Reviewing candidate tests by keyword_P1,"On Reviewing Candidate Tests listing page > candidate tests by full name or email (search by KEYWORD, non case sensitive) > Click Search > Display the number of results found. Ex: 1 result(s) found.",,P1,Yes,
231,Search reviewing candidate tests,TC232,TC232_Search Reviewing candidate tests by partial text search_P2,"On Reviewing Candidate Tests listing page > candidate tests by full name or email (search by partial text search, non case sensitive) > Click Search > Display the number of results found. Ex: 1 result(s) found.",,P2,Yes,
232,Search reviewing candidate tests,TC233,TC233_Search Reviewing candidate tests by filter by Reviewer_P1,On Reviewing Candidate Tests listing page > filter by Reviewer > Click Search > Display the number of results found. Ex: 1 result(s) found.,,P1,Yes,
233,Search reviewing candidate tests,TC234,TC234_Search All Reviewing candidate tests_P2,"On Reviewing Candidate Tests listing page > already search by keywords > “Clear filters” is displayed > Click Clear filters > system displays search results that match the default search criteria, which is search all.",,P2,Yes,
234,Search reviewing candidate tests,TC235,"TC235_Verify Pagination, Sorting_P3","On Reviewing Candidate Tests listing page > Verify Pagination, Sorting > Sorting: all columns are sortable except for S/N and Actions. Default sort: Full Name (sort alphabetically, ascending order)",,P3,Yes,
235,Score reviewing candidate tests,TC236,TC236_Verify Reviewer can only view and score the tests that they are assigned to_P4,Verify Reviewer can only view and score the tests that they are assigned to.,,P4,Yes,
236,Score reviewing candidate tests,TC237,TC237_Verify Super Admin/ Test Admin can view and score all tests_P4,Verify Super Admin/ Test Admin can view and score all tests.,,P4,Yes,
237,Score reviewing candidate tests,TC238,TC238_Verify Navigation to Score Candidate Tests Page_P1,"Login to the system and there is at least one reviewing candidate test > Click Reviewing the sub menu > System navigates to Reviewing Candidate Tests listing page > On 1 candidate test: Click Score > System navigates to Score Candidate Tests Page > Verify menu, candidate name, Overview: Start time, Duration, Submit Time, Reviewed At, Review By",,P1,Yes,
238,Score reviewing candidate tests,TC239,TC239_Verify Score Candidate Tests successfully_P1,"On Score Candidate Tests Page: Detail Answers > Enter Score for all answers which cannot be auto scored > Click Score > system show confirmation message :”Are you sure you want to complete the assessment? > confirm OK > Verify Candidate test status changes to ""Scored""",,P1,Yes,
239,Score reviewing candidate tests,TC240,TC240_Verify Score Candidate Tests unsuccessfully by Cancel_P2,"On Score Candidate Tests Page: Detail Answers > Enter Score for all answers which cannot be auto scored > Click Score > system show confirmation message :”Are you sure you want to complete the assessment? > Click Cancel > Close popup, do nothing >Verify Candidate Test status is not changed",,P2,Yes,
240,Score reviewing candidate tests,TC241,TC241_Verify Score Candidate Tests unsuccessfully by answers are not scored_P1,On Score Candidate Tests Page: Detail Answers > Verify no action “Score” in UI for auto-scored tests > Enter Score> the max score of the question. > Verify error message > at least one answer is not scored yet > Click Score > system show error message :”Some answers are not scored yet. Please review them to complete the assessment.” > Click OK > Verify Candidate Test status is not changed,,P1,Yes,
241,Score reviewing candidate tests,TC242,TC242_Verify Score multiple choice question_P2,"On Score Candidate Tests Page: Detail Answers > Verify Score multiple choice question: the answer is marked as correct Only when All the selected options are correct.
(Eg: The question has 2 correct options → Candidate must select exactly those 2 to get the score).",,P2,Yes,
242,Score reviewing candidate tests,TC243,TC243_Verify fields in MCQ _P3,"On Score Candidate Tests Page: Detail Answers > Verify MCQ (S/N, Question, Result, Score) , Total, Sub Score",,P3,Yes,
243,Score reviewing candidate tests,TC244,TC244_Verify fileds in other Question_P3,"On Score Candidate Tests Page: Detail Answers > Verify other question (S/N, Question, Score), Total, Sub Score",,P3,Yes,
244,Score reviewing candidate tests,TC245,TC245_Verify comment_P4,Verify User can leave comment about the test and the candidate (optional).,,P4,Yes,
245,Score reviewing candidate tests,TC246,TC246_Verify automatically saved_P2,Verify The assessment is automatically saved when there are changes.,,P2,Yes,
246,"Enhance Menu, Font, Tests listing page",TC247,TC247_Verify Menu update_P3,Verify Menu: Place “Tests” above “Libraries” on the menu. Reduce width of 1st level menu -> more space for main content.,,P3,Yes,
247,"Enhance Menu, Font, Tests listing page",TC248,TC248_Verify Modal update_P3,Verify Modal: Freeze title of modals when scrolling -> user knows the action they're taking.,,P3,Yes,
248,"Enhance Menu, Font, Tests listing page",TC249,TC249_Verify Font update_P4,Verify Font: use another font (may consider HackerEarth or KLMS font family and font size). Reduce font size.,,P4,Yes,
249,"Enhance Menu, Font, Tests listing page",TC250,TC250_Verify Search Ongoing/Completed Tests page_P2,"Verify Search Ongoing/Completed Tests page: Update the horizonal status tabs to vertical tabs (sub menu). Have 3 candidate test statuses displayed on each test: Invited, Submitted, Reviewing.",,P2,Yes,
250,"Enhance Menu, Font, Tests listing page",TC251,TC251_Verify Navigation from Invited on Ongoing Test_P2,"Login to the system and there is at least one Ongoing test with 1 invited, 1 sumitted an 1 Reviewing candidate > Click Ongoing the sub menu Tests > System navigates to Ongoing Tests listing page > On 1 Ongoing test: Click Invited > System navigates to Invited Candidate listing Page",,P2,Yes,
251,"Enhance Menu, Font, Tests listing page",TC252,TC252_Verify Navigation from Submitted on Ongoing Test_P2,"Login to the system and there is at least one Ongoing test with 1 invited, 1 sumitted an 1 Reviewing candidate > Click Ongoing the sub menu Tests > System navigates to Ongoing Tests listing page > On 1 Ongoing test: Click Submitted > System navigates to Submitted Candidate listing Page",,P2,Yes,
252,"Enhance Menu, Font, Tests listing page",TC253,TC253_Verify Navigation from Reviewing on Ongoing Test_P2,"Login to the system and there is at least one Ongoing test with 1 invited, 1 sumitted an 1 Reviewing candidate > Click Ongoing the sub menu Tests > System navigates to Ongoing Tests listing page > On 1 Ongoing test: Click Reviewing > System navigates to Reviewing Candidate listing Page",,P2,Yes,
253,"Enhance Menu, Font, Tests listing page",TC254,TC254_Verify Navigation from Invited on Completed Test_P2,"Login to the system and there is at least one Completed test with 1 invited, 1 sumitted an 1 Reviewing candidate > Click Ongoing the sub menu Tests > System navigates to Completed Tests listing page > On 1 Ongoing test: Click Invited > System navigates to Invited Candidate listing Page",,P2,Yes,
254,"Enhance Menu, Font, Tests listing page",TC255,TC255_Verify Navigation from Submitted on Completed Test_P2,"Login to the system and there is at least one Completed test with 1 invited, 1 sumitted an 1 Reviewing candidate > Click Ongoing the sub menu Tests > System navigates to Completed Tests listing page > On 1 Ongoing test: Click Submitted > System navigates to Submitted Candidate listing Page",,P2,Yes,
255,"Enhance Menu, Font, Tests listing page",TC256,TC256_Verify Navigation from Reviewing on Completed Test_P2,"Login to the system and there is at least one Completed test with 1 invited, 1 sumitted an 1 Reviewing candidate > Click Ongoing the sub menu Tests > System navigates to Completed Tests listing page > On 1 Ongoing test: Click Reviewing> System navigates to Reviewing Candidate listing Page",,P2,Yes,
